FIRRTL version 1.2.0
circuit Exp1AllTest :
  module MuxTemplate :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<1>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<1> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = and(_out_T, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_2 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_3 = and(_out_T_2, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = or(_out_T_1, _out_T_3) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_4 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<3>("h7"), UInt<3>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<1>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<3> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 1, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 2, 2) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux1bit2to1, may finish after 8 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux1bit2to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node _T_9 = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_1 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<1>[4], flip s : UInt<2>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<1> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = and(_out_T, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_2 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_3 = and(_out_T_2, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<2>("h2")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = and(_out_T_4, in.in[2]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_6 = eq(in.s, UInt<2>("h3")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_7 = and(_out_T_6, in.in[3]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = or(_out_T_1, _out_T_3) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_9 = or(_out_T_8, _out_T_5) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_10 = or(_out_T_9, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_10 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_1 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_1 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<1>[4], flip s : UInt<2>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<6> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 1, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 2, 2) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 3, 3) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_3 = bits(_m_in_WIRE_1, 4, 4) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[2] <= _m_in_T_3 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_4 = bits(_m_in_WIRE_1, 5, 5) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[3] <= _m_in_T_4 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[2] <= _m_in_WIRE.in[2] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[3] <= _m_in_WIRE.in[3] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux1bit4to1, may finish after 64 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux1bit4to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node lo = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]
    node hi = cat(m.in.in[3], m.in.in[2]) @[playground/src/exp1/Mux.scala 21:54]
    node _T_9 = cat(hi, lo) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_2 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<1>[8], flip s : UInt<3>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<1> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = and(_out_T, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_2 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_3 = and(_out_T_2, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<2>("h2")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = and(_out_T_4, in.in[2]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_6 = eq(in.s, UInt<2>("h3")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_7 = and(_out_T_6, in.in[3]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = eq(in.s, UInt<3>("h4")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_9 = and(_out_T_8, in.in[4]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_10 = eq(in.s, UInt<3>("h5")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_11 = and(_out_T_10, in.in[5]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_12 = eq(in.s, UInt<3>("h6")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_13 = and(_out_T_12, in.in[6]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_14 = eq(in.s, UInt<3>("h7")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_15 = and(_out_T_14, in.in[7]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_16 = or(_out_T_1, _out_T_3) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_17 = or(_out_T_16, _out_T_5) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_18 = or(_out_T_17, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_19 = or(_out_T_18, _out_T_9) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_20 = or(_out_T_19, _out_T_11) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_21 = or(_out_T_20, _out_T_13) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_22 = or(_out_T_21, _out_T_15) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_22 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_2 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_2 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<11>, clock with :
      reset => (reset, UInt<11>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<11>("h7ff"), UInt<11>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<1>[8], flip s : UInt<3>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<11> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 2, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 3, 3) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 4, 4) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_3 = bits(_m_in_WIRE_1, 5, 5) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[2] <= _m_in_T_3 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_4 = bits(_m_in_WIRE_1, 6, 6) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[3] <= _m_in_T_4 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_5 = bits(_m_in_WIRE_1, 7, 7) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[4] <= _m_in_T_5 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_6 = bits(_m_in_WIRE_1, 8, 8) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[5] <= _m_in_T_6 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_7 = bits(_m_in_WIRE_1, 9, 9) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[6] <= _m_in_T_7 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_8 = bits(_m_in_WIRE_1, 10, 10) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[7] <= _m_in_T_8 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[2] <= _m_in_WIRE.in[2] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[3] <= _m_in_WIRE.in[3] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[4] <= _m_in_WIRE.in[4] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[5] <= _m_in_WIRE.in[5] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[6] <= _m_in_WIRE.in[6] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[7] <= _m_in_WIRE.in[7] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux1bit8to1, may finish after 2048 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux1bit8to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node lo_lo = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]
    node lo_hi = cat(m.in.in[3], m.in.in[2]) @[playground/src/exp1/Mux.scala 21:54]
    node lo = cat(lo_hi, lo_lo) @[playground/src/exp1/Mux.scala 21:54]
    node hi_lo = cat(m.in.in[5], m.in.in[4]) @[playground/src/exp1/Mux.scala 21:54]
    node hi_hi = cat(m.in.in[7], m.in.in[6]) @[playground/src/exp1/Mux.scala 21:54]
    node hi = cat(hi_hi, hi_lo) @[playground/src/exp1/Mux.scala 21:54]
    node _T_9 = cat(hi, lo) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_3 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<2>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<2> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_2 = mux(_out_T_1, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_3 = and(_out_T_2, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_6 = mux(_out_T_5, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_7 = and(_out_T_6, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = or(_out_T_3, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_8 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_3 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_3 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<2>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<5> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 2, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 4, 3) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux2bit2to1, may finish after 32 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux2bit2to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node _T_9 = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_4 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<2>[4], flip s : UInt<2>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<2> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_2 = mux(_out_T_1, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_3 = and(_out_T_2, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_6 = mux(_out_T_5, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_7 = and(_out_T_6, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = eq(in.s, UInt<2>("h2")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_9 = bits(_out_T_8, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_10 = mux(_out_T_9, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_11 = and(_out_T_10, in.in[2]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_12 = eq(in.s, UInt<2>("h3")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_13 = bits(_out_T_12, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_14 = mux(_out_T_13, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_15 = and(_out_T_14, in.in[3]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_16 = or(_out_T_3, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_17 = or(_out_T_16, _out_T_11) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_18 = or(_out_T_17, _out_T_15) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_18 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_4 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_4 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<10>, clock with :
      reset => (reset, UInt<10>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<10>("h3ff"), UInt<10>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<2>[4], flip s : UInt<2>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<10> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 1, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 3, 2) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 5, 4) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_3 = bits(_m_in_WIRE_1, 7, 6) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[2] <= _m_in_T_3 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_4 = bits(_m_in_WIRE_1, 9, 8) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[3] <= _m_in_T_4 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[2] <= _m_in_WIRE.in[2] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[3] <= _m_in_WIRE.in[3] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux2bit4to1, may finish after 1024 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux2bit4to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node lo = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]
    node hi = cat(m.in.in[3], m.in.in[2]) @[playground/src/exp1/Mux.scala 21:54]
    node _T_9 = cat(hi, lo) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_5 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<2>[8], flip s : UInt<3>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<2> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_2 = mux(_out_T_1, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_3 = and(_out_T_2, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_6 = mux(_out_T_5, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_7 = and(_out_T_6, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = eq(in.s, UInt<2>("h2")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_9 = bits(_out_T_8, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_10 = mux(_out_T_9, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_11 = and(_out_T_10, in.in[2]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_12 = eq(in.s, UInt<2>("h3")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_13 = bits(_out_T_12, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_14 = mux(_out_T_13, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_15 = and(_out_T_14, in.in[3]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_16 = eq(in.s, UInt<3>("h4")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_17 = bits(_out_T_16, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_18 = mux(_out_T_17, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_19 = and(_out_T_18, in.in[4]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_20 = eq(in.s, UInt<3>("h5")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_21 = bits(_out_T_20, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_22 = mux(_out_T_21, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_23 = and(_out_T_22, in.in[5]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_24 = eq(in.s, UInt<3>("h6")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_25 = bits(_out_T_24, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_26 = mux(_out_T_25, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_27 = and(_out_T_26, in.in[6]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_28 = eq(in.s, UInt<3>("h7")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_29 = bits(_out_T_28, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_30 = mux(_out_T_29, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_31 = and(_out_T_30, in.in[7]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_32 = or(_out_T_3, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_33 = or(_out_T_32, _out_T_11) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_34 = or(_out_T_33, _out_T_15) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_35 = or(_out_T_34, _out_T_19) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_36 = or(_out_T_35, _out_T_23) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_37 = or(_out_T_36, _out_T_27) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_38 = or(_out_T_37, _out_T_31) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_38 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_5 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_5 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<19>, clock with :
      reset => (reset, UInt<19>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<19>("h7ffff"), UInt<19>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<2>[8], flip s : UInt<3>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<19> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 2, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 4, 3) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 6, 5) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_3 = bits(_m_in_WIRE_1, 8, 7) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[2] <= _m_in_T_3 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_4 = bits(_m_in_WIRE_1, 10, 9) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[3] <= _m_in_T_4 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_5 = bits(_m_in_WIRE_1, 12, 11) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[4] <= _m_in_T_5 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_6 = bits(_m_in_WIRE_1, 14, 13) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[5] <= _m_in_T_6 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_7 = bits(_m_in_WIRE_1, 16, 15) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[6] <= _m_in_T_7 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_8 = bits(_m_in_WIRE_1, 18, 17) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[7] <= _m_in_T_8 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[2] <= _m_in_WIRE.in[2] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[3] <= _m_in_WIRE.in[3] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[4] <= _m_in_WIRE.in[4] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[5] <= _m_in_WIRE.in[5] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[6] <= _m_in_WIRE.in[6] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[7] <= _m_in_WIRE.in[7] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux2bit8to1, may finish after 524288 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux2bit8to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node lo_lo = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]
    node lo_hi = cat(m.in.in[3], m.in.in[2]) @[playground/src/exp1/Mux.scala 21:54]
    node lo = cat(lo_hi, lo_lo) @[playground/src/exp1/Mux.scala 21:54]
    node hi_lo = cat(m.in.in[5], m.in.in[4]) @[playground/src/exp1/Mux.scala 21:54]
    node hi_hi = cat(m.in.in[7], m.in.in[6]) @[playground/src/exp1/Mux.scala 21:54]
    node hi = cat(hi_hi, hi_lo) @[playground/src/exp1/Mux.scala 21:54]
    node _T_9 = cat(hi, lo) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_6 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<3>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<3> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_2 = mux(_out_T_1, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_3 = and(_out_T_2, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_6 = mux(_out_T_5, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_7 = and(_out_T_6, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = or(_out_T_3, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_8 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_6 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_6 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<7>("h7f"), UInt<7>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<3>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<7> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 3, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 6, 4) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux3bit2to1, may finish after 128 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux3bit2to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node _T_9 = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_7 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<3>[4], flip s : UInt<2>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<3> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_2 = mux(_out_T_1, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_3 = and(_out_T_2, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_6 = mux(_out_T_5, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_7 = and(_out_T_6, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = eq(in.s, UInt<2>("h2")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_9 = bits(_out_T_8, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_10 = mux(_out_T_9, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_11 = and(_out_T_10, in.in[2]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_12 = eq(in.s, UInt<2>("h3")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_13 = bits(_out_T_12, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_14 = mux(_out_T_13, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_15 = and(_out_T_14, in.in[3]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_16 = or(_out_T_3, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_17 = or(_out_T_16, _out_T_11) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_18 = or(_out_T_17, _out_T_15) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_18 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_7 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_7 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<14>, clock with :
      reset => (reset, UInt<14>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<14>("h3fff"), UInt<14>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<3>[4], flip s : UInt<2>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<14> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 1, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 4, 2) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 7, 5) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_3 = bits(_m_in_WIRE_1, 10, 8) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[2] <= _m_in_T_3 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_4 = bits(_m_in_WIRE_1, 13, 11) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[3] <= _m_in_T_4 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[2] <= _m_in_WIRE.in[2] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[3] <= _m_in_WIRE.in[3] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux3bit4to1, may finish after 16384 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux3bit4to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node lo = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]
    node hi = cat(m.in.in[3], m.in.in[2]) @[playground/src/exp1/Mux.scala 21:54]
    node _T_9 = cat(hi, lo) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_8 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<4>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<4> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_2 = mux(_out_T_1, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_3 = and(_out_T_2, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_6 = mux(_out_T_5, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_7 = and(_out_T_6, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = or(_out_T_3, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_8 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_8 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_8 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<9>("h1ff"), UInt<9>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<4>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<9> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 4, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 8, 5) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux4bit2to1, may finish after 512 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux4bit2to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node _T_9 = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_9 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<4>[4], flip s : UInt<2>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<4> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_2 = mux(_out_T_1, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_3 = and(_out_T_2, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_6 = mux(_out_T_5, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_7 = and(_out_T_6, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = eq(in.s, UInt<2>("h2")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_9 = bits(_out_T_8, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_10 = mux(_out_T_9, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_11 = and(_out_T_10, in.in[2]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_12 = eq(in.s, UInt<2>("h3")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_13 = bits(_out_T_12, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_14 = mux(_out_T_13, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_15 = and(_out_T_14, in.in[3]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_16 = or(_out_T_3, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_17 = or(_out_T_16, _out_T_11) @[playground/src/exp1/Mux.scala 12:85]
    node _out_T_18 = or(_out_T_17, _out_T_15) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_18 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_9 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_9 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<18>, clock with :
      reset => (reset, UInt<18>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<18>("h3ffff"), UInt<18>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<4>[4], flip s : UInt<2>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<18> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 1, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 5, 2) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 9, 6) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_3 = bits(_m_in_WIRE_1, 13, 10) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[2] <= _m_in_T_3 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_4 = bits(_m_in_WIRE_1, 17, 14) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[3] <= _m_in_T_4 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[2] <= _m_in_WIRE.in[2] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[3] <= _m_in_WIRE.in[3] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux4bit4to1, may finish after 262144 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux4bit4to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node lo = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]
    node hi = cat(m.in.in[3], m.in.in[2]) @[playground/src/exp1/Mux.scala 21:54]
    node _T_9 = cat(hi, lo) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_10 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<5>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<5> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_2 = mux(_out_T_1, UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_3 = and(_out_T_2, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_6 = mux(_out_T_5, UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_7 = and(_out_T_6, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = or(_out_T_3, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_8 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_10 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_10 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<11>, clock with :
      reset => (reset, UInt<11>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<11>("h7ff"), UInt<11>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<5>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<11> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 5, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 10, 6) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux5bit2to1, may finish after 2048 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux5bit2to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node _T_9 = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_11 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<6>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<6> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_2 = mux(_out_T_1, UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_3 = and(_out_T_2, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_6 = mux(_out_T_5, UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_7 = and(_out_T_6, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = or(_out_T_3, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_8 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_11 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_11 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<13>, clock with :
      reset => (reset, UInt<13>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<13>("h1fff"), UInt<13>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<6>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<13> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 6, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 12, 7) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux6bit2to1, may finish after 8192 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux6bit2to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node _T_9 = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_12 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<7>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<7> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_2 = mux(_out_T_1, UInt<7>("h7f"), UInt<7>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_3 = and(_out_T_2, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_6 = mux(_out_T_5, UInt<7>("h7f"), UInt<7>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_7 = and(_out_T_6, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = or(_out_T_3, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_8 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_12 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_12 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<15>("h7fff"), UInt<15>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<7>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<15> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 7, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 14, 8) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux7bit2to1, may finish after 32768 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux7bit2to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node _T_9 = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_13 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<8>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<8> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_2 = mux(_out_T_1, UInt<8>("hff"), UInt<8>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_3 = and(_out_T_2, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_6 = mux(_out_T_5, UInt<8>("hff"), UInt<8>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_7 = and(_out_T_6, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = or(_out_T_3, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_8 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_13 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_13 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<17>("h1ffff"), UInt<17>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<8>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<17> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 8, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 16, 9) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux8bit2to1, may finish after 131072 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux8bit2to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node _T_9 = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]

  module MuxTemplate_14 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip in : UInt<9>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<9> @[playground/src/utils/Utils.scala 28:15]

    node _out_T = eq(in.s, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_2 = mux(_out_T_1, UInt<9>("h1ff"), UInt<9>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_3 = and(_out_T_2, in.in[0]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_4 = eq(in.s, UInt<1>("h1")) @[playground/src/exp1/Mux.scala 12:56]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_6 = mux(_out_T_5, UInt<9>("h1ff"), UInt<9>("h0")) @[playground/src/exp1/Mux.scala 12:42]
    node _out_T_7 = and(_out_T_6, in.in[1]) @[playground/src/exp1/Mux.scala 12:69]
    node _out_T_8 = or(_out_T_3, _out_T_7) @[playground/src/exp1/Mux.scala 12:85]
    out <= _out_T_8 @[playground/src/exp1/Mux.scala 12:7]
    node _T = eq(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:18]
    node _T_1 = xor(in.in[in.s], out) @[playground/src/exp1/Mux.scala 15:82]
    node _T_2 = asUInt(reset) @[playground/src/exp1/Mux.scala 15:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
    when _T_3 : @[playground/src/exp1/Mux.scala 15:9]
      node _T_4 = eq(_T, UInt<1>("h0")) @[playground/src/exp1/Mux.scala 15:9]
      when _T_4 : @[playground/src/exp1/Mux.scala 15:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: ref = %b, dut = %b, diff = %b\n    at Mux.scala:15 assert(ref_out === out, \"ref = %%%%b, dut = %%%%b, diff = %%%%b\", ref_out, out, ref_out ^ out)\n", in.in[in.s], out, _T_1) : printf @[playground/src/exp1/Mux.scala 15:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp1/Mux.scala 15:9]


  module MuxTest_14 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MuxTemplate_14 @[playground/src/exp1/Mux.scala 19:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<19>, clock with :
      reset => (reset, UInt<19>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<19>("h7ffff"), UInt<19>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip in : UInt<9>[2], flip s : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<19> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.s <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 9, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[0] <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 18, 10) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.in[1] <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.s <= _m_in_WIRE.s @[playground/src/utils/Utils.scala 33:12]
    m.in.in[0] <= _m_in_WIRE.in[0] @[playground/src/utils/Utils.scala 33:12]
    m.in.in[1] <= _m_in_WIRE.in[1] @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Mux9bit2to1, may finish after 524288 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Mux9bit2to1\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]
    node _T_9 = cat(m.in.in[1], m.in.in[0]) @[playground/src/exp1/Mux.scala 21:54]

  module Exp1AllTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst modules_0 of MuxTest @[playground/src/exp1/Mux.scala 28:38]
    modules_0.clock <= clock
    modules_0.reset <= reset
    inst modules_1 of MuxTest_1 @[playground/src/exp1/Mux.scala 28:38]
    modules_1.clock <= clock
    modules_1.reset <= reset
    inst modules_2 of MuxTest_2 @[playground/src/exp1/Mux.scala 28:38]
    modules_2.clock <= clock
    modules_2.reset <= reset
    inst modules_3 of MuxTest_3 @[playground/src/exp1/Mux.scala 28:38]
    modules_3.clock <= clock
    modules_3.reset <= reset
    inst modules_4 of MuxTest_4 @[playground/src/exp1/Mux.scala 28:38]
    modules_4.clock <= clock
    modules_4.reset <= reset
    inst modules_5 of MuxTest_5 @[playground/src/exp1/Mux.scala 28:38]
    modules_5.clock <= clock
    modules_5.reset <= reset
    inst modules_6 of MuxTest_6 @[playground/src/exp1/Mux.scala 28:38]
    modules_6.clock <= clock
    modules_6.reset <= reset
    inst modules_7 of MuxTest_7 @[playground/src/exp1/Mux.scala 28:38]
    modules_7.clock <= clock
    modules_7.reset <= reset
    inst modules_8 of MuxTest_8 @[playground/src/exp1/Mux.scala 28:38]
    modules_8.clock <= clock
    modules_8.reset <= reset
    inst modules_9 of MuxTest_9 @[playground/src/exp1/Mux.scala 28:38]
    modules_9.clock <= clock
    modules_9.reset <= reset
    inst modules_10 of MuxTest_10 @[playground/src/exp1/Mux.scala 28:38]
    modules_10.clock <= clock
    modules_10.reset <= reset
    inst modules_11 of MuxTest_11 @[playground/src/exp1/Mux.scala 28:38]
    modules_11.clock <= clock
    modules_11.reset <= reset
    inst modules_12 of MuxTest_12 @[playground/src/exp1/Mux.scala 28:38]
    modules_12.clock <= clock
    modules_12.reset <= reset
    inst modules_13 of MuxTest_13 @[playground/src/exp1/Mux.scala 28:38]
    modules_13.clock <= clock
    modules_13.reset <= reset
    inst modules_14 of MuxTest_14 @[playground/src/exp1/Mux.scala 28:38]
    modules_14.clock <= clock
    modules_14.reset <= reset
    node _finish_T = and(modules_0.finish, modules_1.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_1 = and(_finish_T, modules_2.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_2 = and(_finish_T_1, modules_3.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_3 = and(_finish_T_2, modules_4.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_4 = and(_finish_T_3, modules_5.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_5 = and(_finish_T_4, modules_6.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_6 = and(_finish_T_5, modules_7.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_7 = and(_finish_T_6, modules_8.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_8 = and(_finish_T_7, modules_9.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_9 = and(_finish_T_8, modules_10.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_10 = and(_finish_T_9, modules_11.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_11 = and(_finish_T_10, modules_12.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_12 = and(_finish_T_11, modules_13.finish) @[playground/src/exp1/Mux.scala 29:43]
    node _finish_T_13 = and(_finish_T_12, modules_14.finish) @[playground/src/exp1/Mux.scala 29:43]
    finish <= _finish_T_13 @[playground/src/exp1/Mux.scala 29:10]
