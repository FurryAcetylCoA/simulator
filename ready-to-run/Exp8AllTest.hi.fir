FIRRTL version 1.2.0
circuit Exp8AllTest :
  module VGACtrl :
    input clock : Clock
    input reset : UInt<1>
    output in : { } @[playground/src/utils/Utils.scala 27:14]
    output out : { h_addr : UInt<10>, v_addr : UInt<10>, hsync : UInt<1>, vsync : UInt<1>, valid : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    reg x_cnt : UInt<10>, clock with :
      reset => (reset, UInt<10>("h1")) @[playground/src/exp8/VGA.scala 28:22]
    reg y_cnt : UInt<10>, clock with :
      reset => (reset, UInt<10>("h1")) @[playground/src/exp8/VGA.scala 29:22]
    node _T = eq(x_cnt, UInt<10>("h320")) @[playground/src/exp8/VGA.scala 32:15]
    when _T : @[playground/src/exp8/VGA.scala 32:30]
      x_cnt <= UInt<1>("h1") @[playground/src/exp8/VGA.scala 32:38]
    else :
      node _x_cnt_T = add(x_cnt, UInt<1>("h1")) @[playground/src/exp8/VGA.scala 33:31]
      node _x_cnt_T_1 = tail(_x_cnt_T, 1) @[playground/src/exp8/VGA.scala 33:31]
      x_cnt <= _x_cnt_T_1 @[playground/src/exp8/VGA.scala 33:22]
    node _T_1 = eq(y_cnt, UInt<10>("h20d")) @[playground/src/exp8/VGA.scala 35:15]
    node _T_2 = eq(x_cnt, UInt<10>("h320")) @[playground/src/exp8/VGA.scala 35:38]
    node _T_3 = and(_T_1, _T_2) @[playground/src/exp8/VGA.scala 35:29]
    when _T_3 : @[playground/src/exp8/VGA.scala 35:53]
      y_cnt <= UInt<1>("h1") @[playground/src/exp8/VGA.scala 35:61]
    else :
      node _T_4 = eq(x_cnt, UInt<10>("h320")) @[playground/src/exp8/VGA.scala 36:20]
      when _T_4 : @[playground/src/exp8/VGA.scala 36:35]
        node _y_cnt_T = add(y_cnt, UInt<1>("h1")) @[playground/src/exp8/VGA.scala 36:52]
        node _y_cnt_T_1 = tail(_y_cnt_T, 1) @[playground/src/exp8/VGA.scala 36:52]
        y_cnt <= _y_cnt_T_1 @[playground/src/exp8/VGA.scala 36:43]
    node _out_hsync_T = gt(x_cnt, UInt<7>("h60")) @[playground/src/exp8/VGA.scala 39:23]
    out.hsync <= _out_hsync_T @[playground/src/exp8/VGA.scala 39:13]
    node _out_vsync_T = gt(y_cnt, UInt<2>("h2")) @[playground/src/exp8/VGA.scala 40:23]
    out.vsync <= _out_vsync_T @[playground/src/exp8/VGA.scala 40:13]
    node _h_valid_T = gt(x_cnt, UInt<8>("h90")) @[playground/src/exp8/VGA.scala 43:24]
    node _h_valid_T_1 = leq(x_cnt, UInt<10>("h310")) @[playground/src/exp8/VGA.scala 43:47]
    node h_valid = and(_h_valid_T, _h_valid_T_1) @[playground/src/exp8/VGA.scala 43:38]
    node _v_valid_T = gt(y_cnt, UInt<6>("h23")) @[playground/src/exp8/VGA.scala 44:24]
    node _v_valid_T_1 = leq(y_cnt, UInt<10>("h203")) @[playground/src/exp8/VGA.scala 44:47]
    node v_valid = and(_v_valid_T, _v_valid_T_1) @[playground/src/exp8/VGA.scala 44:38]
    node _out_valid_T = and(h_valid, v_valid) @[playground/src/exp8/VGA.scala 45:24]
    out.valid <= _out_valid_T @[playground/src/exp8/VGA.scala 45:13]
    node _out_h_addr_T = sub(x_cnt, UInt<8>("h91")) @[playground/src/exp8/VGA.scala 47:37]
    node _out_h_addr_T_1 = tail(_out_h_addr_T, 1) @[playground/src/exp8/VGA.scala 47:37]
    node _out_h_addr_T_2 = mux(h_valid, _out_h_addr_T_1, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 47:20]
    out.h_addr <= _out_h_addr_T_2 @[playground/src/exp8/VGA.scala 47:14]
    node _out_v_addr_T = sub(y_cnt, UInt<6>("h24")) @[playground/src/exp8/VGA.scala 48:37]
    node _out_v_addr_T_1 = tail(_out_v_addr_T, 1) @[playground/src/exp8/VGA.scala 48:37]
    node _out_v_addr_T_2 = mux(v_valid, _out_v_addr_T_1, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 48:20]
    out.v_addr <= _out_v_addr_T_2 @[playground/src/exp8/VGA.scala 48:14]
    reg ref_x_cnt : UInt<10>, clock with :
      reset => (reset, UInt<10>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_x_cnt_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_x_cnt_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when UInt<1>("h1") : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_x_cnt, UInt<10>("h31f")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_x_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_x_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_x_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_x_cnt_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    reg ref_y_cnt : UInt<10>, clock with :
      reset => (reset, UInt<10>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_y_cnt_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_y_cnt_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when ref_x_cnt_wrap : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap_1 = eq(ref_y_cnt, UInt<10>("h20c")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T_2 = add(ref_y_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_y_cnt <= _wrap_value_T_3 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap_1 : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_y_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_y_cnt_wrap <= wrap_wrap_1 @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node ref_hsync = geq(ref_x_cnt, UInt<7>("h60")) @[playground/src/exp8/VGA.scala 53:30]
    node ref_vsync = geq(ref_y_cnt, UInt<2>("h2")) @[playground/src/exp8/VGA.scala 54:30]
    node _ref_h_valid_T = geq(ref_x_cnt, UInt<8>("h90")) @[playground/src/exp8/VGA.scala 55:51]
    node _ref_h_valid_T_1 = lt(ref_x_cnt, UInt<10>("h310")) @[playground/src/exp8/VGA.scala 55:69]
    node ref_h_valid = and(_ref_h_valid_T, _ref_h_valid_T_1) @[playground/src/exp8/VGA.scala 55:63]
    node _ref_v_valid_T = geq(ref_y_cnt, UInt<6>("h23")) @[playground/src/exp8/VGA.scala 55:51]
    node _ref_v_valid_T_1 = lt(ref_y_cnt, UInt<10>("h203")) @[playground/src/exp8/VGA.scala 55:69]
    node ref_v_valid = and(_ref_v_valid_T, _ref_v_valid_T_1) @[playground/src/exp8/VGA.scala 55:63]
    node ref_valid = and(ref_h_valid, ref_v_valid) @[playground/src/exp8/VGA.scala 58:31]
    node _ref_h_addr_T = sub(ref_x_cnt, UInt<8>("h90")) @[playground/src/exp8/VGA.scala 59:48]
    node _ref_h_addr_T_1 = tail(_ref_h_addr_T, 1) @[playground/src/exp8/VGA.scala 59:48]
    node ref_h_addr = mux(ref_h_valid, _ref_h_addr_T_1, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 59:23]
    node _ref_v_addr_T = sub(ref_y_cnt, UInt<6>("h23")) @[playground/src/exp8/VGA.scala 60:48]
    node _ref_v_addr_T_1 = tail(_ref_v_addr_T, 1) @[playground/src/exp8/VGA.scala 60:48]
    node ref_v_addr = mux(ref_v_valid, _ref_v_addr_T_1, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 60:23]
    node _T_5 = eq(out.hsync, ref_hsync) @[playground/src/exp8/VGA.scala 62:20]
    node _T_6 = asUInt(reset) @[playground/src/exp8/VGA.scala 62:9]
    node _T_7 = eq(_T_6, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 62:9]
    when _T_7 : @[playground/src/exp8/VGA.scala 62:9]
      node _T_8 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 62:9]
      when _T_8 : @[playground/src/exp8/VGA.scala 62:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VGA.scala:62 assert(out.hsync === ref_hsync)\n") : printf @[playground/src/exp8/VGA.scala 62:9]
      assert(clock, _T_5, UInt<1>("h1"), "") : assert @[playground/src/exp8/VGA.scala 62:9]
    node _T_9 = eq(out.vsync, ref_vsync) @[playground/src/exp8/VGA.scala 63:20]
    node _T_10 = asUInt(reset) @[playground/src/exp8/VGA.scala 63:9]
    node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 63:9]
    when _T_11 : @[playground/src/exp8/VGA.scala 63:9]
      node _T_12 = eq(_T_9, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 63:9]
      when _T_12 : @[playground/src/exp8/VGA.scala 63:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VGA.scala:63 assert(out.vsync === ref_vsync)\n") : printf_1 @[playground/src/exp8/VGA.scala 63:9]
      assert(clock, _T_9, UInt<1>("h1"), "") : assert_1 @[playground/src/exp8/VGA.scala 63:9]
    node _T_13 = eq(h_valid, ref_h_valid) @[playground/src/exp8/VGA.scala 64:18]
    node _T_14 = asUInt(reset) @[playground/src/exp8/VGA.scala 64:9]
    node _T_15 = eq(_T_14, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 64:9]
    when _T_15 : @[playground/src/exp8/VGA.scala 64:9]
      node _T_16 = eq(_T_13, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 64:9]
      when _T_16 : @[playground/src/exp8/VGA.scala 64:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VGA.scala:64 assert(h_valid === ref_h_valid)\n") : printf_2 @[playground/src/exp8/VGA.scala 64:9]
      assert(clock, _T_13, UInt<1>("h1"), "") : assert_2 @[playground/src/exp8/VGA.scala 64:9]
    node _T_17 = eq(v_valid, ref_v_valid) @[playground/src/exp8/VGA.scala 65:18]
    node _T_18 = asUInt(reset) @[playground/src/exp8/VGA.scala 65:9]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 65:9]
    when _T_19 : @[playground/src/exp8/VGA.scala 65:9]
      node _T_20 = eq(_T_17, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 65:9]
      when _T_20 : @[playground/src/exp8/VGA.scala 65:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VGA.scala:65 assert(v_valid === ref_v_valid)\n") : printf_3 @[playground/src/exp8/VGA.scala 65:9]
      assert(clock, _T_17, UInt<1>("h1"), "") : assert_3 @[playground/src/exp8/VGA.scala 65:9]
    node _T_21 = eq(out.valid, ref_valid) @[playground/src/exp8/VGA.scala 66:20]
    node _T_22 = asUInt(reset) @[playground/src/exp8/VGA.scala 66:9]
    node _T_23 = eq(_T_22, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 66:9]
    when _T_23 : @[playground/src/exp8/VGA.scala 66:9]
      node _T_24 = eq(_T_21, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 66:9]
      when _T_24 : @[playground/src/exp8/VGA.scala 66:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VGA.scala:66 assert(out.valid === ref_valid)\n") : printf_4 @[playground/src/exp8/VGA.scala 66:9]
      assert(clock, _T_21, UInt<1>("h1"), "") : assert_4 @[playground/src/exp8/VGA.scala 66:9]
    node _T_25 = eq(out.h_addr, ref_h_addr) @[playground/src/exp8/VGA.scala 67:21]
    node _T_26 = asUInt(reset) @[playground/src/exp8/VGA.scala 67:9]
    node _T_27 = eq(_T_26, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 67:9]
    when _T_27 : @[playground/src/exp8/VGA.scala 67:9]
      node _T_28 = eq(_T_25, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 67:9]
      when _T_28 : @[playground/src/exp8/VGA.scala 67:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VGA.scala:67 assert(out.h_addr === ref_h_addr)\n") : printf_5 @[playground/src/exp8/VGA.scala 67:9]
      assert(clock, _T_25, UInt<1>("h1"), "") : assert_5 @[playground/src/exp8/VGA.scala 67:9]
    node _T_29 = eq(out.v_addr, ref_v_addr) @[playground/src/exp8/VGA.scala 68:21]
    node _T_30 = asUInt(reset) @[playground/src/exp8/VGA.scala 68:9]
    node _T_31 = eq(_T_30, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 68:9]
    when _T_31 : @[playground/src/exp8/VGA.scala 68:9]
      node _T_32 = eq(_T_29, UInt<1>("h0")) @[playground/src/exp8/VGA.scala 68:9]
      when _T_32 : @[playground/src/exp8/VGA.scala 68:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at VGA.scala:68 assert(out.v_addr === ref_v_addr)\n") : printf_6 @[playground/src/exp8/VGA.scala 68:9]
      assert(clock, _T_29, UInt<1>("h1"), "") : assert_6 @[playground/src/exp8/VGA.scala 68:9]


  module VGACtrlTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of VGACtrl @[playground/src/exp8/VGA.scala 72:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<20>, clock with :
      reset => (reset, UInt<20>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<20>("hcd45f")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    reg cnt : UInt<20>, clock with :
      reset => (reset, UInt<20>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire finish_1 : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    finish_1 <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when UInt<1>("h1") : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap_1 = eq(cnt, UInt<20>("hcd45f")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      cnt <= _wrap_value_T_3 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap_1 : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      finish_1 <= wrap_wrap_1 @[src/main/scala/chisel3/util/Counter.scala 118:23]
    wire allStepIn : { }[840800] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<0> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_2 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_3 = and(start, _T_2) @[playground/src/utils/Utils.scala 48:17]
    when _T_3 : @[playground/src/utils/Utils.scala 48:37]
      node _T_4 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_5 = eq(_T_4, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_5 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for VGACtrl, may finish after 840800 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_6 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_7 = and(_T_6, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_7 : @[playground/src/utils/Utils.scala 52:32]
      node _T_8 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_9 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_10 = eq(_T_9, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_10 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: VGACtrl\n", _T_8) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module DFA :
    input clock : Clock
    input reset : UInt<1>
    input in : UInt<6> @[playground/src/utils/Utils.scala 27:14]
    output out : { accept : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    wire finish_c_value : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 61:73]
    finish_c_value <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 61:73]
    wire finish : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    finish <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when UInt<1>("h1") : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      finish <= UInt<1>("h1") @[src/main/scala/chisel3/util/Counter.scala 118:23]
    reg already_finish : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 12:31]
    already_finish <= finish @[playground/src/exp8/DFA.scala 12:31]
    node _real_finish_T = eq(already_finish, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 13:31]
    node real_finish = and(finish, _real_finish_T) @[playground/src/exp8/DFA.scala 13:28]
    node _n_cnt_T = eq(UInt<4>("he"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _n_cnt_T_1 = eq(UInt<6>("h2e"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _n_cnt_T_2 = or(_n_cnt_T, _n_cnt_T_1) @[playground/src/exp8/DFA.scala 15:83]
    reg n_cnt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire n_cnt_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    n_cnt_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _n_cnt_T_2 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node n_cnt_wrap_wrap = eq(n_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _n_cnt_wrap_value_T = add(n_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _n_cnt_wrap_value_T_1 = tail(_n_cnt_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      n_cnt <= _n_cnt_wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      n_cnt_wrap <= n_cnt_wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _other_cnt_T = eq(UInt<4>("he"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _other_cnt_T_1 = eq(UInt<6>("h2e"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _other_cnt_T_2 = or(_other_cnt_T, _other_cnt_T_1) @[playground/src/exp8/DFA.scala 15:83]
    node _other_cnt_T_3 = eq(_other_cnt_T_2, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 17:27]
    reg other_cnt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire other_cnt_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    other_cnt_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _other_cnt_T_3 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node other_cnt_wrap_wrap = eq(other_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _other_cnt_wrap_value_T = add(other_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _other_cnt_wrap_value_T_1 = tail(_other_cnt_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      other_cnt <= _other_cnt_wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      other_cnt_wrap <= other_cnt_wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _n_cnt_final_T = eq(UInt<4>("he"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _n_cnt_final_T_1 = eq(UInt<6>("h2e"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _n_cnt_final_T_2 = or(_n_cnt_final_T, _n_cnt_final_T_1) @[playground/src/exp8/DFA.scala 15:83]
    node _n_cnt_final_T_3 = add(n_cnt, _n_cnt_final_T_2) @[playground/src/exp8/DFA.scala 18:27]
    node n_cnt_final = tail(_n_cnt_final_T_3, 1) @[playground/src/exp8/DFA.scala 18:27]
    node _other_cnt_final_T = eq(UInt<4>("he"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _other_cnt_final_T_1 = eq(UInt<6>("h2e"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _other_cnt_final_T_2 = or(_other_cnt_final_T, _other_cnt_final_T_1) @[playground/src/exp8/DFA.scala 15:83]
    node _other_cnt_final_T_3 = eq(_other_cnt_final_T_2, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 19:37]
    node _other_cnt_final_T_4 = add(other_cnt, _other_cnt_final_T_3) @[playground/src/exp8/DFA.scala 19:35]
    node other_cnt_final = tail(_other_cnt_final_T_4, 1) @[playground/src/exp8/DFA.scala 19:35]
    node _out_accept_T = eq(n_cnt_final, UInt<1>("h1")) @[playground/src/exp8/DFA.scala 20:47]
    node _out_accept_T_1 = eq(other_cnt_final, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 20:76]
    node _out_accept_T_2 = and(_out_accept_T, _out_accept_T_1) @[playground/src/exp8/DFA.scala 20:56]
    node _out_accept_T_3 = mux(real_finish, _out_accept_T_2, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 20:20]
    out.accept <= _out_accept_T_3 @[playground/src/exp8/DFA.scala 20:14]
    node _buffer_next_T = shl(UInt<8>("h0"), 8) @[playground/src/exp8/DFA.scala 22:37]
    node _buffer_next_T_1 = cat(UInt<2>("h1"), in) @[playground/src/exp8/DFA.scala 22:48]
    node _buffer_next_T_2 = or(_buffer_next_T, _buffer_next_T_1) @[playground/src/exp8/DFA.scala 22:43]
    wire buffer_next : UInt<16> @[playground/src/utils/Utils.scala 62:20]
    reg buffer : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when UInt<1>("h1") : @[playground/src/utils/Utils.scala 63:22]
      buffer <= buffer_next @[playground/src/utils/Utils.scala 63:22]
    node _buffer_next_T_3 = shl(buffer, 8) @[playground/src/exp8/DFA.scala 22:37]
    node _buffer_next_T_4 = cat(UInt<2>("h1"), in) @[playground/src/exp8/DFA.scala 22:48]
    node _buffer_next_T_5 = or(_buffer_next_T_3, _buffer_next_T_4) @[playground/src/exp8/DFA.scala 22:43]
    buffer_next <= _buffer_next_T_5 @[playground/src/utils/Utils.scala 64:10]
    node allInput_hi = cat(buffer, UInt<2>("h1")) @[playground/src/exp8/DFA.scala 23:21]
    node _allInput_T = cat(allInput_hi, in) @[playground/src/exp8/DFA.scala 23:21]
    node allInput = bits(_allInput_T, 7, 0) @[playground/src/exp8/DFA.scala 23:47]
    wire _n_parity_WIRE : UInt<8>[1] @[playground/src/exp8/DFA.scala 25:43]
    wire _n_parity_WIRE_1 : UInt<8> @[playground/src/exp8/DFA.scala 25:43]
    _n_parity_WIRE_1 <= allInput @[playground/src/exp8/DFA.scala 25:43]
    node _n_parity_T = bits(_n_parity_WIRE_1, 7, 0) @[playground/src/exp8/DFA.scala 25:43]
    _n_parity_WIRE[0] <= _n_parity_T @[playground/src/exp8/DFA.scala 25:43]
    node _n_parity_T_1 = eq(_n_parity_WIRE[0], UInt<7>("h4e")) @[playground/src/exp8/DFA.scala 24:30]
    node _n_parity_T_2 = eq(_n_parity_WIRE[0], UInt<7>("h6e")) @[playground/src/exp8/DFA.scala 24:48]
    node _n_parity_T_3 = or(_n_parity_T_1, _n_parity_T_2) @[playground/src/exp8/DFA.scala 24:42]
    node n_parity = xorr(_n_parity_T_3) @[playground/src/exp8/DFA.scala 25:81]
    wire _other_parity_WIRE : UInt<8>[1] @[playground/src/exp8/DFA.scala 26:43]
    wire _other_parity_WIRE_1 : UInt<8> @[playground/src/exp8/DFA.scala 26:43]
    _other_parity_WIRE_1 <= allInput @[playground/src/exp8/DFA.scala 26:43]
    node _other_parity_T = bits(_other_parity_WIRE_1, 7, 0) @[playground/src/exp8/DFA.scala 26:43]
    _other_parity_WIRE[0] <= _other_parity_T @[playground/src/exp8/DFA.scala 26:43]
    node _other_parity_T_1 = eq(_other_parity_WIRE[0], UInt<7>("h4e")) @[playground/src/exp8/DFA.scala 24:30]
    node _other_parity_T_2 = eq(_other_parity_WIRE[0], UInt<7>("h6e")) @[playground/src/exp8/DFA.scala 24:48]
    node _other_parity_T_3 = or(_other_parity_T_1, _other_parity_T_2) @[playground/src/exp8/DFA.scala 24:42]
    node _other_parity_T_4 = eq(_other_parity_T_3, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 26:67]
    node other_parity = xorr(_other_parity_T_4) @[playground/src/exp8/DFA.scala 26:81]
    node _ref_accept_T = eq(other_parity, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 27:49]
    node _ref_accept_T_1 = and(n_parity, _ref_accept_T) @[playground/src/exp8/DFA.scala 27:46]
    node ref_accept = mux(real_finish, _ref_accept_T_1, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 27:23]
    node _T = eq(ref_accept, out.accept) @[playground/src/exp8/DFA.scala 28:21]
    node _T_1 = asUInt(reset) @[playground/src/exp8/DFA.scala 28:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 28:9]
    when _T_2 : @[playground/src/exp8/DFA.scala 28:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 28:9]
      when _T_3 : @[playground/src/exp8/DFA.scala 28:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: in %b ref %b out %b\n    at DFA.scala:28 assert(ref_accept === out.accept, \"in %%%%b ref %%%%b out %%%%b\", in, ref_accept, out.accept)\n", in, ref_accept, out.accept) : printf @[playground/src/exp8/DFA.scala 28:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp8/DFA.scala 28:9]


  module DFATest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of DFA @[playground/src/exp8/DFA.scala 32:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    wire step : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 61:73]
    step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 61:73]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      stepWrap <= UInt<1>("h1") @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : UInt<6>[1] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<6> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 5, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0] <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    m.in <= allStepIn[UInt<1>("h0")] @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for DFA-1-char, may finish after 128 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: DFA-1-char\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module DFA_1 :
    input clock : Clock
    input reset : UInt<1>
    input in : UInt<6> @[playground/src/utils/Utils.scala 27:14]
    output out : { accept : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    reg finish_c_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire finish : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    finish <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when UInt<1>("h1") : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node finish_wrap_wrap = eq(finish_c_value, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _finish_wrap_value_T = add(finish_c_value, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _finish_wrap_value_T_1 = tail(_finish_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      finish_c_value <= _finish_wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      finish <= finish_wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    reg already_finish : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 12:31]
    already_finish <= finish @[playground/src/exp8/DFA.scala 12:31]
    node _real_finish_T = eq(already_finish, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 13:31]
    node real_finish = and(finish, _real_finish_T) @[playground/src/exp8/DFA.scala 13:28]
    node _n_cnt_T = eq(UInt<4>("he"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _n_cnt_T_1 = eq(UInt<6>("h2e"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _n_cnt_T_2 = or(_n_cnt_T, _n_cnt_T_1) @[playground/src/exp8/DFA.scala 15:83]
    reg n_cnt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire n_cnt_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    n_cnt_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _n_cnt_T_2 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node n_cnt_wrap_wrap = eq(n_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _n_cnt_wrap_value_T = add(n_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _n_cnt_wrap_value_T_1 = tail(_n_cnt_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      n_cnt <= _n_cnt_wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      n_cnt_wrap <= n_cnt_wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _other_cnt_T = eq(UInt<4>("he"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _other_cnt_T_1 = eq(UInt<6>("h2e"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _other_cnt_T_2 = or(_other_cnt_T, _other_cnt_T_1) @[playground/src/exp8/DFA.scala 15:83]
    node _other_cnt_T_3 = eq(_other_cnt_T_2, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 17:27]
    reg other_cnt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire other_cnt_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    other_cnt_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _other_cnt_T_3 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node other_cnt_wrap_wrap = eq(other_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _other_cnt_wrap_value_T = add(other_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _other_cnt_wrap_value_T_1 = tail(_other_cnt_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      other_cnt <= _other_cnt_wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      other_cnt_wrap <= other_cnt_wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _n_cnt_final_T = eq(UInt<4>("he"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _n_cnt_final_T_1 = eq(UInt<6>("h2e"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _n_cnt_final_T_2 = or(_n_cnt_final_T, _n_cnt_final_T_1) @[playground/src/exp8/DFA.scala 15:83]
    node _n_cnt_final_T_3 = add(n_cnt, _n_cnt_final_T_2) @[playground/src/exp8/DFA.scala 18:27]
    node n_cnt_final = tail(_n_cnt_final_T_3, 1) @[playground/src/exp8/DFA.scala 18:27]
    node _other_cnt_final_T = eq(UInt<4>("he"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _other_cnt_final_T_1 = eq(UInt<6>("h2e"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _other_cnt_final_T_2 = or(_other_cnt_final_T, _other_cnt_final_T_1) @[playground/src/exp8/DFA.scala 15:83]
    node _other_cnt_final_T_3 = eq(_other_cnt_final_T_2, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 19:37]
    node _other_cnt_final_T_4 = add(other_cnt, _other_cnt_final_T_3) @[playground/src/exp8/DFA.scala 19:35]
    node other_cnt_final = tail(_other_cnt_final_T_4, 1) @[playground/src/exp8/DFA.scala 19:35]
    node _out_accept_T = eq(n_cnt_final, UInt<1>("h1")) @[playground/src/exp8/DFA.scala 20:47]
    node _out_accept_T_1 = eq(other_cnt_final, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 20:76]
    node _out_accept_T_2 = and(_out_accept_T, _out_accept_T_1) @[playground/src/exp8/DFA.scala 20:56]
    node _out_accept_T_3 = mux(real_finish, _out_accept_T_2, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 20:20]
    out.accept <= _out_accept_T_3 @[playground/src/exp8/DFA.scala 20:14]
    node _buffer_next_T = shl(UInt<16>("h0"), 8) @[playground/src/exp8/DFA.scala 22:37]
    node _buffer_next_T_1 = cat(UInt<2>("h1"), in) @[playground/src/exp8/DFA.scala 22:48]
    node _buffer_next_T_2 = or(_buffer_next_T, _buffer_next_T_1) @[playground/src/exp8/DFA.scala 22:43]
    wire buffer_next : UInt<24> @[playground/src/utils/Utils.scala 62:20]
    reg buffer : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when UInt<1>("h1") : @[playground/src/utils/Utils.scala 63:22]
      buffer <= buffer_next @[playground/src/utils/Utils.scala 63:22]
    node _buffer_next_T_3 = shl(buffer, 8) @[playground/src/exp8/DFA.scala 22:37]
    node _buffer_next_T_4 = cat(UInt<2>("h1"), in) @[playground/src/exp8/DFA.scala 22:48]
    node _buffer_next_T_5 = or(_buffer_next_T_3, _buffer_next_T_4) @[playground/src/exp8/DFA.scala 22:43]
    buffer_next <= _buffer_next_T_5 @[playground/src/utils/Utils.scala 64:10]
    node allInput_hi = cat(buffer, UInt<2>("h1")) @[playground/src/exp8/DFA.scala 23:21]
    node _allInput_T = cat(allInput_hi, in) @[playground/src/exp8/DFA.scala 23:21]
    node allInput = bits(_allInput_T, 15, 0) @[playground/src/exp8/DFA.scala 23:47]
    wire _n_parity_WIRE : UInt<8>[2] @[playground/src/exp8/DFA.scala 25:43]
    wire _n_parity_WIRE_1 : UInt<16> @[playground/src/exp8/DFA.scala 25:43]
    _n_parity_WIRE_1 <= allInput @[playground/src/exp8/DFA.scala 25:43]
    node _n_parity_T = bits(_n_parity_WIRE_1, 7, 0) @[playground/src/exp8/DFA.scala 25:43]
    _n_parity_WIRE[0] <= _n_parity_T @[playground/src/exp8/DFA.scala 25:43]
    node _n_parity_T_1 = bits(_n_parity_WIRE_1, 15, 8) @[playground/src/exp8/DFA.scala 25:43]
    _n_parity_WIRE[1] <= _n_parity_T_1 @[playground/src/exp8/DFA.scala 25:43]
    node _n_parity_T_2 = eq(_n_parity_WIRE[0], UInt<7>("h4e")) @[playground/src/exp8/DFA.scala 24:30]
    node _n_parity_T_3 = eq(_n_parity_WIRE[0], UInt<7>("h6e")) @[playground/src/exp8/DFA.scala 24:48]
    node _n_parity_T_4 = or(_n_parity_T_2, _n_parity_T_3) @[playground/src/exp8/DFA.scala 24:42]
    node _n_parity_T_5 = eq(_n_parity_WIRE[1], UInt<7>("h4e")) @[playground/src/exp8/DFA.scala 24:30]
    node _n_parity_T_6 = eq(_n_parity_WIRE[1], UInt<7>("h6e")) @[playground/src/exp8/DFA.scala 24:48]
    node _n_parity_T_7 = or(_n_parity_T_5, _n_parity_T_6) @[playground/src/exp8/DFA.scala 24:42]
    node _n_parity_T_8 = cat(_n_parity_T_4, _n_parity_T_7) @[playground/src/exp8/DFA.scala 25:25]
    node n_parity = xorr(_n_parity_T_8) @[playground/src/exp8/DFA.scala 25:81]
    wire _other_parity_WIRE : UInt<8>[2] @[playground/src/exp8/DFA.scala 26:43]
    wire _other_parity_WIRE_1 : UInt<16> @[playground/src/exp8/DFA.scala 26:43]
    _other_parity_WIRE_1 <= allInput @[playground/src/exp8/DFA.scala 26:43]
    node _other_parity_T = bits(_other_parity_WIRE_1, 7, 0) @[playground/src/exp8/DFA.scala 26:43]
    _other_parity_WIRE[0] <= _other_parity_T @[playground/src/exp8/DFA.scala 26:43]
    node _other_parity_T_1 = bits(_other_parity_WIRE_1, 15, 8) @[playground/src/exp8/DFA.scala 26:43]
    _other_parity_WIRE[1] <= _other_parity_T_1 @[playground/src/exp8/DFA.scala 26:43]
    node _other_parity_T_2 = eq(_other_parity_WIRE[0], UInt<7>("h4e")) @[playground/src/exp8/DFA.scala 24:30]
    node _other_parity_T_3 = eq(_other_parity_WIRE[0], UInt<7>("h6e")) @[playground/src/exp8/DFA.scala 24:48]
    node _other_parity_T_4 = or(_other_parity_T_2, _other_parity_T_3) @[playground/src/exp8/DFA.scala 24:42]
    node _other_parity_T_5 = eq(_other_parity_T_4, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 26:67]
    node _other_parity_T_6 = eq(_other_parity_WIRE[1], UInt<7>("h4e")) @[playground/src/exp8/DFA.scala 24:30]
    node _other_parity_T_7 = eq(_other_parity_WIRE[1], UInt<7>("h6e")) @[playground/src/exp8/DFA.scala 24:48]
    node _other_parity_T_8 = or(_other_parity_T_6, _other_parity_T_7) @[playground/src/exp8/DFA.scala 24:42]
    node _other_parity_T_9 = eq(_other_parity_T_8, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 26:67]
    node _other_parity_T_10 = cat(_other_parity_T_5, _other_parity_T_9) @[playground/src/exp8/DFA.scala 26:25]
    node other_parity = xorr(_other_parity_T_10) @[playground/src/exp8/DFA.scala 26:81]
    node _ref_accept_T = eq(other_parity, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 27:49]
    node _ref_accept_T_1 = and(n_parity, _ref_accept_T) @[playground/src/exp8/DFA.scala 27:46]
    node ref_accept = mux(real_finish, _ref_accept_T_1, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 27:23]
    node _T = eq(ref_accept, out.accept) @[playground/src/exp8/DFA.scala 28:21]
    node _T_1 = asUInt(reset) @[playground/src/exp8/DFA.scala 28:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 28:9]
    when _T_2 : @[playground/src/exp8/DFA.scala 28:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 28:9]
      when _T_3 : @[playground/src/exp8/DFA.scala 28:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: in %b ref %b out %b\n    at DFA.scala:28 assert(ref_accept === out.accept, \"in %%%%b ref %%%%b out %%%%b\", in, ref_accept, out.accept)\n", in, ref_accept, out.accept) : printf @[playground/src/exp8/DFA.scala 28:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp8/DFA.scala 28:9]


  module DFATest_1 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of DFA_1 @[playground/src/exp8/DFA.scala 32:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<12>, clock with :
      reset => (reset, UInt<12>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<12>("hfff"), UInt<12>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : UInt<6>[2] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<12> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 5, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0] <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 11, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1] <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    m.in <= allStepIn[step] @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for DFA-2-char, may finish after 12288 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: DFA-2-char\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module DFA_2 :
    input clock : Clock
    input reset : UInt<1>
    input in : UInt<6> @[playground/src/utils/Utils.scala 27:14]
    output out : { accept : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    reg finish_c_value : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire finish : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    finish <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when UInt<1>("h1") : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node finish_wrap_wrap = eq(finish_c_value, UInt<2>("h2")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _finish_wrap_value_T = add(finish_c_value, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _finish_wrap_value_T_1 = tail(_finish_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      finish_c_value <= _finish_wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when finish_wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        finish_c_value <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      finish <= finish_wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    reg already_finish : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 12:31]
    already_finish <= finish @[playground/src/exp8/DFA.scala 12:31]
    node _real_finish_T = eq(already_finish, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 13:31]
    node real_finish = and(finish, _real_finish_T) @[playground/src/exp8/DFA.scala 13:28]
    node _n_cnt_T = eq(UInt<4>("he"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _n_cnt_T_1 = eq(UInt<6>("h2e"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _n_cnt_T_2 = or(_n_cnt_T, _n_cnt_T_1) @[playground/src/exp8/DFA.scala 15:83]
    reg n_cnt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire n_cnt_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    n_cnt_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _n_cnt_T_2 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node n_cnt_wrap_wrap = eq(n_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _n_cnt_wrap_value_T = add(n_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _n_cnt_wrap_value_T_1 = tail(_n_cnt_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      n_cnt <= _n_cnt_wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      n_cnt_wrap <= n_cnt_wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _other_cnt_T = eq(UInt<4>("he"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _other_cnt_T_1 = eq(UInt<6>("h2e"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _other_cnt_T_2 = or(_other_cnt_T, _other_cnt_T_1) @[playground/src/exp8/DFA.scala 15:83]
    node _other_cnt_T_3 = eq(_other_cnt_T_2, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 17:27]
    reg other_cnt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire other_cnt_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    other_cnt_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _other_cnt_T_3 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node other_cnt_wrap_wrap = eq(other_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _other_cnt_wrap_value_T = add(other_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _other_cnt_wrap_value_T_1 = tail(_other_cnt_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      other_cnt <= _other_cnt_wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      other_cnt_wrap <= other_cnt_wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _n_cnt_final_T = eq(UInt<4>("he"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _n_cnt_final_T_1 = eq(UInt<6>("h2e"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _n_cnt_final_T_2 = or(_n_cnt_final_T, _n_cnt_final_T_1) @[playground/src/exp8/DFA.scala 15:83]
    node _n_cnt_final_T_3 = add(n_cnt, _n_cnt_final_T_2) @[playground/src/exp8/DFA.scala 18:27]
    node n_cnt_final = tail(_n_cnt_final_T_3, 1) @[playground/src/exp8/DFA.scala 18:27]
    node _other_cnt_final_T = eq(UInt<4>("he"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _other_cnt_final_T_1 = eq(UInt<6>("h2e"), in) @[playground/src/exp8/DFA.scala 15:66]
    node _other_cnt_final_T_2 = or(_other_cnt_final_T, _other_cnt_final_T_1) @[playground/src/exp8/DFA.scala 15:83]
    node _other_cnt_final_T_3 = eq(_other_cnt_final_T_2, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 19:37]
    node _other_cnt_final_T_4 = add(other_cnt, _other_cnt_final_T_3) @[playground/src/exp8/DFA.scala 19:35]
    node other_cnt_final = tail(_other_cnt_final_T_4, 1) @[playground/src/exp8/DFA.scala 19:35]
    node _out_accept_T = eq(n_cnt_final, UInt<1>("h1")) @[playground/src/exp8/DFA.scala 20:47]
    node _out_accept_T_1 = eq(other_cnt_final, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 20:76]
    node _out_accept_T_2 = and(_out_accept_T, _out_accept_T_1) @[playground/src/exp8/DFA.scala 20:56]
    node _out_accept_T_3 = mux(real_finish, _out_accept_T_2, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 20:20]
    out.accept <= _out_accept_T_3 @[playground/src/exp8/DFA.scala 20:14]
    node _buffer_next_T = shl(UInt<24>("h0"), 8) @[playground/src/exp8/DFA.scala 22:37]
    node _buffer_next_T_1 = cat(UInt<2>("h1"), in) @[playground/src/exp8/DFA.scala 22:48]
    node _buffer_next_T_2 = or(_buffer_next_T, _buffer_next_T_1) @[playground/src/exp8/DFA.scala 22:43]
    wire buffer_next : UInt<32> @[playground/src/utils/Utils.scala 62:20]
    reg buffer : UInt<24>, clock with :
      reset => (reset, UInt<24>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when UInt<1>("h1") : @[playground/src/utils/Utils.scala 63:22]
      buffer <= buffer_next @[playground/src/utils/Utils.scala 63:22]
    node _buffer_next_T_3 = shl(buffer, 8) @[playground/src/exp8/DFA.scala 22:37]
    node _buffer_next_T_4 = cat(UInt<2>("h1"), in) @[playground/src/exp8/DFA.scala 22:48]
    node _buffer_next_T_5 = or(_buffer_next_T_3, _buffer_next_T_4) @[playground/src/exp8/DFA.scala 22:43]
    buffer_next <= _buffer_next_T_5 @[playground/src/utils/Utils.scala 64:10]
    node allInput_hi = cat(buffer, UInt<2>("h1")) @[playground/src/exp8/DFA.scala 23:21]
    node _allInput_T = cat(allInput_hi, in) @[playground/src/exp8/DFA.scala 23:21]
    node allInput = bits(_allInput_T, 23, 0) @[playground/src/exp8/DFA.scala 23:47]
    wire _n_parity_WIRE : UInt<8>[3] @[playground/src/exp8/DFA.scala 25:43]
    wire _n_parity_WIRE_1 : UInt<24> @[playground/src/exp8/DFA.scala 25:43]
    _n_parity_WIRE_1 <= allInput @[playground/src/exp8/DFA.scala 25:43]
    node _n_parity_T = bits(_n_parity_WIRE_1, 7, 0) @[playground/src/exp8/DFA.scala 25:43]
    _n_parity_WIRE[0] <= _n_parity_T @[playground/src/exp8/DFA.scala 25:43]
    node _n_parity_T_1 = bits(_n_parity_WIRE_1, 15, 8) @[playground/src/exp8/DFA.scala 25:43]
    _n_parity_WIRE[1] <= _n_parity_T_1 @[playground/src/exp8/DFA.scala 25:43]
    node _n_parity_T_2 = bits(_n_parity_WIRE_1, 23, 16) @[playground/src/exp8/DFA.scala 25:43]
    _n_parity_WIRE[2] <= _n_parity_T_2 @[playground/src/exp8/DFA.scala 25:43]
    node _n_parity_T_3 = eq(_n_parity_WIRE[0], UInt<7>("h4e")) @[playground/src/exp8/DFA.scala 24:30]
    node _n_parity_T_4 = eq(_n_parity_WIRE[0], UInt<7>("h6e")) @[playground/src/exp8/DFA.scala 24:48]
    node _n_parity_T_5 = or(_n_parity_T_3, _n_parity_T_4) @[playground/src/exp8/DFA.scala 24:42]
    node _n_parity_T_6 = eq(_n_parity_WIRE[1], UInt<7>("h4e")) @[playground/src/exp8/DFA.scala 24:30]
    node _n_parity_T_7 = eq(_n_parity_WIRE[1], UInt<7>("h6e")) @[playground/src/exp8/DFA.scala 24:48]
    node _n_parity_T_8 = or(_n_parity_T_6, _n_parity_T_7) @[playground/src/exp8/DFA.scala 24:42]
    node _n_parity_T_9 = eq(_n_parity_WIRE[2], UInt<7>("h4e")) @[playground/src/exp8/DFA.scala 24:30]
    node _n_parity_T_10 = eq(_n_parity_WIRE[2], UInt<7>("h6e")) @[playground/src/exp8/DFA.scala 24:48]
    node _n_parity_T_11 = or(_n_parity_T_9, _n_parity_T_10) @[playground/src/exp8/DFA.scala 24:42]
    node n_parity_hi = cat(_n_parity_T_5, _n_parity_T_8) @[playground/src/exp8/DFA.scala 25:25]
    node _n_parity_T_12 = cat(n_parity_hi, _n_parity_T_11) @[playground/src/exp8/DFA.scala 25:25]
    node n_parity = xorr(_n_parity_T_12) @[playground/src/exp8/DFA.scala 25:81]
    wire _other_parity_WIRE : UInt<8>[3] @[playground/src/exp8/DFA.scala 26:43]
    wire _other_parity_WIRE_1 : UInt<24> @[playground/src/exp8/DFA.scala 26:43]
    _other_parity_WIRE_1 <= allInput @[playground/src/exp8/DFA.scala 26:43]
    node _other_parity_T = bits(_other_parity_WIRE_1, 7, 0) @[playground/src/exp8/DFA.scala 26:43]
    _other_parity_WIRE[0] <= _other_parity_T @[playground/src/exp8/DFA.scala 26:43]
    node _other_parity_T_1 = bits(_other_parity_WIRE_1, 15, 8) @[playground/src/exp8/DFA.scala 26:43]
    _other_parity_WIRE[1] <= _other_parity_T_1 @[playground/src/exp8/DFA.scala 26:43]
    node _other_parity_T_2 = bits(_other_parity_WIRE_1, 23, 16) @[playground/src/exp8/DFA.scala 26:43]
    _other_parity_WIRE[2] <= _other_parity_T_2 @[playground/src/exp8/DFA.scala 26:43]
    node _other_parity_T_3 = eq(_other_parity_WIRE[0], UInt<7>("h4e")) @[playground/src/exp8/DFA.scala 24:30]
    node _other_parity_T_4 = eq(_other_parity_WIRE[0], UInt<7>("h6e")) @[playground/src/exp8/DFA.scala 24:48]
    node _other_parity_T_5 = or(_other_parity_T_3, _other_parity_T_4) @[playground/src/exp8/DFA.scala 24:42]
    node _other_parity_T_6 = eq(_other_parity_T_5, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 26:67]
    node _other_parity_T_7 = eq(_other_parity_WIRE[1], UInt<7>("h4e")) @[playground/src/exp8/DFA.scala 24:30]
    node _other_parity_T_8 = eq(_other_parity_WIRE[1], UInt<7>("h6e")) @[playground/src/exp8/DFA.scala 24:48]
    node _other_parity_T_9 = or(_other_parity_T_7, _other_parity_T_8) @[playground/src/exp8/DFA.scala 24:42]
    node _other_parity_T_10 = eq(_other_parity_T_9, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 26:67]
    node _other_parity_T_11 = eq(_other_parity_WIRE[2], UInt<7>("h4e")) @[playground/src/exp8/DFA.scala 24:30]
    node _other_parity_T_12 = eq(_other_parity_WIRE[2], UInt<7>("h6e")) @[playground/src/exp8/DFA.scala 24:48]
    node _other_parity_T_13 = or(_other_parity_T_11, _other_parity_T_12) @[playground/src/exp8/DFA.scala 24:42]
    node _other_parity_T_14 = eq(_other_parity_T_13, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 26:67]
    node other_parity_hi = cat(_other_parity_T_6, _other_parity_T_10) @[playground/src/exp8/DFA.scala 26:25]
    node _other_parity_T_15 = cat(other_parity_hi, _other_parity_T_14) @[playground/src/exp8/DFA.scala 26:25]
    node other_parity = xorr(_other_parity_T_15) @[playground/src/exp8/DFA.scala 26:81]
    node _ref_accept_T = eq(other_parity, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 27:49]
    node _ref_accept_T_1 = and(n_parity, _ref_accept_T) @[playground/src/exp8/DFA.scala 27:46]
    node ref_accept = mux(real_finish, _ref_accept_T_1, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 27:23]
    node _T = eq(ref_accept, out.accept) @[playground/src/exp8/DFA.scala 28:21]
    node _T_1 = asUInt(reset) @[playground/src/exp8/DFA.scala 28:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 28:9]
    when _T_2 : @[playground/src/exp8/DFA.scala 28:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp8/DFA.scala 28:9]
      when _T_3 : @[playground/src/exp8/DFA.scala 28:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: in %b ref %b out %b\n    at DFA.scala:28 assert(ref_accept === out.accept, \"in %%%%b ref %%%%b out %%%%b\", in, ref_accept, out.accept)\n", in, ref_accept, out.accept) : printf @[playground/src/exp8/DFA.scala 28:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp8/DFA.scala 28:9]


  module DFATest_2 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of DFA_2 @[playground/src/exp8/DFA.scala 32:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<2>("h2")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<18>, clock with :
      reset => (reset, UInt<18>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<18>("h3ffff"), UInt<18>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : UInt<6>[3] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<18> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 5, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0] <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 11, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1] <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 17, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2] <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    m.in <= allStepIn[step] @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for DFA-3-char, may finish after 1048576 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: DFA-3-char\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module Exp8AllTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst vga of VGACtrlTest @[playground/src/exp8/Test.scala 6:19]
    vga.clock <= clock
    vga.reset <= reset
    inst dfa_0 of DFATest @[playground/src/exp8/Test.scala 7:37]
    dfa_0.clock <= clock
    dfa_0.reset <= reset
    inst dfa_1 of DFATest_1 @[playground/src/exp8/Test.scala 7:37]
    dfa_1.clock <= clock
    dfa_1.reset <= reset
    inst dfa_2 of DFATest_2 @[playground/src/exp8/Test.scala 7:37]
    dfa_2.clock <= clock
    dfa_2.reset <= reset
    node _finish_T = and(dfa_0.finish, dfa_1.finish) @[playground/src/exp8/Test.scala 8:48]
    node _finish_T_1 = and(_finish_T, dfa_2.finish) @[playground/src/exp8/Test.scala 8:48]
    node _finish_T_2 = and(_finish_T_1, vga.finish) @[playground/src/exp8/Test.scala 8:48]
    finish <= _finish_T_2 @[playground/src/exp8/Test.scala 8:10]
