FIRRTL version 1.2.0
circuit Exp7AllTest :
  module Queue :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, count : UInt<2>} @[src/main/scala/chisel3/util/Decoupled.scala 273:14]

    mem ram : @[src/main/scala/chisel3/util/Decoupled.scala 274:95]
      data-type => UInt<8>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    ram.io_deq_bits_MPORT.addr is invalid @[src/main/scala/chisel3/util/Decoupled.scala 274:95]
    ram.io_deq_bits_MPORT.clk is invalid @[src/main/scala/chisel3/util/Decoupled.scala 274:95]
    ram.io_deq_bits_MPORT.en <= UInt<1>("h0") @[src/main/scala/chisel3/util/Decoupled.scala 274:95]
    ram.MPORT.addr is invalid @[src/main/scala/chisel3/util/Decoupled.scala 274:95]
    ram.MPORT.clk is invalid @[src/main/scala/chisel3/util/Decoupled.scala 274:95]
    ram.MPORT.en <= UInt<1>("h0") @[src/main/scala/chisel3/util/Decoupled.scala 274:95]
    ram.MPORT.data is invalid @[src/main/scala/chisel3/util/Decoupled.scala 274:95]
    ram.MPORT.mask is invalid @[src/main/scala/chisel3/util/Decoupled.scala 274:95]
    reg enq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    reg deq_ptr_value : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Decoupled.scala 277:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[src/main/scala/chisel3/util/Decoupled.scala 278:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[src/main/scala/chisel3/util/Decoupled.scala 279:28]
    node empty = and(ptr_match, _empty_T) @[src/main/scala/chisel3/util/Decoupled.scala 279:25]
    node full = and(ptr_match, maybe_full) @[src/main/scala/chisel3/util/Decoupled.scala 280:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[src/main/scala/chisel3/util/Decoupled.scala 52:35]
    wire do_enq : UInt<1> @[src/main/scala/chisel3/util/Decoupled.scala 281:27]
    do_enq <= _do_enq_T @[src/main/scala/chisel3/util/Decoupled.scala 281:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[src/main/scala/chisel3/util/Decoupled.scala 52:35]
    wire do_deq : UInt<1> @[src/main/scala/chisel3/util/Decoupled.scala 282:27]
    do_deq <= _do_deq_T @[src/main/scala/chisel3/util/Decoupled.scala 282:27]
    when do_enq : @[src/main/scala/chisel3/util/Decoupled.scala 287:16]
      ram.MPORT.addr <= enq_ptr_value @[src/main/scala/chisel3/util/Decoupled.scala 288:8]
      ram.MPORT.clk <= clock @[src/main/scala/chisel3/util/Decoupled.scala 288:8]
      ram.MPORT.en <= UInt<1>("h1") @[src/main/scala/chisel3/util/Decoupled.scala 288:8]
      ram.MPORT.mask <= UInt<1>("h0") @[src/main/scala/chisel3/util/Decoupled.scala 288:8]
      ram.MPORT.data <= io.enq.bits @[src/main/scala/chisel3/util/Decoupled.scala 288:24]
      ram.MPORT.mask <= UInt<1>("h1") @[src/main/scala/chisel3/util/Decoupled.scala 288:24]
      node wrap = eq(enq_ptr_value, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
    when do_deq : @[src/main/scala/chisel3/util/Decoupled.scala 291:16]
      node wrap_1 = eq(deq_ptr_value, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[src/main/scala/chisel3/util/Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[src/main/scala/chisel3/util/Decoupled.scala 294:15]
    when _T : @[src/main/scala/chisel3/util/Decoupled.scala 294:27]
      maybe_full <= do_enq @[src/main/scala/chisel3/util/Decoupled.scala 295:16]
    when UInt<1>("h0") : @[src/main/scala/chisel3/util/Decoupled.scala 297:15]
      enq_ptr_value <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[src/main/scala/chisel3/util/Decoupled.scala 300:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[src/main/scala/chisel3/util/Decoupled.scala 303:19]
    io.deq.valid <= _io_deq_valid_T @[src/main/scala/chisel3/util/Decoupled.scala 303:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[src/main/scala/chisel3/util/Decoupled.scala 304:19]
    io.enq.ready <= _io_enq_ready_T @[src/main/scala/chisel3/util/Decoupled.scala 304:16]
    ram.io_deq_bits_MPORT.addr <= deq_ptr_value @[src/main/scala/chisel3/util/Decoupled.scala 311:23]
    ram.io_deq_bits_MPORT.clk <= clock @[src/main/scala/chisel3/util/Decoupled.scala 311:23]
    ram.io_deq_bits_MPORT.en <= UInt<1>("h1") @[src/main/scala/chisel3/util/Decoupled.scala 311:23]
    io.deq.bits <= ram.io_deq_bits_MPORT.data @[src/main/scala/chisel3/util/Decoupled.scala 311:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[src/main/scala/chisel3/util/Decoupled.scala 327:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[src/main/scala/chisel3/util/Decoupled.scala 327:32]
    node _io_count_T = and(maybe_full, ptr_match) @[src/main/scala/chisel3/util/Decoupled.scala 330:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<2>("h2"), UInt<1>("h0")) @[src/main/scala/chisel3/util/Decoupled.scala 330:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[src/main/scala/chisel3/util/Decoupled.scala 330:62]
    io.count <= _io_count_T_2 @[src/main/scala/chisel3/util/Decoupled.scala 330:14]

  module PS2KeyBoard :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip ps2_data : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { data : UInt<8>, ready : UInt<1>, full : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    wire _buffer_WIRE : UInt<1>[10] @[playground/src/exp7/KeyBoard.scala 17:31]
    _buffer_WIRE[0] <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 17:31]
    _buffer_WIRE[1] <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 17:31]
    _buffer_WIRE[2] <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 17:31]
    _buffer_WIRE[3] <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 17:31]
    _buffer_WIRE[4] <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 17:31]
    _buffer_WIRE[5] <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 17:31]
    _buffer_WIRE[6] <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 17:31]
    _buffer_WIRE[7] <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 17:31]
    _buffer_WIRE[8] <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 17:31]
    _buffer_WIRE[9] <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 17:31]
    reg buffer : UInt<1>[10], clock with :
      reset => (reset, _buffer_WIRE) @[playground/src/exp7/KeyBoard.scala 17:23]
    mem fifo : @[playground/src/exp7/KeyBoard.scala 18:17]
      data-type => UInt<8>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => out_data_MPORT
      writer => MPORT
      read-under-write => undefined
    fifo.out_data_MPORT.addr is invalid @[playground/src/exp7/KeyBoard.scala 18:17]
    fifo.out_data_MPORT.clk is invalid @[playground/src/exp7/KeyBoard.scala 18:17]
    fifo.out_data_MPORT.en <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 18:17]
    fifo.MPORT.addr is invalid @[playground/src/exp7/KeyBoard.scala 18:17]
    fifo.MPORT.clk is invalid @[playground/src/exp7/KeyBoard.scala 18:17]
    fifo.MPORT.en <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 18:17]
    fifo.MPORT.data is invalid @[playground/src/exp7/KeyBoard.scala 18:17]
    fifo.MPORT.mask is invalid @[playground/src/exp7/KeyBoard.scala 18:17]
    reg w_ptr : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 19:22]
    reg r_ptr : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 20:22]
    reg fifo_count : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[playground/src/exp7/KeyBoard.scala 21:27]
    reg count : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[playground/src/exp7/KeyBoard.scala 22:22]
    node _writing_T = eq(count, UInt<4>("ha")) @[playground/src/exp7/KeyBoard.scala 25:24]
    node _writing_T_1 = eq(buffer[0], UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 25:38]
    node _writing_T_2 = and(_writing_T_1, in.ps2_data) @[playground/src/exp7/KeyBoard.scala 25:50]
    node writing_lo_lo = cat(buffer[1], buffer[0]) @[playground/src/exp7/KeyBoard.scala 27:23]
    node writing_lo_hi_hi = cat(buffer[4], buffer[3]) @[playground/src/exp7/KeyBoard.scala 27:23]
    node writing_lo_hi = cat(writing_lo_hi_hi, buffer[2]) @[playground/src/exp7/KeyBoard.scala 27:23]
    node writing_lo = cat(writing_lo_hi, writing_lo_lo) @[playground/src/exp7/KeyBoard.scala 27:23]
    node writing_hi_lo = cat(buffer[6], buffer[5]) @[playground/src/exp7/KeyBoard.scala 27:23]
    node writing_hi_hi_hi = cat(buffer[9], buffer[8]) @[playground/src/exp7/KeyBoard.scala 27:23]
    node writing_hi_hi = cat(writing_hi_hi_hi, buffer[7]) @[playground/src/exp7/KeyBoard.scala 27:23]
    node writing_hi = cat(writing_hi_hi, writing_hi_lo) @[playground/src/exp7/KeyBoard.scala 27:23]
    node _writing_T_3 = cat(writing_hi, writing_lo) @[playground/src/exp7/KeyBoard.scala 27:23]
    node _writing_T_4 = bits(_writing_T_3, 9, 1) @[playground/src/exp7/KeyBoard.scala 27:29]
    node _writing_T_5 = xorr(_writing_T_4) @[playground/src/exp7/KeyBoard.scala 27:35]
    node _writing_T_6 = and(_writing_T_2, _writing_T_5) @[playground/src/exp7/KeyBoard.scala 26:28]
    node writing = and(_writing_T, _writing_T_6) @[playground/src/exp7/KeyBoard.scala 25:34]
    node read = and(out.ready, in.ps2_data) @[playground/src/exp7/KeyBoard.scala 28:25]
    node _write_T = eq(out.full, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 29:26]
    node write = and(writing, _write_T) @[playground/src/exp7/KeyBoard.scala 29:23]
    when read : @[playground/src/exp7/KeyBoard.scala 31:15]
      node _r_ptr_T = add(r_ptr, UInt<1>("h1")) @[playground/src/exp7/KeyBoard.scala 31:32]
      node _r_ptr_T_1 = tail(_r_ptr_T, 1) @[playground/src/exp7/KeyBoard.scala 31:32]
      r_ptr <= _r_ptr_T_1 @[playground/src/exp7/KeyBoard.scala 31:23]
    node _T = eq(count, UInt<4>("ha")) @[playground/src/exp7/KeyBoard.scala 32:15]
    when _T : @[playground/src/exp7/KeyBoard.scala 32:25]
      when write : @[playground/src/exp7/KeyBoard.scala 33:18]
        fifo.MPORT.addr <= w_ptr @[playground/src/exp7/KeyBoard.scala 34:11]
        fifo.MPORT.clk <= clock @[playground/src/exp7/KeyBoard.scala 34:11]
        fifo.MPORT.en <= UInt<1>("h1") @[playground/src/exp7/KeyBoard.scala 34:11]
        fifo.MPORT.mask <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 34:11]
        node lo_lo = cat(buffer[1], buffer[0]) @[playground/src/exp7/KeyBoard.scala 34:29]
        node lo_hi_hi = cat(buffer[4], buffer[3]) @[playground/src/exp7/KeyBoard.scala 34:29]
        node lo_hi = cat(lo_hi_hi, buffer[2]) @[playground/src/exp7/KeyBoard.scala 34:29]
        node lo = cat(lo_hi, lo_lo) @[playground/src/exp7/KeyBoard.scala 34:29]
        node hi_lo = cat(buffer[6], buffer[5]) @[playground/src/exp7/KeyBoard.scala 34:29]
        node hi_hi_hi = cat(buffer[9], buffer[8]) @[playground/src/exp7/KeyBoard.scala 34:29]
        node hi_hi = cat(hi_hi_hi, buffer[7]) @[playground/src/exp7/KeyBoard.scala 34:29]
        node hi = cat(hi_hi, hi_lo) @[playground/src/exp7/KeyBoard.scala 34:29]
        node _T_1 = cat(hi, lo) @[playground/src/exp7/KeyBoard.scala 34:29]
        node _T_2 = bits(_T_1, 8, 1) @[playground/src/exp7/KeyBoard.scala 34:35]
        fifo.MPORT.data <= _T_2 @[playground/src/exp7/KeyBoard.scala 34:19]
        fifo.MPORT.mask <= UInt<1>("h1") @[playground/src/exp7/KeyBoard.scala 34:19]
        node _w_ptr_T = add(w_ptr, UInt<1>("h1")) @[playground/src/exp7/KeyBoard.scala 35:22]
        node _w_ptr_T_1 = tail(_w_ptr_T, 1) @[playground/src/exp7/KeyBoard.scala 35:22]
        w_ptr <= _w_ptr_T_1 @[playground/src/exp7/KeyBoard.scala 35:13]
      count <= UInt<1>("h0") @[playground/src/exp7/KeyBoard.scala 37:11]
    else :
      buffer[count] <= in.ps2_data @[playground/src/exp7/KeyBoard.scala 39:19]
      node _count_T = add(count, UInt<1>("h1")) @[playground/src/exp7/KeyBoard.scala 40:20]
      node _count_T_1 = tail(_count_T, 1) @[playground/src/exp7/KeyBoard.scala 40:20]
      count <= _count_T_1 @[playground/src/exp7/KeyBoard.scala 40:11]
    node _fifo_count_T = and(read, write) @[playground/src/exp7/KeyBoard.scala 43:26]
    node _fifo_count_T_1 = sub(fifo_count, UInt<1>("h1")) @[playground/src/exp7/KeyBoard.scala 44:43]
    node _fifo_count_T_2 = tail(_fifo_count_T_1, 1) @[playground/src/exp7/KeyBoard.scala 44:43]
    node _fifo_count_T_3 = add(fifo_count, UInt<1>("h1")) @[playground/src/exp7/KeyBoard.scala 45:45]
    node _fifo_count_T_4 = tail(_fifo_count_T_3, 1) @[playground/src/exp7/KeyBoard.scala 45:45]
    node _fifo_count_T_5 = mux(write, _fifo_count_T_4, fifo_count) @[playground/src/exp7/KeyBoard.scala 45:26]
    node _fifo_count_T_6 = mux(read, _fifo_count_T_2, _fifo_count_T_5) @[playground/src/exp7/KeyBoard.scala 44:24]
    node _fifo_count_T_7 = mux(_fifo_count_T, fifo_count, _fifo_count_T_6) @[playground/src/exp7/KeyBoard.scala 43:20]
    fifo_count <= _fifo_count_T_7 @[playground/src/exp7/KeyBoard.scala 43:14]
    fifo.out_data_MPORT.addr <= r_ptr @[playground/src/exp7/KeyBoard.scala 47:20]
    fifo.out_data_MPORT.clk <= clock @[playground/src/exp7/KeyBoard.scala 47:20]
    fifo.out_data_MPORT.en <= UInt<1>("h1") @[playground/src/exp7/KeyBoard.scala 47:20]
    out.data <= fifo.out_data_MPORT.data @[playground/src/exp7/KeyBoard.scala 47:13]
    node _out_ready_T = neq(fifo_count, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 48:28]
    out.ready <= _out_ready_T @[playground/src/exp7/KeyBoard.scala 48:13]
    node _out_full_T = eq(fifo_count, UInt<2>("h2")) @[playground/src/exp7/KeyBoard.scala 49:28]
    out.full <= _out_full_T @[playground/src/exp7/KeyBoard.scala 49:13]
    reg ref_buffer : UInt<10>, clock with :
      reset => (reset, UInt<10>("h0")) @[playground/src/exp7/KeyBoard.scala 52:27]
    node _ref_buffer_T = bits(ref_buffer, 9, 1) @[playground/src/exp7/KeyBoard.scala 53:44]
    node _ref_buffer_T_1 = cat(in.ps2_data, _ref_buffer_T) @[playground/src/exp7/KeyBoard.scala 53:20]
    ref_buffer <= _ref_buffer_T_1 @[playground/src/exp7/KeyBoard.scala 53:14]
    reg c_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when UInt<1>("h1") : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(c_value, UInt<4>("ha")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(c_value, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      c_value <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        c_value <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    inst ref_fifo of Queue @[playground/src/exp7/KeyBoard.scala 55:24]
    ref_fifo.clock <= clock
    ref_fifo.reset <= reset
    node _ref_fifo_io_enq_valid_T = bits(ref_buffer, 0, 0) @[playground/src/exp7/KeyBoard.scala 56:55]
    node _ref_fifo_io_enq_valid_T_1 = eq(_ref_fifo_io_enq_valid_T, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 56:44]
    node _ref_fifo_io_enq_valid_T_2 = and(wrap, _ref_fifo_io_enq_valid_T_1) @[playground/src/exp7/KeyBoard.scala 56:41]
    node _ref_fifo_io_enq_valid_T_3 = and(_ref_fifo_io_enq_valid_T_2, in.ps2_data) @[playground/src/exp7/KeyBoard.scala 56:59]
    node _ref_fifo_io_enq_valid_T_4 = bits(ref_buffer, 9, 1) @[playground/src/exp7/KeyBoard.scala 56:87]
    node _ref_fifo_io_enq_valid_T_5 = xorr(_ref_fifo_io_enq_valid_T_4) @[playground/src/exp7/KeyBoard.scala 56:93]
    node _ref_fifo_io_enq_valid_T_6 = and(_ref_fifo_io_enq_valid_T_3, _ref_fifo_io_enq_valid_T_5) @[playground/src/exp7/KeyBoard.scala 56:74]
    ref_fifo.io.enq.valid <= _ref_fifo_io_enq_valid_T_6 @[playground/src/exp7/KeyBoard.scala 56:25]
    node _ref_fifo_io_enq_bits_T = bits(ref_buffer, 8, 1) @[playground/src/exp7/KeyBoard.scala 57:37]
    ref_fifo.io.enq.bits <= _ref_fifo_io_enq_bits_T @[playground/src/exp7/KeyBoard.scala 57:24]
    ref_fifo.io.deq.ready <= in.ps2_data @[playground/src/exp7/KeyBoard.scala 58:25]
    node ref_full = eq(ref_fifo.io.enq.ready, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 61:19]
    node _T_3 = eq(out.ready, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 62:10]
    node _T_4 = eq(ref_fifo.io.deq.bits, out.data) @[playground/src/exp7/KeyBoard.scala 62:34]
    node _T_5 = or(_T_3, _T_4) @[playground/src/exp7/KeyBoard.scala 62:21]
    node _T_6 = asUInt(reset) @[playground/src/exp7/KeyBoard.scala 62:9]
    node _T_7 = eq(_T_6, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 62:9]
    when _T_7 : @[playground/src/exp7/KeyBoard.scala 62:9]
      node _T_8 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 62:9]
      when _T_8 : @[playground/src/exp7/KeyBoard.scala 62:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at KeyBoard.scala:62 assert(!out.ready || (ref_data === out.data))\n") : printf @[playground/src/exp7/KeyBoard.scala 62:9]
      assert(clock, _T_5, UInt<1>("h1"), "") : assert @[playground/src/exp7/KeyBoard.scala 62:9]
    node _T_9 = eq(ref_fifo.io.deq.valid, out.ready) @[playground/src/exp7/KeyBoard.scala 63:20]
    node _T_10 = asUInt(reset) @[playground/src/exp7/KeyBoard.scala 63:9]
    node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 63:9]
    when _T_11 : @[playground/src/exp7/KeyBoard.scala 63:9]
      node _T_12 = eq(_T_9, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 63:9]
      when _T_12 : @[playground/src/exp7/KeyBoard.scala 63:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at KeyBoard.scala:63 assert(ref_ready === out.ready)\n") : printf_1 @[playground/src/exp7/KeyBoard.scala 63:9]
      assert(clock, _T_9, UInt<1>("h1"), "") : assert_1 @[playground/src/exp7/KeyBoard.scala 63:9]
    node _T_13 = eq(ref_full, out.full) @[playground/src/exp7/KeyBoard.scala 64:19]
    node _T_14 = asUInt(reset) @[playground/src/exp7/KeyBoard.scala 64:9]
    node _T_15 = eq(_T_14, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 64:9]
    when _T_15 : @[playground/src/exp7/KeyBoard.scala 64:9]
      node _T_16 = eq(_T_13, UInt<1>("h0")) @[playground/src/exp7/KeyBoard.scala 64:9]
      when _T_16 : @[playground/src/exp7/KeyBoard.scala 64:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at KeyBoard.scala:64 assert(ref_full === out.full)\n") : printf_2 @[playground/src/exp7/KeyBoard.scala 64:9]
      assert(clock, _T_13, UInt<1>("h1"), "") : assert_2 @[playground/src/exp7/KeyBoard.scala 64:9]


  module PS2KeyBoardTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of PS2KeyBoard @[playground/src/exp7/KeyBoard.scala 68:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<5>("h17")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<24>, clock with :
      reset => (reset, UInt<24>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<24>("hffffff"), UInt<24>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip ps2_data : UInt<1>}[24] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<24> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].ps2_data <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].ps2_data <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].ps2_data <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].ps2_data <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].ps2_data <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].ps2_data <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].ps2_data <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].ps2_data <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].ps2_data <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[9].ps2_data <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[10].ps2_data <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[11].ps2_data <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_12 = bits(_allStepIn_WIRE, 12, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[12].ps2_data <= _allStepIn_T_12 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_13 = bits(_allStepIn_WIRE, 13, 13) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[13].ps2_data <= _allStepIn_T_13 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_14 = bits(_allStepIn_WIRE, 14, 14) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[14].ps2_data <= _allStepIn_T_14 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_15 = bits(_allStepIn_WIRE, 15, 15) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[15].ps2_data <= _allStepIn_T_15 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_16 = bits(_allStepIn_WIRE, 16, 16) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[16].ps2_data <= _allStepIn_T_16 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_17 = bits(_allStepIn_WIRE, 17, 17) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[17].ps2_data <= _allStepIn_T_17 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_18 = bits(_allStepIn_WIRE, 18, 18) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[18].ps2_data <= _allStepIn_T_18 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_19 = bits(_allStepIn_WIRE, 19, 19) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[19].ps2_data <= _allStepIn_T_19 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_20 = bits(_allStepIn_WIRE, 20, 20) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[20].ps2_data <= _allStepIn_T_20 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_21 = bits(_allStepIn_WIRE, 21, 21) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[21].ps2_data <= _allStepIn_T_21 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_22 = bits(_allStepIn_WIRE, 22, 22) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[22].ps2_data <= _allStepIn_T_22 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_23 = bits(_allStepIn_WIRE, 23, 23) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[23].ps2_data <= _allStepIn_T_23 @[playground/src/utils/Utils.scala 39:35]
    m.in.ps2_data <= allStepIn[step].ps2_data @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for PS2KeyBoard-fifo-2-entry, may finish after 419430400 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: PS2KeyBoard-fifo-2-entry\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module Exp7AllTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst PS2KeyBoardTest of PS2KeyBoardTest @[playground/src/exp7/KeyBoard.scala 74:19]
    PS2KeyBoardTest.clock <= clock
    PS2KeyBoardTest.reset <= reset
    finish <= PS2KeyBoardTest.finish @[playground/src/exp7/KeyBoard.scala 74:10]
