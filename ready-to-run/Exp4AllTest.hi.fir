FIRRTL version 1.2.0
circuit Exp4AllTest :
  module MyCounter :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<1> @[playground/src/utils/Utils.scala 28:15]

    node _out_next_T = add(UInt<1>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 10:30]
    node _out_next_T_1 = tail(_out_next_T, 1) @[playground/src/exp4/Counter.scala 10:30]
    wire out_next : UInt<1> @[playground/src/utils/Utils.scala 62:20]
    reg out_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_r <= out_next @[playground/src/utils/Utils.scala 63:22]
    node _out_next_T_2 = add(out_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 10:30]
    node _out_next_T_3 = tail(_out_next_T_2, 1) @[playground/src/exp4/Counter.scala 10:30]
    out_next <= _out_next_T_3 @[playground/src/utils/Utils.scala 64:10]
    out <= out_r @[playground/src/exp4/Counter.scala 10:7]
    reg ref : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node ref_wrap_wrap = eq(ref, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _ref_wrap_value_T = add(ref, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _ref_wrap_value_T_1 = tail(_ref_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref <= _ref_wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      ref_wrap <= ref_wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref, out) @[playground/src/exp4/Counter.scala 13:14]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 13:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 13:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 13:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 13:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 13:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:13 assert(ref === out)\n") : printf @[playground/src/exp4/Counter.scala 13:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 13:9]


  module MyCounterTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter @[playground/src/exp4/Counter.scala 17:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<2>("h2")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<3>("h7"), UInt<3>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[3] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<3> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-1bit, may finish after 32 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-1bit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter_1 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<2> @[playground/src/utils/Utils.scala 28:15]

    node _out_next_T = add(UInt<2>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 10:30]
    node _out_next_T_1 = tail(_out_next_T, 1) @[playground/src/exp4/Counter.scala 10:30]
    wire out_next : UInt<2> @[playground/src/utils/Utils.scala 62:20]
    reg out_r : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_r <= out_next @[playground/src/utils/Utils.scala 63:22]
    node _out_next_T_2 = add(out_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 10:30]
    node _out_next_T_3 = tail(_out_next_T_2, 1) @[playground/src/exp4/Counter.scala 10:30]
    out_next <= _out_next_T_3 @[playground/src/utils/Utils.scala 64:10]
    out <= out_r @[playground/src/exp4/Counter.scala 10:7]
    reg ref : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node ref_wrap_wrap = eq(ref, UInt<2>("h3")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _ref_wrap_value_T = add(ref, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _ref_wrap_value_T_1 = tail(_ref_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref <= _ref_wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      ref_wrap <= ref_wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref, out) @[playground/src/exp4/Counter.scala 13:14]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 13:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 13:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 13:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 13:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 13:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:13 assert(ref === out)\n") : printf @[playground/src/exp4/Counter.scala 13:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 13:9]


  module MyCounterTest_1 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter_1 @[playground/src/exp4/Counter.scala 17:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<3>("h4")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[5] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<5> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-2bit, may finish after 192 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-2bit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter_2 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<3> @[playground/src/utils/Utils.scala 28:15]

    node _out_next_T = add(UInt<3>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 10:30]
    node _out_next_T_1 = tail(_out_next_T, 1) @[playground/src/exp4/Counter.scala 10:30]
    wire out_next : UInt<3> @[playground/src/utils/Utils.scala 62:20]
    reg out_r : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_r <= out_next @[playground/src/utils/Utils.scala 63:22]
    node _out_next_T_2 = add(out_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 10:30]
    node _out_next_T_3 = tail(_out_next_T_2, 1) @[playground/src/exp4/Counter.scala 10:30]
    out_next <= _out_next_T_3 @[playground/src/utils/Utils.scala 64:10]
    out <= out_r @[playground/src/exp4/Counter.scala 10:7]
    reg ref : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node ref_wrap_wrap = eq(ref, UInt<3>("h7")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _ref_wrap_value_T = add(ref, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _ref_wrap_value_T_1 = tail(_ref_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref <= _ref_wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      ref_wrap <= ref_wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref, out) @[playground/src/exp4/Counter.scala 13:14]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 13:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 13:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 13:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 13:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 13:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:13 assert(ref === out)\n") : printf @[playground/src/exp4/Counter.scala 13:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 13:9]


  module MyCounterTest_2 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter_2 @[playground/src/exp4/Counter.scala 17:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<4>("h8")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<9>("h1ff"), UInt<9>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[9] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<9> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].en <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-3bit, may finish after 5120 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-3bit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter_3 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<4> @[playground/src/utils/Utils.scala 28:15]

    node _out_next_T = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 10:30]
    node _out_next_T_1 = tail(_out_next_T, 1) @[playground/src/exp4/Counter.scala 10:30]
    wire out_next : UInt<4> @[playground/src/utils/Utils.scala 62:20]
    reg out_r : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_r <= out_next @[playground/src/utils/Utils.scala 63:22]
    node _out_next_T_2 = add(out_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 10:30]
    node _out_next_T_3 = tail(_out_next_T_2, 1) @[playground/src/exp4/Counter.scala 10:30]
    out_next <= _out_next_T_3 @[playground/src/utils/Utils.scala 64:10]
    out <= out_r @[playground/src/exp4/Counter.scala 10:7]
    reg ref : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node ref_wrap_wrap = eq(ref, UInt<4>("hf")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _ref_wrap_value_T = add(ref, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _ref_wrap_value_T_1 = tail(_ref_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref <= _ref_wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      ref_wrap <= ref_wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref, out) @[playground/src/exp4/Counter.scala 13:14]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 13:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 13:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 13:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 13:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 13:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:13 assert(ref === out)\n") : printf @[playground/src/exp4/Counter.scala 13:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 13:9]


  module MyCounterTest_3 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter_3 @[playground/src/exp4/Counter.scala 17:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<5>("h10")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<17>("h1ffff"), UInt<17>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[17] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<17> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].en <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[9].en <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[10].en <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[11].en <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_12 = bits(_allStepIn_WIRE, 12, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[12].en <= _allStepIn_T_12 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_13 = bits(_allStepIn_WIRE, 13, 13) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[13].en <= _allStepIn_T_13 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_14 = bits(_allStepIn_WIRE, 14, 14) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[14].en <= _allStepIn_T_14 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_15 = bits(_allStepIn_WIRE, 15, 15) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[15].en <= _allStepIn_T_15 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_16 = bits(_allStepIn_WIRE, 16, 16) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[16].en <= _allStepIn_T_16 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-4bit, may finish after 2359296 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-4bit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<1>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<1>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<1>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<1> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    wire ref_cnt : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 61:73]
    ref_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 61:73]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      ref_wrap <= UInt<1>("h1") @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<2>("h2")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<3>("h7"), UInt<3>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[3] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<3> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-1-limit, may finish after 32 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-1-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_1 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<1>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<1>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<2>("h2")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<1>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<1> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<2>("h2")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_1 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_1 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<2>("h3")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[4] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<4> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-2-limit, may finish after 80 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-2-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_2 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<2>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<2>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<2>("h3")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<2>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<2> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<2>("h3")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<2>("h2")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<2>("h2")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_2 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_2 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<3>("h4")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[5] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<5> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-3-limit, may finish after 192 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-3-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_3 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<2>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<2>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<3>("h4")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<2>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<2> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<3>("h4")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<2>("h3")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<2>("h3")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_3 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_3 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<3>("h5")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[6] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<6> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-4-limit, may finish after 448 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-4-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_4 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<3>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<3>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<3>("h5")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<3>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<3> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<3>("h5")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<3>("h4")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<3>("h4")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_4 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_4 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<3>("h6")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<7>("h7f"), UInt<7>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[7] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<7> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-5-limit, may finish after 1024 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-5-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_5 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<3>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<3>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<3>("h6")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<3>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<3> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<3>("h6")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<3>("h5")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<3>("h5")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_5 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_5 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<3>("h7")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<8>("hff"), UInt<8>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[8] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<8> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-6-limit, may finish after 2304 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-6-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_6 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<3>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<3>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<3>("h7")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<3>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<3> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<3>("h7")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<3>("h6")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<3>("h6")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_6 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_6 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<4>("h8")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<9>("h1ff"), UInt<9>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[9] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<9> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].en <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-7-limit, may finish after 5120 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-7-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_7 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<3>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<3>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<4>("h8")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<3>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<3> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<4>("h8")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<3>("h7")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<3>("h7")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_7 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_7 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<4>("h9")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<10>, clock with :
      reset => (reset, UInt<10>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<10>("h3ff"), UInt<10>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[10] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<10> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].en <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[9].en <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-8-limit, may finish after 11264 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-8-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_8 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<4>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<4>("h9")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<4> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<4>("h9")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<4>("h8")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<4>("h8")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_8 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_8 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<4>("ha")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<11>, clock with :
      reset => (reset, UInt<11>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<11>("h7ff"), UInt<11>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[11] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<11> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].en <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[9].en <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[10].en <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-9-limit, may finish after 24576 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-9-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_9 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<4>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<4>("ha")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<4> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<4>("ha")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<4>("h9")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<4>("h9")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_9 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_9 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<4>("hb")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<12>, clock with :
      reset => (reset, UInt<12>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<12>("hfff"), UInt<12>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[12] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<12> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].en <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[9].en <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[10].en <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[11].en <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-10-limit, may finish after 53248 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-10-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_10 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<4>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<4>("hb")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<4> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<4>("hb")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<4>("ha")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<4>("ha")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_10 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_10 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<4>("hc")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<13>, clock with :
      reset => (reset, UInt<13>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<13>("h1fff"), UInt<13>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[13] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<13> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].en <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[9].en <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[10].en <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[11].en <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_12 = bits(_allStepIn_WIRE, 12, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[12].en <= _allStepIn_T_12 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-11-limit, may finish after 114688 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-11-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_11 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<4>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<4>("hc")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<4> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<4>("hc")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<4>("hb")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<4>("hb")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_11 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_11 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<4>("hd")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<14>, clock with :
      reset => (reset, UInt<14>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<14>("h3fff"), UInt<14>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[14] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<14> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].en <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[9].en <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[10].en <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[11].en <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_12 = bits(_allStepIn_WIRE, 12, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[12].en <= _allStepIn_T_12 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_13 = bits(_allStepIn_WIRE, 13, 13) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[13].en <= _allStepIn_T_13 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-12-limit, may finish after 245760 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-12-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_12 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<4>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<4>("hd")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<4> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<4>("hd")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<4>("hc")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<4>("hc")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_12 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_12 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<4>("he")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<15>("h7fff"), UInt<15>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[15] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<15> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].en <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[9].en <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[10].en <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[11].en <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_12 = bits(_allStepIn_WIRE, 12, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[12].en <= _allStepIn_T_12 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_13 = bits(_allStepIn_WIRE, 13, 13) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[13].en <= _allStepIn_T_13 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_14 = bits(_allStepIn_WIRE, 14, 14) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[14].en <= _allStepIn_T_14 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-13-limit, may finish after 524288 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-13-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_13 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<4>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<4>("he")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<4> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<4>("he")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<4>("hd")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<4>("hd")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_13 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_13 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<4>("hf")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<16>("hffff"), UInt<16>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[16] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<16> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].en <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[9].en <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[10].en <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[11].en <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_12 = bits(_allStepIn_WIRE, 12, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[12].en <= _allStepIn_T_12 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_13 = bits(_allStepIn_WIRE, 13, 13) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[13].en <= _allStepIn_T_13 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_14 = bits(_allStepIn_WIRE, 14, 14) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[14].en <= _allStepIn_T_14 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_15 = bits(_allStepIn_WIRE, 15, 15) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[15].en <= _allStepIn_T_15 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-14-limit, may finish after 1114112 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-14-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_14 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<4>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<4>("hf")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<4> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<4>("hf")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<4>("he")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<4>("he")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        ref_cnt <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_14 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_14 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<5>("h10")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<17>("h1ffff"), UInt<17>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[17] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<17> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].en <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[9].en <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[10].en <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[11].en <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_12 = bits(_allStepIn_WIRE, 12, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[12].en <= _allStepIn_T_12 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_13 = bits(_allStepIn_WIRE, 13, 13) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[13].en <= _allStepIn_T_13 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_14 = bits(_allStepIn_WIRE, 14, 14) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[14].en <= _allStepIn_T_14 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_15 = bits(_allStepIn_WIRE, 15, 15) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[15].en <= _allStepIn_T_15 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_16 = bits(_allStepIn_WIRE, 16, 16) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[16].en <= _allStepIn_T_16 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-15-limit, may finish after 2359296 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-15-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyCounter2_15 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip en : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { Q : UInt<4>, rco : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_Q_next_T = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_1 = tail(_out_Q_next_T, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_2 = eq(_out_Q_next_T_1, UInt<5>("h10")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_3 = add(UInt<4>("h0"), UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_4 = tail(_out_Q_next_T_3, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_5 = mux(_out_Q_next_T_2, UInt<1>("h0"), _out_Q_next_T_4) @[playground/src/exp4/Counter.scala 28:33]
    wire out_Q_next : UInt<4> @[playground/src/utils/Utils.scala 62:20]
    reg out_Q_r : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[playground/src/utils/Utils.scala 63:22]
    when in.en : @[playground/src/utils/Utils.scala 63:22]
      out_Q_r <= out_Q_next @[playground/src/utils/Utils.scala 63:22]
    node _out_Q_next_T_6 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_7 = tail(_out_Q_next_T_6, 1) @[playground/src/exp4/Counter.scala 28:36]
    node _out_Q_next_T_8 = eq(_out_Q_next_T_7, UInt<5>("h10")) @[playground/src/exp4/Counter.scala 28:42]
    node _out_Q_next_T_9 = add(out_Q_r, UInt<1>("h1")) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_10 = tail(_out_Q_next_T_9, 1) @[playground/src/exp4/Counter.scala 28:62]
    node _out_Q_next_T_11 = mux(_out_Q_next_T_8, UInt<1>("h0"), _out_Q_next_T_10) @[playground/src/exp4/Counter.scala 28:33]
    out_Q_next <= _out_Q_next_T_11 @[playground/src/utils/Utils.scala 64:10]
    out.Q <= out_Q_r @[playground/src/exp4/Counter.scala 28:9]
    node _out_rco_T = eq(out.Q, UInt<4>("hf")) @[playground/src/exp4/Counter.scala 30:21]
    node _out_rco_T_1 = and(_out_rco_T, in.en) @[playground/src/exp4/Counter.scala 30:40]
    out.rco <= _out_rco_T_1 @[playground/src/exp4/Counter.scala 30:11]
    reg ref_cnt : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire ref_wrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    ref_wrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when in.en : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(ref_cnt, UInt<4>("hf")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(ref_cnt, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      ref_cnt <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      ref_wrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T = eq(ref_cnt, out.Q) @[playground/src/exp4/Counter.scala 33:18]
    node _T_1 = asUInt(reset) @[playground/src/exp4/Counter.scala 33:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
    when _T_2 : @[playground/src/exp4/Counter.scala 33:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 33:9]
      when _T_3 : @[playground/src/exp4/Counter.scala 33:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:33 assert(ref_cnt === out.Q)\n") : printf @[playground/src/exp4/Counter.scala 33:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp4/Counter.scala 33:9]
    node _T_4 = eq(ref_wrap, out.rco) @[playground/src/exp4/Counter.scala 34:19]
    node _T_5 = asUInt(reset) @[playground/src/exp4/Counter.scala 34:9]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
    when _T_6 : @[playground/src/exp4/Counter.scala 34:9]
      node _T_7 = eq(_T_4, UInt<1>("h0")) @[playground/src/exp4/Counter.scala 34:9]
      when _T_7 : @[playground/src/exp4/Counter.scala 34:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Counter.scala:34 assert(ref_wrap === out.rco)\n") : printf_1 @[playground/src/exp4/Counter.scala 34:9]
      assert(clock, _T_4, UInt<1>("h1"), "") : assert_1 @[playground/src/exp4/Counter.scala 34:9]


  module MyCounter2Test_15 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyCounter2_15 @[playground/src/exp4/Counter.scala 38:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<5>("h11")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<18>, clock with :
      reset => (reset, UInt<18>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<18>("h3ffff"), UInt<18>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip en : UInt<1>}[18] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<18> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].en <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].en <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].en <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[3].en <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[4].en <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[5].en <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[6].en <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[7].en <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[8].en <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[9].en <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[10].en <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[11].en <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_12 = bits(_allStepIn_WIRE, 12, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[12].en <= _allStepIn_T_12 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_13 = bits(_allStepIn_WIRE, 13, 13) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[13].en <= _allStepIn_T_13 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_14 = bits(_allStepIn_WIRE, 14, 14) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[14].en <= _allStepIn_T_14 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_15 = bits(_allStepIn_WIRE, 15, 15) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[15].en <= _allStepIn_T_15 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_16 = bits(_allStepIn_WIRE, 16, 16) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[16].en <= _allStepIn_T_16 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_17 = bits(_allStepIn_WIRE, 17, 17) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[17].en <= _allStepIn_T_17 @[playground/src/utils/Utils.scala 39:35]
    m.in.en <= allStepIn[step].en @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Counter-16-limit, may finish after 4980736 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Counter-16-limit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module Hamming :
    input clock : Clock
    input reset : UInt<1>
    input in : UInt<3> @[playground/src/utils/Utils.scala 27:14]
    output out : { out : UInt<3>, parity : UInt<2>} @[playground/src/utils/Utils.scala 28:15]

    node inShift1 = cat(in, UInt<1>("h0")) @[playground/src/exp4/Hamming.scala 14:21]
    node _out_parity_T = bits(inShift1, 1, 1) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_1 = bits(inShift1, 3, 3) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_2 = xor(_out_parity_T, _out_parity_T_1) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_3 = bits(inShift1, 2, 2) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_4 = bits(inShift1, 3, 3) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_5 = xor(_out_parity_T_3, _out_parity_T_4) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_6 = cat(_out_parity_T_5, _out_parity_T_2) @[playground/src/exp4/Hamming.scala 15:20]
    out.parity <= _out_parity_T_6 @[playground/src/exp4/Hamming.scala 15:14]
    node _out_out_T = dshl(UInt<1>("h1"), out.parity) @[playground/src/exp4/Hamming.scala 16:31]
    node _out_out_T_1 = xor(inShift1, _out_out_T) @[playground/src/exp4/Hamming.scala 16:24]
    node _out_out_T_2 = bits(_out_out_T_1, 3, 1) @[playground/src/exp4/Hamming.scala 16:46]
    out.out <= _out_out_T_2 @[playground/src/exp4/Hamming.scala 16:11]
    node _sys_T = bits(inShift1, 0, 0) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_1 = bits(inShift1, 1, 1) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_2 = bits(inShift1, 2, 2) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_3 = bits(inShift1, 3, 3) @[playground/src/exp4/Hamming.scala 53:42]
    node sys_lo = cat(_sys_T_1, _sys_T_3) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_hi = cat(_sys_T, _sys_T_2) @[playground/src/exp4/Hamming.scala 53:36]
    node sys = cat(sys_hi, sys_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node _syndromeUInt_T = and(UInt<2>("h3"), sys) @[playground/src/exp4/Hamming.scala 56:64]
    node _syndromeUInt_T_1 = xorr(_syndromeUInt_T) @[playground/src/exp4/Hamming.scala 56:71]
    node _syndromeUInt_T_2 = and(UInt<3>("h5"), sys) @[playground/src/exp4/Hamming.scala 56:64]
    node _syndromeUInt_T_3 = xorr(_syndromeUInt_T_2) @[playground/src/exp4/Hamming.scala 56:71]
    wire _syndromeUInt_WIRE : UInt<1>[2] @[playground/src/exp4/Hamming.scala 56:44]
    _syndromeUInt_WIRE[0] <= _syndromeUInt_T_1 @[playground/src/exp4/Hamming.scala 56:44]
    _syndromeUInt_WIRE[1] <= _syndromeUInt_T_3 @[playground/src/exp4/Hamming.scala 56:44]
    node syndromeUInt = cat(_syndromeUInt_WIRE[1], _syndromeUInt_WIRE[0]) @[playground/src/exp4/Hamming.scala 56:78]
    node hammBadBitOH_shiftAmount = bits(syndromeUInt, 1, 0) @[src/main/scala/chisel3/util/OneHot.scala 64:49]
    node _hammBadBitOH_T = dshl(UInt<1>("h1"), hammBadBitOH_shiftAmount) @[src/main/scala/chisel3/util/OneHot.scala 65:12]
    node hammBadBitOH = bits(_hammBadBitOH_T, 3, 0) @[src/main/scala/chisel3/util/OneHot.scala 65:27]
    node _sysBadBitOH_T = bits(hammBadBitOH, 3, 3) @[playground/src/exp4/Hamming.scala 59:60]
    wire _sysBadBitOH_WIRE : UInt<1>[1] @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[0] <= _sysBadBitOH_T @[playground/src/exp4/Hamming.scala 59:41]
    node uncorrected = bits(sys, 0, 0) @[playground/src/exp4/Hamming.scala 61:24]
    node corrected = xor(uncorrected, _sysBadBitOH_WIRE[0]) @[playground/src/exp4/Hamming.scala 62:31]
    node correctable = orr(syndromeUInt) @[playground/src/exp4/Hamming.scala 63:34]
    node _dut_corrected_T = cat(out.out, UInt<1>("h0")) @[playground/src/exp4/Hamming.scala 69:38]
    node _dut_corrected_T_1 = bits(_dut_corrected_T, 0, 0) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_2 = bits(_dut_corrected_T, 1, 1) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_3 = bits(_dut_corrected_T, 2, 2) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_4 = bits(_dut_corrected_T, 3, 3) @[playground/src/exp4/Hamming.scala 53:42]
    node dut_corrected_lo = cat(_dut_corrected_T_2, _dut_corrected_T_4) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_hi = cat(_dut_corrected_T_1, _dut_corrected_T_3) @[playground/src/exp4/Hamming.scala 53:36]
    node _dut_corrected_T_5 = cat(dut_corrected_hi, dut_corrected_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected = bits(_dut_corrected_T_5, 0, 0) @[playground/src/exp4/Hamming.scala 69:57]
    node _T = eq(corrected, dut_corrected) @[playground/src/exp4/Hamming.scala 70:38]
    node _T_1 = or(UInt<1>("h0"), _T) @[playground/src/exp4/Hamming.scala 70:24]
    node _T_2 = asUInt(reset) @[playground/src/exp4/Hamming.scala 70:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp4/Hamming.scala 70:9]
    when _T_3 : @[playground/src/exp4/Hamming.scala 70:9]
      node _T_4 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Hamming.scala 70:9]
      when _T_4 : @[playground/src/exp4/Hamming.scala 70:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Hamming.scala:70 assert(uncorrectable || (corrected === dut_corrected))\n") : printf @[playground/src/exp4/Hamming.scala 70:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp4/Hamming.scala 70:9]


  module HammingTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of Hamming @[playground/src/exp4/Hamming.scala 74:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<3>("h7"), UInt<3>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : UInt<3> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE <= cnt @[playground/src/utils/Utils.scala 33:27]
    m.in <= _m_in_WIRE @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Hamming(3,1), may finish after 8 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Hamming(3,1)\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module Hamming_1 :
    input clock : Clock
    input reset : UInt<1>
    input in : UInt<7> @[playground/src/utils/Utils.scala 27:14]
    output out : { out : UInt<7>, parity : UInt<3>} @[playground/src/utils/Utils.scala 28:15]

    node inShift1 = cat(in, UInt<1>("h0")) @[playground/src/exp4/Hamming.scala 14:21]
    node _out_parity_T = bits(inShift1, 1, 1) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_1 = bits(inShift1, 3, 3) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_2 = bits(inShift1, 5, 5) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_3 = bits(inShift1, 7, 7) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_4 = xor(_out_parity_T, _out_parity_T_1) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_5 = xor(_out_parity_T_4, _out_parity_T_2) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_6 = xor(_out_parity_T_5, _out_parity_T_3) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_7 = bits(inShift1, 2, 2) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_8 = bits(inShift1, 3, 3) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_9 = bits(inShift1, 6, 6) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_10 = bits(inShift1, 7, 7) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_11 = xor(_out_parity_T_7, _out_parity_T_8) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_12 = xor(_out_parity_T_11, _out_parity_T_9) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_13 = xor(_out_parity_T_12, _out_parity_T_10) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_14 = bits(inShift1, 4, 4) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_15 = bits(inShift1, 5, 5) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_16 = bits(inShift1, 6, 6) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_17 = bits(inShift1, 7, 7) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_18 = xor(_out_parity_T_14, _out_parity_T_15) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_19 = xor(_out_parity_T_18, _out_parity_T_16) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_20 = xor(_out_parity_T_19, _out_parity_T_17) @[playground/src/exp4/Hamming.scala 15:110]
    node out_parity_hi = cat(_out_parity_T_20, _out_parity_T_13) @[playground/src/exp4/Hamming.scala 15:20]
    node _out_parity_T_21 = cat(out_parity_hi, _out_parity_T_6) @[playground/src/exp4/Hamming.scala 15:20]
    out.parity <= _out_parity_T_21 @[playground/src/exp4/Hamming.scala 15:14]
    node _out_out_T = dshl(UInt<1>("h1"), out.parity) @[playground/src/exp4/Hamming.scala 16:31]
    node _out_out_T_1 = xor(inShift1, _out_out_T) @[playground/src/exp4/Hamming.scala 16:24]
    node _out_out_T_2 = bits(_out_out_T_1, 7, 1) @[playground/src/exp4/Hamming.scala 16:46]
    out.out <= _out_out_T_2 @[playground/src/exp4/Hamming.scala 16:11]
    node _sys_T = bits(inShift1, 0, 0) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_1 = bits(inShift1, 1, 1) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_2 = bits(inShift1, 2, 2) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_3 = bits(inShift1, 3, 3) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_4 = bits(inShift1, 4, 4) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_5 = bits(inShift1, 5, 5) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_6 = bits(inShift1, 6, 6) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_7 = bits(inShift1, 7, 7) @[playground/src/exp4/Hamming.scala 53:42]
    node sys_lo_lo = cat(_sys_T_5, _sys_T_3) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_lo_hi = cat(_sys_T_7, _sys_T_6) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_lo = cat(sys_lo_hi, sys_lo_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_hi_lo = cat(_sys_T_2, _sys_T_1) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_hi_hi = cat(_sys_T, _sys_T_4) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_hi = cat(sys_hi_hi, sys_hi_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node sys = cat(sys_hi, sys_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node _syndromeUInt_T = and(UInt<5>("h1b"), sys) @[playground/src/exp4/Hamming.scala 56:64]
    node _syndromeUInt_T_1 = xorr(_syndromeUInt_T) @[playground/src/exp4/Hamming.scala 56:71]
    node _syndromeUInt_T_2 = and(UInt<6>("h2d"), sys) @[playground/src/exp4/Hamming.scala 56:64]
    node _syndromeUInt_T_3 = xorr(_syndromeUInt_T_2) @[playground/src/exp4/Hamming.scala 56:71]
    node _syndromeUInt_T_4 = and(UInt<7>("h4e"), sys) @[playground/src/exp4/Hamming.scala 56:64]
    node _syndromeUInt_T_5 = xorr(_syndromeUInt_T_4) @[playground/src/exp4/Hamming.scala 56:71]
    wire _syndromeUInt_WIRE : UInt<1>[3] @[playground/src/exp4/Hamming.scala 56:44]
    _syndromeUInt_WIRE[0] <= _syndromeUInt_T_1 @[playground/src/exp4/Hamming.scala 56:44]
    _syndromeUInt_WIRE[1] <= _syndromeUInt_T_3 @[playground/src/exp4/Hamming.scala 56:44]
    _syndromeUInt_WIRE[2] <= _syndromeUInt_T_5 @[playground/src/exp4/Hamming.scala 56:44]
    node syndromeUInt_hi = cat(_syndromeUInt_WIRE[2], _syndromeUInt_WIRE[1]) @[playground/src/exp4/Hamming.scala 56:78]
    node syndromeUInt = cat(syndromeUInt_hi, _syndromeUInt_WIRE[0]) @[playground/src/exp4/Hamming.scala 56:78]
    node hammBadBitOH_shiftAmount = bits(syndromeUInt, 2, 0) @[src/main/scala/chisel3/util/OneHot.scala 64:49]
    node _hammBadBitOH_T = dshl(UInt<1>("h1"), hammBadBitOH_shiftAmount) @[src/main/scala/chisel3/util/OneHot.scala 65:12]
    node hammBadBitOH = bits(_hammBadBitOH_T, 7, 0) @[src/main/scala/chisel3/util/OneHot.scala 65:27]
    node _sysBadBitOH_T = bits(hammBadBitOH, 3, 3) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_1 = bits(hammBadBitOH, 5, 5) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_2 = bits(hammBadBitOH, 6, 6) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_3 = bits(hammBadBitOH, 7, 7) @[playground/src/exp4/Hamming.scala 59:60]
    wire _sysBadBitOH_WIRE : UInt<1>[4] @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[0] <= _sysBadBitOH_T @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[1] <= _sysBadBitOH_T_1 @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[2] <= _sysBadBitOH_T_2 @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[3] <= _sysBadBitOH_T_3 @[playground/src/exp4/Hamming.scala 59:41]
    node sysBadBitOH_lo = cat(_sysBadBitOH_WIRE[1], _sysBadBitOH_WIRE[0]) @[playground/src/exp4/Hamming.scala 59:76]
    node sysBadBitOH_hi = cat(_sysBadBitOH_WIRE[3], _sysBadBitOH_WIRE[2]) @[playground/src/exp4/Hamming.scala 59:76]
    node sysBadBitOH = cat(sysBadBitOH_hi, sysBadBitOH_lo) @[playground/src/exp4/Hamming.scala 59:76]
    node uncorrected = bits(sys, 3, 0) @[playground/src/exp4/Hamming.scala 61:24]
    node corrected = xor(uncorrected, sysBadBitOH) @[playground/src/exp4/Hamming.scala 62:31]
    node correctable = orr(syndromeUInt) @[playground/src/exp4/Hamming.scala 63:34]
    node _dut_corrected_T = cat(out.out, UInt<1>("h0")) @[playground/src/exp4/Hamming.scala 69:38]
    node _dut_corrected_T_1 = bits(_dut_corrected_T, 0, 0) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_2 = bits(_dut_corrected_T, 1, 1) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_3 = bits(_dut_corrected_T, 2, 2) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_4 = bits(_dut_corrected_T, 3, 3) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_5 = bits(_dut_corrected_T, 4, 4) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_6 = bits(_dut_corrected_T, 5, 5) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_7 = bits(_dut_corrected_T, 6, 6) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_8 = bits(_dut_corrected_T, 7, 7) @[playground/src/exp4/Hamming.scala 53:42]
    node dut_corrected_lo_lo = cat(_dut_corrected_T_6, _dut_corrected_T_4) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_lo_hi = cat(_dut_corrected_T_8, _dut_corrected_T_7) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_lo = cat(dut_corrected_lo_hi, dut_corrected_lo_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_hi_lo = cat(_dut_corrected_T_3, _dut_corrected_T_2) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_hi_hi = cat(_dut_corrected_T_1, _dut_corrected_T_5) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_hi = cat(dut_corrected_hi_hi, dut_corrected_hi_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node _dut_corrected_T_9 = cat(dut_corrected_hi, dut_corrected_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected = bits(_dut_corrected_T_9, 3, 0) @[playground/src/exp4/Hamming.scala 69:57]
    node _T = eq(corrected, dut_corrected) @[playground/src/exp4/Hamming.scala 70:38]
    node _T_1 = or(UInt<1>("h0"), _T) @[playground/src/exp4/Hamming.scala 70:24]
    node _T_2 = asUInt(reset) @[playground/src/exp4/Hamming.scala 70:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp4/Hamming.scala 70:9]
    when _T_3 : @[playground/src/exp4/Hamming.scala 70:9]
      node _T_4 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Hamming.scala 70:9]
      when _T_4 : @[playground/src/exp4/Hamming.scala 70:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Hamming.scala:70 assert(uncorrectable || (corrected === dut_corrected))\n") : printf @[playground/src/exp4/Hamming.scala 70:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp4/Hamming.scala 70:9]


  module HammingTest_1 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of Hamming_1 @[playground/src/exp4/Hamming.scala 74:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<7>("h7f"), UInt<7>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : UInt<7> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE <= cnt @[playground/src/utils/Utils.scala 33:27]
    m.in <= _m_in_WIRE @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Hamming(7,4), may finish after 128 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Hamming(7,4)\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module Hamming_2 :
    input clock : Clock
    input reset : UInt<1>
    input in : UInt<15> @[playground/src/utils/Utils.scala 27:14]
    output out : { out : UInt<15>, parity : UInt<4>} @[playground/src/utils/Utils.scala 28:15]

    node inShift1 = cat(in, UInt<1>("h0")) @[playground/src/exp4/Hamming.scala 14:21]
    node _out_parity_T = bits(inShift1, 1, 1) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_1 = bits(inShift1, 3, 3) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_2 = bits(inShift1, 5, 5) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_3 = bits(inShift1, 7, 7) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_4 = bits(inShift1, 9, 9) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_5 = bits(inShift1, 11, 11) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_6 = bits(inShift1, 13, 13) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_7 = bits(inShift1, 15, 15) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_8 = xor(_out_parity_T, _out_parity_T_1) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_9 = xor(_out_parity_T_8, _out_parity_T_2) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_10 = xor(_out_parity_T_9, _out_parity_T_3) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_11 = xor(_out_parity_T_10, _out_parity_T_4) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_12 = xor(_out_parity_T_11, _out_parity_T_5) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_13 = xor(_out_parity_T_12, _out_parity_T_6) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_14 = xor(_out_parity_T_13, _out_parity_T_7) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_15 = bits(inShift1, 2, 2) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_16 = bits(inShift1, 3, 3) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_17 = bits(inShift1, 6, 6) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_18 = bits(inShift1, 7, 7) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_19 = bits(inShift1, 10, 10) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_20 = bits(inShift1, 11, 11) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_21 = bits(inShift1, 14, 14) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_22 = bits(inShift1, 15, 15) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_23 = xor(_out_parity_T_15, _out_parity_T_16) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_24 = xor(_out_parity_T_23, _out_parity_T_17) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_25 = xor(_out_parity_T_24, _out_parity_T_18) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_26 = xor(_out_parity_T_25, _out_parity_T_19) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_27 = xor(_out_parity_T_26, _out_parity_T_20) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_28 = xor(_out_parity_T_27, _out_parity_T_21) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_29 = xor(_out_parity_T_28, _out_parity_T_22) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_30 = bits(inShift1, 4, 4) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_31 = bits(inShift1, 5, 5) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_32 = bits(inShift1, 6, 6) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_33 = bits(inShift1, 7, 7) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_34 = bits(inShift1, 12, 12) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_35 = bits(inShift1, 13, 13) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_36 = bits(inShift1, 14, 14) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_37 = bits(inShift1, 15, 15) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_38 = xor(_out_parity_T_30, _out_parity_T_31) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_39 = xor(_out_parity_T_38, _out_parity_T_32) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_40 = xor(_out_parity_T_39, _out_parity_T_33) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_41 = xor(_out_parity_T_40, _out_parity_T_34) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_42 = xor(_out_parity_T_41, _out_parity_T_35) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_43 = xor(_out_parity_T_42, _out_parity_T_36) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_44 = xor(_out_parity_T_43, _out_parity_T_37) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_45 = bits(inShift1, 8, 8) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_46 = bits(inShift1, 9, 9) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_47 = bits(inShift1, 10, 10) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_48 = bits(inShift1, 11, 11) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_49 = bits(inShift1, 12, 12) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_50 = bits(inShift1, 13, 13) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_51 = bits(inShift1, 14, 14) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_52 = bits(inShift1, 15, 15) @[playground/src/exp4/Hamming.scala 15:96]
    node _out_parity_T_53 = xor(_out_parity_T_45, _out_parity_T_46) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_54 = xor(_out_parity_T_53, _out_parity_T_47) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_55 = xor(_out_parity_T_54, _out_parity_T_48) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_56 = xor(_out_parity_T_55, _out_parity_T_49) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_57 = xor(_out_parity_T_56, _out_parity_T_50) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_58 = xor(_out_parity_T_57, _out_parity_T_51) @[playground/src/exp4/Hamming.scala 15:110]
    node _out_parity_T_59 = xor(_out_parity_T_58, _out_parity_T_52) @[playground/src/exp4/Hamming.scala 15:110]
    node out_parity_lo = cat(_out_parity_T_29, _out_parity_T_14) @[playground/src/exp4/Hamming.scala 15:20]
    node out_parity_hi = cat(_out_parity_T_59, _out_parity_T_44) @[playground/src/exp4/Hamming.scala 15:20]
    node _out_parity_T_60 = cat(out_parity_hi, out_parity_lo) @[playground/src/exp4/Hamming.scala 15:20]
    out.parity <= _out_parity_T_60 @[playground/src/exp4/Hamming.scala 15:14]
    node _out_out_T = dshl(UInt<1>("h1"), out.parity) @[playground/src/exp4/Hamming.scala 16:31]
    node _out_out_T_1 = xor(inShift1, _out_out_T) @[playground/src/exp4/Hamming.scala 16:24]
    node _out_out_T_2 = bits(_out_out_T_1, 15, 1) @[playground/src/exp4/Hamming.scala 16:46]
    out.out <= _out_out_T_2 @[playground/src/exp4/Hamming.scala 16:11]
    node _sys_T = bits(inShift1, 0, 0) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_1 = bits(inShift1, 1, 1) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_2 = bits(inShift1, 2, 2) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_3 = bits(inShift1, 3, 3) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_4 = bits(inShift1, 4, 4) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_5 = bits(inShift1, 5, 5) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_6 = bits(inShift1, 6, 6) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_7 = bits(inShift1, 7, 7) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_8 = bits(inShift1, 8, 8) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_9 = bits(inShift1, 9, 9) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_10 = bits(inShift1, 10, 10) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_11 = bits(inShift1, 11, 11) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_12 = bits(inShift1, 12, 12) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_13 = bits(inShift1, 13, 13) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_14 = bits(inShift1, 14, 14) @[playground/src/exp4/Hamming.scala 53:42]
    node _sys_T_15 = bits(inShift1, 15, 15) @[playground/src/exp4/Hamming.scala 53:42]
    node sys_lo_lo_lo = cat(_sys_T_5, _sys_T_3) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_lo_lo_hi = cat(_sys_T_7, _sys_T_6) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_lo_lo = cat(sys_lo_lo_hi, sys_lo_lo_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_lo_hi_lo = cat(_sys_T_10, _sys_T_9) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_lo_hi_hi = cat(_sys_T_12, _sys_T_11) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_lo_hi = cat(sys_lo_hi_hi, sys_lo_hi_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_lo = cat(sys_lo_hi, sys_lo_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_hi_lo_lo = cat(_sys_T_14, _sys_T_13) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_hi_lo_hi = cat(_sys_T_1, _sys_T_15) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_hi_lo = cat(sys_hi_lo_hi, sys_hi_lo_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_hi_hi_lo = cat(_sys_T_4, _sys_T_2) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_hi_hi_hi = cat(_sys_T, _sys_T_8) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_hi_hi = cat(sys_hi_hi_hi, sys_hi_hi_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node sys_hi = cat(sys_hi_hi, sys_hi_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node sys = cat(sys_hi, sys_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node _syndromeUInt_T = and(UInt<12>("hd5b"), sys) @[playground/src/exp4/Hamming.scala 56:64]
    node _syndromeUInt_T_1 = xorr(_syndromeUInt_T) @[playground/src/exp4/Hamming.scala 56:71]
    node _syndromeUInt_T_2 = and(UInt<13>("h166d"), sys) @[playground/src/exp4/Hamming.scala 56:64]
    node _syndromeUInt_T_3 = xorr(_syndromeUInt_T_2) @[playground/src/exp4/Hamming.scala 56:71]
    node _syndromeUInt_T_4 = and(UInt<14>("h278e"), sys) @[playground/src/exp4/Hamming.scala 56:64]
    node _syndromeUInt_T_5 = xorr(_syndromeUInt_T_4) @[playground/src/exp4/Hamming.scala 56:71]
    node _syndromeUInt_T_6 = and(UInt<15>("h47f0"), sys) @[playground/src/exp4/Hamming.scala 56:64]
    node _syndromeUInt_T_7 = xorr(_syndromeUInt_T_6) @[playground/src/exp4/Hamming.scala 56:71]
    wire _syndromeUInt_WIRE : UInt<1>[4] @[playground/src/exp4/Hamming.scala 56:44]
    _syndromeUInt_WIRE[0] <= _syndromeUInt_T_1 @[playground/src/exp4/Hamming.scala 56:44]
    _syndromeUInt_WIRE[1] <= _syndromeUInt_T_3 @[playground/src/exp4/Hamming.scala 56:44]
    _syndromeUInt_WIRE[2] <= _syndromeUInt_T_5 @[playground/src/exp4/Hamming.scala 56:44]
    _syndromeUInt_WIRE[3] <= _syndromeUInt_T_7 @[playground/src/exp4/Hamming.scala 56:44]
    node syndromeUInt_lo = cat(_syndromeUInt_WIRE[1], _syndromeUInt_WIRE[0]) @[playground/src/exp4/Hamming.scala 56:78]
    node syndromeUInt_hi = cat(_syndromeUInt_WIRE[3], _syndromeUInt_WIRE[2]) @[playground/src/exp4/Hamming.scala 56:78]
    node syndromeUInt = cat(syndromeUInt_hi, syndromeUInt_lo) @[playground/src/exp4/Hamming.scala 56:78]
    node hammBadBitOH_shiftAmount = bits(syndromeUInt, 3, 0) @[src/main/scala/chisel3/util/OneHot.scala 64:49]
    node _hammBadBitOH_T = dshl(UInt<1>("h1"), hammBadBitOH_shiftAmount) @[src/main/scala/chisel3/util/OneHot.scala 65:12]
    node hammBadBitOH = bits(_hammBadBitOH_T, 15, 0) @[src/main/scala/chisel3/util/OneHot.scala 65:27]
    node _sysBadBitOH_T = bits(hammBadBitOH, 3, 3) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_1 = bits(hammBadBitOH, 5, 5) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_2 = bits(hammBadBitOH, 6, 6) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_3 = bits(hammBadBitOH, 7, 7) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_4 = bits(hammBadBitOH, 9, 9) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_5 = bits(hammBadBitOH, 10, 10) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_6 = bits(hammBadBitOH, 11, 11) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_7 = bits(hammBadBitOH, 12, 12) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_8 = bits(hammBadBitOH, 13, 13) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_9 = bits(hammBadBitOH, 14, 14) @[playground/src/exp4/Hamming.scala 59:60]
    node _sysBadBitOH_T_10 = bits(hammBadBitOH, 15, 15) @[playground/src/exp4/Hamming.scala 59:60]
    wire _sysBadBitOH_WIRE : UInt<1>[11] @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[0] <= _sysBadBitOH_T @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[1] <= _sysBadBitOH_T_1 @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[2] <= _sysBadBitOH_T_2 @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[3] <= _sysBadBitOH_T_3 @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[4] <= _sysBadBitOH_T_4 @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[5] <= _sysBadBitOH_T_5 @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[6] <= _sysBadBitOH_T_6 @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[7] <= _sysBadBitOH_T_7 @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[8] <= _sysBadBitOH_T_8 @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[9] <= _sysBadBitOH_T_9 @[playground/src/exp4/Hamming.scala 59:41]
    _sysBadBitOH_WIRE[10] <= _sysBadBitOH_T_10 @[playground/src/exp4/Hamming.scala 59:41]
    node sysBadBitOH_lo_lo = cat(_sysBadBitOH_WIRE[1], _sysBadBitOH_WIRE[0]) @[playground/src/exp4/Hamming.scala 59:76]
    node sysBadBitOH_lo_hi_hi = cat(_sysBadBitOH_WIRE[4], _sysBadBitOH_WIRE[3]) @[playground/src/exp4/Hamming.scala 59:76]
    node sysBadBitOH_lo_hi = cat(sysBadBitOH_lo_hi_hi, _sysBadBitOH_WIRE[2]) @[playground/src/exp4/Hamming.scala 59:76]
    node sysBadBitOH_lo = cat(sysBadBitOH_lo_hi, sysBadBitOH_lo_lo) @[playground/src/exp4/Hamming.scala 59:76]
    node sysBadBitOH_hi_lo_hi = cat(_sysBadBitOH_WIRE[7], _sysBadBitOH_WIRE[6]) @[playground/src/exp4/Hamming.scala 59:76]
    node sysBadBitOH_hi_lo = cat(sysBadBitOH_hi_lo_hi, _sysBadBitOH_WIRE[5]) @[playground/src/exp4/Hamming.scala 59:76]
    node sysBadBitOH_hi_hi_hi = cat(_sysBadBitOH_WIRE[10], _sysBadBitOH_WIRE[9]) @[playground/src/exp4/Hamming.scala 59:76]
    node sysBadBitOH_hi_hi = cat(sysBadBitOH_hi_hi_hi, _sysBadBitOH_WIRE[8]) @[playground/src/exp4/Hamming.scala 59:76]
    node sysBadBitOH_hi = cat(sysBadBitOH_hi_hi, sysBadBitOH_hi_lo) @[playground/src/exp4/Hamming.scala 59:76]
    node sysBadBitOH = cat(sysBadBitOH_hi, sysBadBitOH_lo) @[playground/src/exp4/Hamming.scala 59:76]
    node uncorrected = bits(sys, 10, 0) @[playground/src/exp4/Hamming.scala 61:24]
    node corrected = xor(uncorrected, sysBadBitOH) @[playground/src/exp4/Hamming.scala 62:31]
    node correctable = orr(syndromeUInt) @[playground/src/exp4/Hamming.scala 63:34]
    node _dut_corrected_T = cat(out.out, UInt<1>("h0")) @[playground/src/exp4/Hamming.scala 69:38]
    node _dut_corrected_T_1 = bits(_dut_corrected_T, 0, 0) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_2 = bits(_dut_corrected_T, 1, 1) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_3 = bits(_dut_corrected_T, 2, 2) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_4 = bits(_dut_corrected_T, 3, 3) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_5 = bits(_dut_corrected_T, 4, 4) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_6 = bits(_dut_corrected_T, 5, 5) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_7 = bits(_dut_corrected_T, 6, 6) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_8 = bits(_dut_corrected_T, 7, 7) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_9 = bits(_dut_corrected_T, 8, 8) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_10 = bits(_dut_corrected_T, 9, 9) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_11 = bits(_dut_corrected_T, 10, 10) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_12 = bits(_dut_corrected_T, 11, 11) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_13 = bits(_dut_corrected_T, 12, 12) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_14 = bits(_dut_corrected_T, 13, 13) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_15 = bits(_dut_corrected_T, 14, 14) @[playground/src/exp4/Hamming.scala 53:42]
    node _dut_corrected_T_16 = bits(_dut_corrected_T, 15, 15) @[playground/src/exp4/Hamming.scala 53:42]
    node dut_corrected_lo_lo_lo = cat(_dut_corrected_T_6, _dut_corrected_T_4) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_lo_lo_hi = cat(_dut_corrected_T_8, _dut_corrected_T_7) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_lo_lo = cat(dut_corrected_lo_lo_hi, dut_corrected_lo_lo_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_lo_hi_lo = cat(_dut_corrected_T_11, _dut_corrected_T_10) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_lo_hi_hi = cat(_dut_corrected_T_13, _dut_corrected_T_12) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_lo_hi = cat(dut_corrected_lo_hi_hi, dut_corrected_lo_hi_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_lo = cat(dut_corrected_lo_hi, dut_corrected_lo_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_hi_lo_lo = cat(_dut_corrected_T_15, _dut_corrected_T_14) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_hi_lo_hi = cat(_dut_corrected_T_2, _dut_corrected_T_16) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_hi_lo = cat(dut_corrected_hi_lo_hi, dut_corrected_hi_lo_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_hi_hi_lo = cat(_dut_corrected_T_5, _dut_corrected_T_3) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_hi_hi_hi = cat(_dut_corrected_T_1, _dut_corrected_T_9) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_hi_hi = cat(dut_corrected_hi_hi_hi, dut_corrected_hi_hi_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected_hi = cat(dut_corrected_hi_hi, dut_corrected_hi_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node _dut_corrected_T_17 = cat(dut_corrected_hi, dut_corrected_lo) @[playground/src/exp4/Hamming.scala 53:36]
    node dut_corrected = bits(_dut_corrected_T_17, 10, 0) @[playground/src/exp4/Hamming.scala 69:57]
    node _T = eq(corrected, dut_corrected) @[playground/src/exp4/Hamming.scala 70:38]
    node _T_1 = or(UInt<1>("h0"), _T) @[playground/src/exp4/Hamming.scala 70:24]
    node _T_2 = asUInt(reset) @[playground/src/exp4/Hamming.scala 70:9]
    node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp4/Hamming.scala 70:9]
    when _T_3 : @[playground/src/exp4/Hamming.scala 70:9]
      node _T_4 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp4/Hamming.scala 70:9]
      when _T_4 : @[playground/src/exp4/Hamming.scala 70:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Hamming.scala:70 assert(uncorrectable || (corrected === dut_corrected))\n") : printf @[playground/src/exp4/Hamming.scala 70:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp4/Hamming.scala 70:9]


  module HammingTest_2 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of Hamming_2 @[playground/src/exp4/Hamming.scala 74:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<15>("h7fff"), UInt<15>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : UInt<15> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE <= cnt @[playground/src/utils/Utils.scala 33:27]
    m.in <= _m_in_WIRE @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Hamming(15,11), may finish after 32768 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Hamming(15,11)\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module Exp4AllTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst modules_0 of MyCounterTest @[playground/src/exp4/Test.scala 6:41]
    modules_0.clock <= clock
    modules_0.reset <= reset
    inst modules_1 of MyCounterTest_1 @[playground/src/exp4/Test.scala 6:41]
    modules_1.clock <= clock
    modules_1.reset <= reset
    inst modules_2 of MyCounterTest_2 @[playground/src/exp4/Test.scala 6:41]
    modules_2.clock <= clock
    modules_2.reset <= reset
    inst modules_3 of MyCounterTest_3 @[playground/src/exp4/Test.scala 6:41]
    modules_3.clock <= clock
    modules_3.reset <= reset
    inst modules_4 of MyCounter2Test @[playground/src/exp4/Test.scala 7:42]
    modules_4.clock <= clock
    modules_4.reset <= reset
    inst modules_5 of MyCounter2Test_1 @[playground/src/exp4/Test.scala 7:42]
    modules_5.clock <= clock
    modules_5.reset <= reset
    inst modules_6 of MyCounter2Test_2 @[playground/src/exp4/Test.scala 7:42]
    modules_6.clock <= clock
    modules_6.reset <= reset
    inst modules_7 of MyCounter2Test_3 @[playground/src/exp4/Test.scala 7:42]
    modules_7.clock <= clock
    modules_7.reset <= reset
    inst modules_8 of MyCounter2Test_4 @[playground/src/exp4/Test.scala 7:42]
    modules_8.clock <= clock
    modules_8.reset <= reset
    inst modules_9 of MyCounter2Test_5 @[playground/src/exp4/Test.scala 7:42]
    modules_9.clock <= clock
    modules_9.reset <= reset
    inst modules_10 of MyCounter2Test_6 @[playground/src/exp4/Test.scala 7:42]
    modules_10.clock <= clock
    modules_10.reset <= reset
    inst modules_11 of MyCounter2Test_7 @[playground/src/exp4/Test.scala 7:42]
    modules_11.clock <= clock
    modules_11.reset <= reset
    inst modules_12 of MyCounter2Test_8 @[playground/src/exp4/Test.scala 7:42]
    modules_12.clock <= clock
    modules_12.reset <= reset
    inst modules_13 of MyCounter2Test_9 @[playground/src/exp4/Test.scala 7:42]
    modules_13.clock <= clock
    modules_13.reset <= reset
    inst modules_14 of MyCounter2Test_10 @[playground/src/exp4/Test.scala 7:42]
    modules_14.clock <= clock
    modules_14.reset <= reset
    inst modules_15 of MyCounter2Test_11 @[playground/src/exp4/Test.scala 7:42]
    modules_15.clock <= clock
    modules_15.reset <= reset
    inst modules_16 of MyCounter2Test_12 @[playground/src/exp4/Test.scala 7:42]
    modules_16.clock <= clock
    modules_16.reset <= reset
    inst modules_17 of MyCounter2Test_13 @[playground/src/exp4/Test.scala 7:42]
    modules_17.clock <= clock
    modules_17.reset <= reset
    inst modules_18 of MyCounter2Test_14 @[playground/src/exp4/Test.scala 7:42]
    modules_18.clock <= clock
    modules_18.reset <= reset
    inst modules_19 of MyCounter2Test_15 @[playground/src/exp4/Test.scala 7:42]
    modules_19.clock <= clock
    modules_19.reset <= reset
    inst modules_20 of HammingTest @[playground/src/exp4/Test.scala 8:41]
    modules_20.clock <= clock
    modules_20.reset <= reset
    inst modules_21 of HammingTest_1 @[playground/src/exp4/Test.scala 8:41]
    modules_21.clock <= clock
    modules_21.reset <= reset
    inst modules_22 of HammingTest_2 @[playground/src/exp4/Test.scala 8:41]
    modules_22.clock <= clock
    modules_22.reset <= reset
    node _finish_T = and(modules_0.finish, modules_1.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_1 = and(_finish_T, modules_2.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_2 = and(_finish_T_1, modules_3.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_3 = and(_finish_T_2, modules_4.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_4 = and(_finish_T_3, modules_5.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_5 = and(_finish_T_4, modules_6.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_6 = and(_finish_T_5, modules_7.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_7 = and(_finish_T_6, modules_8.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_8 = and(_finish_T_7, modules_9.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_9 = and(_finish_T_8, modules_10.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_10 = and(_finish_T_9, modules_11.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_11 = and(_finish_T_10, modules_12.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_12 = and(_finish_T_11, modules_13.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_13 = and(_finish_T_12, modules_14.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_14 = and(_finish_T_13, modules_15.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_15 = and(_finish_T_14, modules_16.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_16 = and(_finish_T_15, modules_17.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_17 = and(_finish_T_16, modules_18.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_18 = and(_finish_T_17, modules_19.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_19 = and(_finish_T_18, modules_20.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_20 = and(_finish_T_19, modules_21.finish) @[playground/src/exp4/Test.scala 9:43]
    node _finish_T_21 = and(_finish_T_20, modules_22.finish) @[playground/src/exp4/Test.scala 9:43]
    finish <= _finish_T_21 @[playground/src/exp4/Test.scala 9:10]
