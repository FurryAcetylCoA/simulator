FIRRTL version 1.2.0
circuit Exp5AllTest :
  module MyReg :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip rs1addr : UInt<1>, flip rs2addr : UInt<1>, flip rdaddr : UInt<1>, flip rddata : UInt<1>, flip wen : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { rs1data : UInt<1>, rs2data : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    mem reg : @[playground/src/exp5/RegAndMem.scala 19:35]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => out_rs1data_MPORT
      reader => out_rs2data_MPORT
      writer => MPORT
      read-under-write => undefined
    reg.out_rs1data_MPORT.addr is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.out_rs1data_MPORT.clk is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.out_rs2data_MPORT.addr is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.out_rs2data_MPORT.clk is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.out_rs1data_MPORT.en <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.out_rs2data_MPORT.en <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.MPORT.addr is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.MPORT.clk is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.MPORT.en <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.MPORT.data is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.MPORT.mask is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    when in.wen : @[playground/src/exp5/RegAndMem.scala 21:17]
      reg.MPORT.addr <= in.rdaddr @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.clk <= clock @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.en <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.mask <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.data <= in.rddata @[playground/src/exp5/RegAndMem.scala 21:34]
      reg.MPORT.mask <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 21:34]
    reg.out_rs1data_MPORT.addr <= in.rs1addr @[playground/src/exp5/RegAndMem.scala 22:21]
    reg.out_rs1data_MPORT.clk <= clock @[playground/src/exp5/RegAndMem.scala 22:21]
    reg.out_rs1data_MPORT.en <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 22:21]
    out.rs1data <= reg.out_rs1data_MPORT.data @[playground/src/exp5/RegAndMem.scala 22:15]
    reg.out_rs2data_MPORT.addr <= in.rs2addr @[playground/src/exp5/RegAndMem.scala 23:21]
    reg.out_rs2data_MPORT.clk <= clock @[playground/src/exp5/RegAndMem.scala 23:21]
    reg.out_rs2data_MPORT.en <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 23:21]
    out.rs2data <= reg.out_rs2data_MPORT.data @[playground/src/exp5/RegAndMem.scala 23:15]
    wire _ref_WIRE : UInt<1>[2] @[playground/src/exp5/RegAndMem.scala 25:28]
    _ref_WIRE[0] <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 25:28]
    _ref_WIRE[1] <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 25:28]
    reg ref : UInt<1>[2], clock with :
      reset => (reset, _ref_WIRE) @[playground/src/exp5/RegAndMem.scala 25:20]
    when in.wen : @[playground/src/exp5/RegAndMem.scala 26:17]
      ref[in.rdaddr] <= in.rddata @[playground/src/exp5/RegAndMem.scala 26:34]
    wire _valid_WIRE : UInt<1>[2] @[playground/src/exp5/RegAndMem.scala 29:30]
    _valid_WIRE[0] <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 29:30]
    _valid_WIRE[1] <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 29:30]
    reg valid : UInt<1>[2], clock with :
      reset => (reset, _valid_WIRE) @[playground/src/exp5/RegAndMem.scala 29:22]
    when in.wen : @[playground/src/exp5/RegAndMem.scala 30:17]
      valid[in.rdaddr] <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 30:36]
    node conflict_rs1 = eq(in.rs1addr, in.rdaddr) @[playground/src/exp5/RegAndMem.scala 31:33]
    node conflict_rs2 = eq(in.rs2addr, in.rdaddr) @[playground/src/exp5/RegAndMem.scala 32:33]
    node _T = eq(valid[in.rs1addr], UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 35:10]
    node _T_1 = eq(ref[in.rs1addr], out.rs1data) @[playground/src/exp5/RegAndMem.scala 35:37]
    node _T_2 = or(_T, _T_1) @[playground/src/exp5/RegAndMem.scala 35:21]
    node _T_3 = asUInt(reset) @[playground/src/exp5/RegAndMem.scala 35:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 35:9]
    when _T_4 : @[playground/src/exp5/RegAndMem.scala 35:9]
      node _T_5 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 35:9]
      when _T_5 : @[playground/src/exp5/RegAndMem.scala 35:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegAndMem.scala:35 assert(!rs1dataOK || (ref_rs1data === out.rs1data))\n") : printf @[playground/src/exp5/RegAndMem.scala 35:9]
      assert(clock, _T_2, UInt<1>("h1"), "") : assert @[playground/src/exp5/RegAndMem.scala 35:9]
    node _T_6 = eq(valid[in.rs2addr], UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 36:10]
    node _T_7 = eq(ref[in.rs2addr], out.rs2data) @[playground/src/exp5/RegAndMem.scala 36:37]
    node _T_8 = or(_T_6, _T_7) @[playground/src/exp5/RegAndMem.scala 36:21]
    node _T_9 = asUInt(reset) @[playground/src/exp5/RegAndMem.scala 36:9]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 36:9]
    when _T_10 : @[playground/src/exp5/RegAndMem.scala 36:9]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 36:9]
      when _T_11 : @[playground/src/exp5/RegAndMem.scala 36:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegAndMem.scala:36 assert(!rs2dataOK || (ref_rs2data === out.rs2data))\n") : printf_1 @[playground/src/exp5/RegAndMem.scala 36:9]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_1 @[playground/src/exp5/RegAndMem.scala 36:9]


  module MyRegTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyReg @[playground/src/exp5/RegAndMem.scala 41:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<2>("h2")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<15>("h7fff"), UInt<15>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip rs1addr : UInt<1>, flip rs2addr : UInt<1>, flip rdaddr : UInt<1>, flip rddata : UInt<1>, flip wen : UInt<1>}[3] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<15> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].wen <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rddata <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rdaddr <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rs2addr <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rs1addr <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].wen <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rddata <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rdaddr <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rs2addr <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rs1addr <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].wen <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rddata <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_12 = bits(_allStepIn_WIRE, 12, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rdaddr <= _allStepIn_T_12 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_13 = bits(_allStepIn_WIRE, 13, 13) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rs2addr <= _allStepIn_T_13 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_14 = bits(_allStepIn_WIRE, 14, 14) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rs1addr <= _allStepIn_T_14 @[playground/src/utils/Utils.scala 39:35]
    m.in.wen <= allStepIn[step].wen @[playground/src/utils/Utils.scala 40:12]
    m.in.rddata <= allStepIn[step].rddata @[playground/src/utils/Utils.scala 40:12]
    m.in.rdaddr <= allStepIn[step].rdaddr @[playground/src/utils/Utils.scala 40:12]
    m.in.rs2addr <= allStepIn[step].rs2addr @[playground/src/utils/Utils.scala 40:12]
    m.in.rs1addr <= allStepIn[step].rs1addr @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for RegFile-2x1bit, may finish after 131072 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: RegFile-2x1bit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyReg_1 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip rs1addr : UInt<1>, flip rs2addr : UInt<1>, flip rdaddr : UInt<1>, flip rddata : UInt<2>, flip wen : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { rs1data : UInt<2>, rs2data : UInt<2>} @[playground/src/utils/Utils.scala 28:15]

    mem reg : @[playground/src/exp5/RegAndMem.scala 19:35]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => out_rs1data_MPORT
      reader => out_rs2data_MPORT
      writer => MPORT
      read-under-write => undefined
    reg.out_rs1data_MPORT.addr is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.out_rs1data_MPORT.clk is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.out_rs2data_MPORT.addr is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.out_rs2data_MPORT.clk is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.out_rs1data_MPORT.en <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.out_rs2data_MPORT.en <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.MPORT.addr is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.MPORT.clk is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.MPORT.en <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.MPORT.data is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    reg.MPORT.mask is invalid @[playground/src/exp5/RegAndMem.scala 19:35]
    when in.wen : @[playground/src/exp5/RegAndMem.scala 21:17]
      reg.MPORT.addr <= in.rdaddr @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.clk <= clock @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.en <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.mask <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.data <= in.rddata @[playground/src/exp5/RegAndMem.scala 21:34]
      reg.MPORT.mask <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 21:34]
    reg.out_rs1data_MPORT.addr <= in.rs1addr @[playground/src/exp5/RegAndMem.scala 22:21]
    reg.out_rs1data_MPORT.clk <= clock @[playground/src/exp5/RegAndMem.scala 22:21]
    reg.out_rs1data_MPORT.en <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 22:21]
    out.rs1data <= reg.out_rs1data_MPORT.data @[playground/src/exp5/RegAndMem.scala 22:15]
    reg.out_rs2data_MPORT.addr <= in.rs2addr @[playground/src/exp5/RegAndMem.scala 23:21]
    reg.out_rs2data_MPORT.clk <= clock @[playground/src/exp5/RegAndMem.scala 23:21]
    reg.out_rs2data_MPORT.en <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 23:21]
    out.rs2data <= reg.out_rs2data_MPORT.data @[playground/src/exp5/RegAndMem.scala 23:15]
    wire _ref_WIRE : UInt<2>[2] @[playground/src/exp5/RegAndMem.scala 25:28]
    _ref_WIRE[0] <= UInt<2>("h0") @[playground/src/exp5/RegAndMem.scala 25:28]
    _ref_WIRE[1] <= UInt<2>("h0") @[playground/src/exp5/RegAndMem.scala 25:28]
    reg ref : UInt<2>[2], clock with :
      reset => (reset, _ref_WIRE) @[playground/src/exp5/RegAndMem.scala 25:20]
    when in.wen : @[playground/src/exp5/RegAndMem.scala 26:17]
      ref[in.rdaddr] <= in.rddata @[playground/src/exp5/RegAndMem.scala 26:34]
    wire _valid_WIRE : UInt<1>[2] @[playground/src/exp5/RegAndMem.scala 29:30]
    _valid_WIRE[0] <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 29:30]
    _valid_WIRE[1] <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 29:30]
    reg valid : UInt<1>[2], clock with :
      reset => (reset, _valid_WIRE) @[playground/src/exp5/RegAndMem.scala 29:22]
    when in.wen : @[playground/src/exp5/RegAndMem.scala 30:17]
      valid[in.rdaddr] <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 30:36]
    node conflict_rs1 = eq(in.rs1addr, in.rdaddr) @[playground/src/exp5/RegAndMem.scala 31:33]
    node conflict_rs2 = eq(in.rs2addr, in.rdaddr) @[playground/src/exp5/RegAndMem.scala 32:33]
    node _T = eq(valid[in.rs1addr], UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 35:10]
    node _T_1 = eq(ref[in.rs1addr], out.rs1data) @[playground/src/exp5/RegAndMem.scala 35:37]
    node _T_2 = or(_T, _T_1) @[playground/src/exp5/RegAndMem.scala 35:21]
    node _T_3 = asUInt(reset) @[playground/src/exp5/RegAndMem.scala 35:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 35:9]
    when _T_4 : @[playground/src/exp5/RegAndMem.scala 35:9]
      node _T_5 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 35:9]
      when _T_5 : @[playground/src/exp5/RegAndMem.scala 35:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegAndMem.scala:35 assert(!rs1dataOK || (ref_rs1data === out.rs1data))\n") : printf @[playground/src/exp5/RegAndMem.scala 35:9]
      assert(clock, _T_2, UInt<1>("h1"), "") : assert @[playground/src/exp5/RegAndMem.scala 35:9]
    node _T_6 = eq(valid[in.rs2addr], UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 36:10]
    node _T_7 = eq(ref[in.rs2addr], out.rs2data) @[playground/src/exp5/RegAndMem.scala 36:37]
    node _T_8 = or(_T_6, _T_7) @[playground/src/exp5/RegAndMem.scala 36:21]
    node _T_9 = asUInt(reset) @[playground/src/exp5/RegAndMem.scala 36:9]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 36:9]
    when _T_10 : @[playground/src/exp5/RegAndMem.scala 36:9]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 36:9]
      when _T_11 : @[playground/src/exp5/RegAndMem.scala 36:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegAndMem.scala:36 assert(!rs2dataOK || (ref_rs2data === out.rs2data))\n") : printf_1 @[playground/src/exp5/RegAndMem.scala 36:9]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_1 @[playground/src/exp5/RegAndMem.scala 36:9]


  module MyRegTest_1 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyReg_1 @[playground/src/exp5/RegAndMem.scala 41:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<2>("h2")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<18>, clock with :
      reset => (reset, UInt<18>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<18>("h3ffff"), UInt<18>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip rs1addr : UInt<1>, flip rs2addr : UInt<1>, flip rdaddr : UInt<1>, flip rddata : UInt<2>, flip wen : UInt<1>}[3] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<18> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].wen <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 2, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rddata <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rdaddr <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rs2addr <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rs1addr <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].wen <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 8, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rddata <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rdaddr <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rs2addr <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rs1addr <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 12, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].wen <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 14, 13) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rddata <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_12 = bits(_allStepIn_WIRE, 15, 15) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rdaddr <= _allStepIn_T_12 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_13 = bits(_allStepIn_WIRE, 16, 16) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rs2addr <= _allStepIn_T_13 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_14 = bits(_allStepIn_WIRE, 17, 17) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rs1addr <= _allStepIn_T_14 @[playground/src/utils/Utils.scala 39:35]
    m.in.wen <= allStepIn[step].wen @[playground/src/utils/Utils.scala 40:12]
    m.in.rddata <= allStepIn[step].rddata @[playground/src/utils/Utils.scala 40:12]
    m.in.rdaddr <= allStepIn[step].rdaddr @[playground/src/utils/Utils.scala 40:12]
    m.in.rs2addr <= allStepIn[step].rs2addr @[playground/src/utils/Utils.scala 40:12]
    m.in.rs1addr <= allStepIn[step].rs1addr @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for RegFile-2x2bit, may finish after 1048576 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: RegFile-2x2bit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyMem :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip rs1addr : UInt<1>, flip rs2addr : UInt<1>, flip rdaddr : UInt<1>, flip rddata : UInt<1>, flip wen : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { rs1data : UInt<1>, rs2data : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    mem reg : @[playground/src/exp5/RegAndMem.scala 20:29]
      data-type => UInt<1>
      depth => 2
      read-latency => 1
      write-latency => 1
      reader => out_rs1data_MPORT
      reader => out_rs2data_MPORT
      writer => MPORT
      read-under-write => undefined
    reg.out_rs1data_MPORT.addr is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.out_rs1data_MPORT.clk is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.out_rs2data_MPORT.addr is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.out_rs2data_MPORT.clk is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.out_rs1data_MPORT.en <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.out_rs2data_MPORT.en <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.MPORT.addr is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.MPORT.clk is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.MPORT.en <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.MPORT.data is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.MPORT.mask is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    when in.wen : @[playground/src/exp5/RegAndMem.scala 21:17]
      reg.MPORT.addr <= in.rdaddr @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.clk <= clock @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.en <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.mask <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.data <= in.rddata @[playground/src/exp5/RegAndMem.scala 21:34]
      reg.MPORT.mask <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 21:34]
    reg.out_rs1data_MPORT.addr <= in.rs1addr @[playground/src/exp5/RegAndMem.scala 22:21]
    reg.out_rs1data_MPORT.clk <= clock @[playground/src/exp5/RegAndMem.scala 22:21]
    reg.out_rs1data_MPORT.en <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 22:21]
    out.rs1data <= reg.out_rs1data_MPORT.data @[playground/src/exp5/RegAndMem.scala 22:15]
    reg.out_rs2data_MPORT.addr <= in.rs2addr @[playground/src/exp5/RegAndMem.scala 23:21]
    reg.out_rs2data_MPORT.clk <= clock @[playground/src/exp5/RegAndMem.scala 23:21]
    reg.out_rs2data_MPORT.en <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 23:21]
    out.rs2data <= reg.out_rs2data_MPORT.data @[playground/src/exp5/RegAndMem.scala 23:15]
    wire _ref_WIRE : UInt<1>[2] @[playground/src/exp5/RegAndMem.scala 25:28]
    _ref_WIRE[0] <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 25:28]
    _ref_WIRE[1] <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 25:28]
    reg ref : UInt<1>[2], clock with :
      reset => (reset, _ref_WIRE) @[playground/src/exp5/RegAndMem.scala 25:20]
    when in.wen : @[playground/src/exp5/RegAndMem.scala 26:17]
      ref[in.rdaddr] <= in.rddata @[playground/src/exp5/RegAndMem.scala 26:34]
    reg ref_rs1data : UInt<1>, clock with :
      reset => (UInt<1>("h0"), ref_rs1data) @[playground/src/exp5/RegAndMem.scala 27:68]
    ref_rs1data <= ref[in.rs1addr] @[playground/src/exp5/RegAndMem.scala 27:68]
    reg ref_rs2data : UInt<1>, clock with :
      reset => (UInt<1>("h0"), ref_rs2data) @[playground/src/exp5/RegAndMem.scala 28:68]
    ref_rs2data <= ref[in.rs2addr] @[playground/src/exp5/RegAndMem.scala 28:68]
    wire _valid_WIRE : UInt<1>[2] @[playground/src/exp5/RegAndMem.scala 29:30]
    _valid_WIRE[0] <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 29:30]
    _valid_WIRE[1] <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 29:30]
    reg valid : UInt<1>[2], clock with :
      reset => (reset, _valid_WIRE) @[playground/src/exp5/RegAndMem.scala 29:22]
    when in.wen : @[playground/src/exp5/RegAndMem.scala 30:17]
      valid[in.rdaddr] <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 30:36]
    node conflict_rs1 = eq(in.rs1addr, in.rdaddr) @[playground/src/exp5/RegAndMem.scala 31:33]
    node conflict_rs2 = eq(in.rs2addr, in.rdaddr) @[playground/src/exp5/RegAndMem.scala 32:33]
    node _rs1dataOK_T = eq(conflict_rs1, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 33:90]
    node _rs1dataOK_T_1 = and(valid[in.rs1addr], _rs1dataOK_T) @[playground/src/exp5/RegAndMem.scala 33:88]
    reg rs1dataOK : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 33:69]
    rs1dataOK <= _rs1dataOK_T_1 @[playground/src/exp5/RegAndMem.scala 33:69]
    node _rs2dataOK_T = eq(conflict_rs2, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 34:90]
    node _rs2dataOK_T_1 = and(valid[in.rs2addr], _rs2dataOK_T) @[playground/src/exp5/RegAndMem.scala 34:88]
    reg rs2dataOK : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 34:69]
    rs2dataOK <= _rs2dataOK_T_1 @[playground/src/exp5/RegAndMem.scala 34:69]
    node _T = eq(rs1dataOK, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 35:10]
    node _T_1 = eq(ref_rs1data, out.rs1data) @[playground/src/exp5/RegAndMem.scala 35:37]
    node _T_2 = or(_T, _T_1) @[playground/src/exp5/RegAndMem.scala 35:21]
    node _T_3 = asUInt(reset) @[playground/src/exp5/RegAndMem.scala 35:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 35:9]
    when _T_4 : @[playground/src/exp5/RegAndMem.scala 35:9]
      node _T_5 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 35:9]
      when _T_5 : @[playground/src/exp5/RegAndMem.scala 35:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegAndMem.scala:35 assert(!rs1dataOK || (ref_rs1data === out.rs1data))\n") : printf @[playground/src/exp5/RegAndMem.scala 35:9]
      assert(clock, _T_2, UInt<1>("h1"), "") : assert @[playground/src/exp5/RegAndMem.scala 35:9]
    node _T_6 = eq(rs2dataOK, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 36:10]
    node _T_7 = eq(ref_rs2data, out.rs2data) @[playground/src/exp5/RegAndMem.scala 36:37]
    node _T_8 = or(_T_6, _T_7) @[playground/src/exp5/RegAndMem.scala 36:21]
    node _T_9 = asUInt(reset) @[playground/src/exp5/RegAndMem.scala 36:9]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 36:9]
    when _T_10 : @[playground/src/exp5/RegAndMem.scala 36:9]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 36:9]
      when _T_11 : @[playground/src/exp5/RegAndMem.scala 36:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegAndMem.scala:36 assert(!rs2dataOK || (ref_rs2data === out.rs2data))\n") : printf_1 @[playground/src/exp5/RegAndMem.scala 36:9]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_1 @[playground/src/exp5/RegAndMem.scala 36:9]


  module MyMemTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyMem @[playground/src/exp5/RegAndMem.scala 47:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<2>("h2")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<15>("h7fff"), UInt<15>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip rs1addr : UInt<1>, flip rs2addr : UInt<1>, flip rdaddr : UInt<1>, flip rddata : UInt<1>, flip wen : UInt<1>}[3] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<15> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].wen <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 1, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rddata <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 2, 2) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rdaddr <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rs2addr <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rs1addr <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].wen <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rddata <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 7, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rdaddr <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 8, 8) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rs2addr <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rs1addr <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].wen <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rddata <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_12 = bits(_allStepIn_WIRE, 12, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rdaddr <= _allStepIn_T_12 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_13 = bits(_allStepIn_WIRE, 13, 13) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rs2addr <= _allStepIn_T_13 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_14 = bits(_allStepIn_WIRE, 14, 14) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rs1addr <= _allStepIn_T_14 @[playground/src/utils/Utils.scala 39:35]
    m.in.wen <= allStepIn[step].wen @[playground/src/utils/Utils.scala 40:12]
    m.in.rddata <= allStepIn[step].rddata @[playground/src/utils/Utils.scala 40:12]
    m.in.rdaddr <= allStepIn[step].rdaddr @[playground/src/utils/Utils.scala 40:12]
    m.in.rs2addr <= allStepIn[step].rs2addr @[playground/src/utils/Utils.scala 40:12]
    m.in.rs1addr <= allStepIn[step].rs1addr @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Memory-2x1bit, may finish after 131072 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Memory-2x1bit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module MyMem_1 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip rs1addr : UInt<1>, flip rs2addr : UInt<1>, flip rdaddr : UInt<1>, flip rddata : UInt<2>, flip wen : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { rs1data : UInt<2>, rs2data : UInt<2>} @[playground/src/utils/Utils.scala 28:15]

    mem reg : @[playground/src/exp5/RegAndMem.scala 20:29]
      data-type => UInt<2>
      depth => 2
      read-latency => 1
      write-latency => 1
      reader => out_rs1data_MPORT
      reader => out_rs2data_MPORT
      writer => MPORT
      read-under-write => undefined
    reg.out_rs1data_MPORT.addr is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.out_rs1data_MPORT.clk is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.out_rs2data_MPORT.addr is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.out_rs2data_MPORT.clk is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.out_rs1data_MPORT.en <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.out_rs2data_MPORT.en <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.MPORT.addr is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.MPORT.clk is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.MPORT.en <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.MPORT.data is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    reg.MPORT.mask is invalid @[playground/src/exp5/RegAndMem.scala 20:29]
    when in.wen : @[playground/src/exp5/RegAndMem.scala 21:17]
      reg.MPORT.addr <= in.rdaddr @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.clk <= clock @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.en <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.mask <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 21:22]
      reg.MPORT.data <= in.rddata @[playground/src/exp5/RegAndMem.scala 21:34]
      reg.MPORT.mask <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 21:34]
    reg.out_rs1data_MPORT.addr <= in.rs1addr @[playground/src/exp5/RegAndMem.scala 22:21]
    reg.out_rs1data_MPORT.clk <= clock @[playground/src/exp5/RegAndMem.scala 22:21]
    reg.out_rs1data_MPORT.en <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 22:21]
    out.rs1data <= reg.out_rs1data_MPORT.data @[playground/src/exp5/RegAndMem.scala 22:15]
    reg.out_rs2data_MPORT.addr <= in.rs2addr @[playground/src/exp5/RegAndMem.scala 23:21]
    reg.out_rs2data_MPORT.clk <= clock @[playground/src/exp5/RegAndMem.scala 23:21]
    reg.out_rs2data_MPORT.en <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 23:21]
    out.rs2data <= reg.out_rs2data_MPORT.data @[playground/src/exp5/RegAndMem.scala 23:15]
    wire _ref_WIRE : UInt<2>[2] @[playground/src/exp5/RegAndMem.scala 25:28]
    _ref_WIRE[0] <= UInt<2>("h0") @[playground/src/exp5/RegAndMem.scala 25:28]
    _ref_WIRE[1] <= UInt<2>("h0") @[playground/src/exp5/RegAndMem.scala 25:28]
    reg ref : UInt<2>[2], clock with :
      reset => (reset, _ref_WIRE) @[playground/src/exp5/RegAndMem.scala 25:20]
    when in.wen : @[playground/src/exp5/RegAndMem.scala 26:17]
      ref[in.rdaddr] <= in.rddata @[playground/src/exp5/RegAndMem.scala 26:34]
    reg ref_rs1data : UInt<2>, clock with :
      reset => (UInt<1>("h0"), ref_rs1data) @[playground/src/exp5/RegAndMem.scala 27:68]
    ref_rs1data <= ref[in.rs1addr] @[playground/src/exp5/RegAndMem.scala 27:68]
    reg ref_rs2data : UInt<2>, clock with :
      reset => (UInt<1>("h0"), ref_rs2data) @[playground/src/exp5/RegAndMem.scala 28:68]
    ref_rs2data <= ref[in.rs2addr] @[playground/src/exp5/RegAndMem.scala 28:68]
    wire _valid_WIRE : UInt<1>[2] @[playground/src/exp5/RegAndMem.scala 29:30]
    _valid_WIRE[0] <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 29:30]
    _valid_WIRE[1] <= UInt<1>("h0") @[playground/src/exp5/RegAndMem.scala 29:30]
    reg valid : UInt<1>[2], clock with :
      reset => (reset, _valid_WIRE) @[playground/src/exp5/RegAndMem.scala 29:22]
    when in.wen : @[playground/src/exp5/RegAndMem.scala 30:17]
      valid[in.rdaddr] <= UInt<1>("h1") @[playground/src/exp5/RegAndMem.scala 30:36]
    node conflict_rs1 = eq(in.rs1addr, in.rdaddr) @[playground/src/exp5/RegAndMem.scala 31:33]
    node conflict_rs2 = eq(in.rs2addr, in.rdaddr) @[playground/src/exp5/RegAndMem.scala 32:33]
    node _rs1dataOK_T = eq(conflict_rs1, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 33:90]
    node _rs1dataOK_T_1 = and(valid[in.rs1addr], _rs1dataOK_T) @[playground/src/exp5/RegAndMem.scala 33:88]
    reg rs1dataOK : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 33:69]
    rs1dataOK <= _rs1dataOK_T_1 @[playground/src/exp5/RegAndMem.scala 33:69]
    node _rs2dataOK_T = eq(conflict_rs2, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 34:90]
    node _rs2dataOK_T_1 = and(valid[in.rs2addr], _rs2dataOK_T) @[playground/src/exp5/RegAndMem.scala 34:88]
    reg rs2dataOK : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 34:69]
    rs2dataOK <= _rs2dataOK_T_1 @[playground/src/exp5/RegAndMem.scala 34:69]
    node _T = eq(rs1dataOK, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 35:10]
    node _T_1 = eq(ref_rs1data, out.rs1data) @[playground/src/exp5/RegAndMem.scala 35:37]
    node _T_2 = or(_T, _T_1) @[playground/src/exp5/RegAndMem.scala 35:21]
    node _T_3 = asUInt(reset) @[playground/src/exp5/RegAndMem.scala 35:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 35:9]
    when _T_4 : @[playground/src/exp5/RegAndMem.scala 35:9]
      node _T_5 = eq(_T_2, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 35:9]
      when _T_5 : @[playground/src/exp5/RegAndMem.scala 35:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegAndMem.scala:35 assert(!rs1dataOK || (ref_rs1data === out.rs1data))\n") : printf @[playground/src/exp5/RegAndMem.scala 35:9]
      assert(clock, _T_2, UInt<1>("h1"), "") : assert @[playground/src/exp5/RegAndMem.scala 35:9]
    node _T_6 = eq(rs2dataOK, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 36:10]
    node _T_7 = eq(ref_rs2data, out.rs2data) @[playground/src/exp5/RegAndMem.scala 36:37]
    node _T_8 = or(_T_6, _T_7) @[playground/src/exp5/RegAndMem.scala 36:21]
    node _T_9 = asUInt(reset) @[playground/src/exp5/RegAndMem.scala 36:9]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 36:9]
    when _T_10 : @[playground/src/exp5/RegAndMem.scala 36:9]
      node _T_11 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp5/RegAndMem.scala 36:9]
      when _T_11 : @[playground/src/exp5/RegAndMem.scala 36:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at RegAndMem.scala:36 assert(!rs2dataOK || (ref_rs2data === out.rs2data))\n") : printf_1 @[playground/src/exp5/RegAndMem.scala 36:9]
      assert(clock, _T_8, UInt<1>("h1"), "") : assert_1 @[playground/src/exp5/RegAndMem.scala 36:9]


  module MyMemTest_1 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of MyMem_1 @[playground/src/exp5/RegAndMem.scala 47:17]
    m.clock <= clock
    m.reset <= reset
    node _T = asUInt(m.reset) @[playground/src/utils/Utils.scala 37:47]
    node _T_1 = eq(_T, UInt<1>("h0")) @[playground/src/utils/Utils.scala 37:38]
    reg step : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[src/main/scala/chisel3/util/Counter.scala 61:40]
    wire stepWrap : UInt<1> @[src/main/scala/chisel3/util/Counter.scala 117:24]
    stepWrap <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 117:24]
    when _T_1 : @[src/main/scala/chisel3/util/Counter.scala 118:16]
      node wrap_wrap = eq(step, UInt<2>("h2")) @[src/main/scala/chisel3/util/Counter.scala 73:24]
      node _wrap_value_T = add(step, UInt<1>("h1")) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[src/main/scala/chisel3/util/Counter.scala 77:24]
      step <= _wrap_value_T_1 @[src/main/scala/chisel3/util/Counter.scala 77:15]
      when wrap_wrap : @[src/main/scala/chisel3/util/Counter.scala 87:20]
        step <= UInt<1>("h0") @[src/main/scala/chisel3/util/Counter.scala 87:28]
      stepWrap <= wrap_wrap @[src/main/scala/chisel3/util/Counter.scala 118:23]
    node _T_2 = asUInt(m.reset) @[playground/src/utils/Utils.scala 38:92]
    reg cnt : UInt<18>, clock with :
      reset => (reset, UInt<18>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when _T_2 : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<18>("h3ffff"), UInt<18>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap_1 = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T_2 = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_3 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap_1 @[playground/src/utils/WCounter.scala 33:23]
    wire allStepIn : { flip rs1addr : UInt<1>, flip rs2addr : UInt<1>, flip rdaddr : UInt<1>, flip rddata : UInt<2>, flip wen : UInt<1>}[3] @[playground/src/utils/Utils.scala 39:35]
    wire _allStepIn_WIRE : UInt<18> @[playground/src/utils/Utils.scala 39:35]
    _allStepIn_WIRE <= cnt @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T = bits(_allStepIn_WIRE, 0, 0) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].wen <= _allStepIn_T @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_1 = bits(_allStepIn_WIRE, 2, 1) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rddata <= _allStepIn_T_1 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_2 = bits(_allStepIn_WIRE, 3, 3) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rdaddr <= _allStepIn_T_2 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_3 = bits(_allStepIn_WIRE, 4, 4) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rs2addr <= _allStepIn_T_3 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_4 = bits(_allStepIn_WIRE, 5, 5) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[0].rs1addr <= _allStepIn_T_4 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_5 = bits(_allStepIn_WIRE, 6, 6) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].wen <= _allStepIn_T_5 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_6 = bits(_allStepIn_WIRE, 8, 7) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rddata <= _allStepIn_T_6 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_7 = bits(_allStepIn_WIRE, 9, 9) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rdaddr <= _allStepIn_T_7 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_8 = bits(_allStepIn_WIRE, 10, 10) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rs2addr <= _allStepIn_T_8 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_9 = bits(_allStepIn_WIRE, 11, 11) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[1].rs1addr <= _allStepIn_T_9 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_10 = bits(_allStepIn_WIRE, 12, 12) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].wen <= _allStepIn_T_10 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_11 = bits(_allStepIn_WIRE, 14, 13) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rddata <= _allStepIn_T_11 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_12 = bits(_allStepIn_WIRE, 15, 15) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rdaddr <= _allStepIn_T_12 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_13 = bits(_allStepIn_WIRE, 16, 16) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rs2addr <= _allStepIn_T_13 @[playground/src/utils/Utils.scala 39:35]
    node _allStepIn_T_14 = bits(_allStepIn_WIRE, 17, 17) @[playground/src/utils/Utils.scala 39:35]
    allStepIn[2].rs1addr <= _allStepIn_T_14 @[playground/src/utils/Utils.scala 39:35]
    m.in.wen <= allStepIn[step].wen @[playground/src/utils/Utils.scala 40:12]
    m.in.rddata <= allStepIn[step].rddata @[playground/src/utils/Utils.scala 40:12]
    m.in.rdaddr <= allStepIn[step].rdaddr @[playground/src/utils/Utils.scala 40:12]
    m.in.rs2addr <= allStepIn[step].rs2addr @[playground/src/utils/Utils.scala 40:12]
    m.in.rs1addr <= allStepIn[step].rs1addr @[playground/src/utils/Utils.scala 40:12]
    reg m_reset_REG : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 41:25]
    m_reset_REG <= stepWrap @[playground/src/utils/Utils.scala 41:25]
    node _m_reset_T = asUInt(reset) @[playground/src/utils/Utils.scala 41:56]
    node _m_reset_T_1 = or(m_reset_REG, _m_reset_T) @[playground/src/utils/Utils.scala 41:45]
    m.reset <= _m_reset_T_1 @[playground/src/utils/Utils.scala 41:15]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T_3 = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_4 = and(start, _T_3) @[playground/src/utils/Utils.scala 48:17]
    when _T_4 : @[playground/src/utils/Utils.scala 48:37]
      node _T_5 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_6 = eq(_T_5, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_6 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for Memory-2x2bit, may finish after 1048576 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_7 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_8 = and(_T_7, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_8 : @[playground/src/utils/Utils.scala 52:32]
      node _T_9 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_10 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_11 = eq(_T_10, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_11 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: Memory-2x2bit\n", _T_9) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module CLZ :
    input clock : Clock
    input reset : UInt<1>
    input in : UInt<2> @[playground/src/utils/Utils.scala 27:14]
    output out : { out : UInt<1>, zero : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_zero_T = eq(in, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 24:19]
    out.zero <= _out_zero_T @[playground/src/exp5/CLZ.scala 24:12]
    node out_out_l = bits(in, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r = bits(in, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T = eq(out_out_l, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_1 = not(out_out_r) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_2 = or(_out_out_T_1, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_3 = not(out_out_l) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_4 = mux(_out_out_T, _out_out_T_2, _out_out_T_3) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_5 = mux(out.zero, UInt<1>("h1"), _out_out_T_4) @[playground/src/exp5/CLZ.scala 25:17]
    out.out <= _out_out_T_5 @[playground/src/exp5/CLZ.scala 25:11]
    node _ref_out_T = bits(in, 0, 0) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_1 = bits(in, 1, 1) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_2 = cat(_ref_out_T, _ref_out_T_1) @[playground/src/exp5/CLZ.scala 27:36]
    node _ref_out_T_3 = bits(_ref_out_T_2, 0, 0) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_4 = bits(_ref_out_T_2, 1, 1) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node ref_out = mux(_ref_out_T_3, UInt<1>("h0"), UInt<1>("h1")) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _T = eq(ref_out, out.out) @[playground/src/exp5/CLZ.scala 28:18]
    node _T_1 = asUInt(reset) @[playground/src/exp5/CLZ.scala 28:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 28:9]
    when _T_2 : @[playground/src/exp5/CLZ.scala 28:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 28:9]
      when _T_3 : @[playground/src/exp5/CLZ.scala 28:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: in = %b, ref = %d, dut = %d\n    at CLZ.scala:28 assert(ref_out === out.out, \"in = %%%%b, ref = %%%%d, dut = %%%%d\", in, ref_out, out.out)\n", in, ref_out, out.out) : printf @[playground/src/exp5/CLZ.scala 28:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp5/CLZ.scala 28:9]


  module CLZTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of CLZ @[playground/src/exp5/CLZ.scala 32:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<2>("h3"), UInt<2>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : UInt<2> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE <= cnt @[playground/src/utils/Utils.scala 33:27]
    m.in <= _m_in_WIRE @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for CLZ-1bit, may finish after 4 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: CLZ-1bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module CLZ_1 :
    input clock : Clock
    input reset : UInt<1>
    input in : UInt<4> @[playground/src/utils/Utils.scala 27:14]
    output out : { out : UInt<2>, zero : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_zero_T = eq(in, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 24:19]
    out.zero <= _out_zero_T @[playground/src/exp5/CLZ.scala 24:12]
    node _out_out_T = mux(UInt<1>("h1"), UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp5/CLZ.scala 25:32]
    node out_out_l = bits(in, 3, 2) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r = bits(in, 1, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_1 = eq(out_out_l, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node out_out_l_1 = bits(out_out_r, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_1 = bits(out_out_r, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_2 = eq(out_out_l_1, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_3 = not(out_out_r_1) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_4 = or(_out_out_T_3, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_5 = not(out_out_l_1) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_6 = mux(_out_out_T_2, _out_out_T_4, _out_out_T_5) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_7 = or(_out_out_T_6, UInt<2>("h2")) @[playground/src/exp5/CLZ.scala 20:31]
    node out_out_l_2 = bits(out_out_l, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_2 = bits(out_out_l, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_8 = eq(out_out_l_2, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_9 = not(out_out_r_2) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_10 = or(_out_out_T_9, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_11 = not(out_out_l_2) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_12 = mux(_out_out_T_8, _out_out_T_10, _out_out_T_11) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_13 = mux(_out_out_T_1, _out_out_T_7, _out_out_T_12) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_14 = mux(out.zero, _out_out_T, _out_out_T_13) @[playground/src/exp5/CLZ.scala 25:17]
    out.out <= _out_out_T_14 @[playground/src/exp5/CLZ.scala 25:11]
    node _ref_out_T = bits(in, 0, 0) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_1 = bits(in, 1, 1) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_2 = bits(in, 2, 2) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_3 = bits(in, 3, 3) @[playground/src/exp5/CLZ.scala 27:40]
    node ref_out_lo = cat(_ref_out_T_2, _ref_out_T_3) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_hi = cat(_ref_out_T, _ref_out_T_1) @[playground/src/exp5/CLZ.scala 27:36]
    node _ref_out_T_4 = cat(ref_out_hi, ref_out_lo) @[playground/src/exp5/CLZ.scala 27:36]
    node _ref_out_T_5 = bits(_ref_out_T_4, 0, 0) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_6 = bits(_ref_out_T_4, 1, 1) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_7 = bits(_ref_out_T_4, 2, 2) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_8 = bits(_ref_out_T_4, 3, 3) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_9 = mux(_ref_out_T_7, UInt<2>("h2"), UInt<2>("h3")) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_10 = mux(_ref_out_T_6, UInt<1>("h1"), _ref_out_T_9) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node ref_out = mux(_ref_out_T_5, UInt<1>("h0"), _ref_out_T_10) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _T = eq(ref_out, out.out) @[playground/src/exp5/CLZ.scala 28:18]
    node _T_1 = asUInt(reset) @[playground/src/exp5/CLZ.scala 28:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 28:9]
    when _T_2 : @[playground/src/exp5/CLZ.scala 28:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 28:9]
      when _T_3 : @[playground/src/exp5/CLZ.scala 28:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: in = %b, ref = %d, dut = %d\n    at CLZ.scala:28 assert(ref_out === out.out, \"in = %%%%b, ref = %%%%d, dut = %%%%d\", in, ref_out, out.out)\n", in, ref_out, out.out) : printf @[playground/src/exp5/CLZ.scala 28:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp5/CLZ.scala 28:9]


  module CLZTest_1 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of CLZ_1 @[playground/src/exp5/CLZ.scala 32:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : UInt<4> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE <= cnt @[playground/src/utils/Utils.scala 33:27]
    m.in <= _m_in_WIRE @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for CLZ-2bit, may finish after 16 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: CLZ-2bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module CLZ_2 :
    input clock : Clock
    input reset : UInt<1>
    input in : UInt<8> @[playground/src/utils/Utils.scala 27:14]
    output out : { out : UInt<3>, zero : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_zero_T = eq(in, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 24:19]
    out.zero <= _out_zero_T @[playground/src/exp5/CLZ.scala 24:12]
    node _out_out_T = mux(UInt<1>("h1"), UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp5/CLZ.scala 25:32]
    node out_out_l = bits(in, 7, 4) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r = bits(in, 3, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_1 = eq(out_out_l, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node out_out_l_1 = bits(out_out_r, 3, 2) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_1 = bits(out_out_r, 1, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_2 = eq(out_out_l_1, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node out_out_l_2 = bits(out_out_r_1, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_2 = bits(out_out_r_1, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_3 = eq(out_out_l_2, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_4 = not(out_out_r_2) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_5 = or(_out_out_T_4, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_6 = not(out_out_l_2) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_7 = mux(_out_out_T_3, _out_out_T_5, _out_out_T_6) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_8 = or(_out_out_T_7, UInt<2>("h2")) @[playground/src/exp5/CLZ.scala 20:31]
    node out_out_l_3 = bits(out_out_l_1, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_3 = bits(out_out_l_1, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_9 = eq(out_out_l_3, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_10 = not(out_out_r_3) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_11 = or(_out_out_T_10, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_12 = not(out_out_l_3) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_13 = mux(_out_out_T_9, _out_out_T_11, _out_out_T_12) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_14 = mux(_out_out_T_2, _out_out_T_8, _out_out_T_13) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_15 = or(_out_out_T_14, UInt<3>("h4")) @[playground/src/exp5/CLZ.scala 20:31]
    node out_out_l_4 = bits(out_out_l, 3, 2) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_4 = bits(out_out_l, 1, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_16 = eq(out_out_l_4, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node out_out_l_5 = bits(out_out_r_4, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_5 = bits(out_out_r_4, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_17 = eq(out_out_l_5, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_18 = not(out_out_r_5) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_19 = or(_out_out_T_18, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_20 = not(out_out_l_5) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_21 = mux(_out_out_T_17, _out_out_T_19, _out_out_T_20) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_22 = or(_out_out_T_21, UInt<2>("h2")) @[playground/src/exp5/CLZ.scala 20:31]
    node out_out_l_6 = bits(out_out_l_4, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_6 = bits(out_out_l_4, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_23 = eq(out_out_l_6, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_24 = not(out_out_r_6) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_25 = or(_out_out_T_24, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_26 = not(out_out_l_6) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_27 = mux(_out_out_T_23, _out_out_T_25, _out_out_T_26) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_28 = mux(_out_out_T_16, _out_out_T_22, _out_out_T_27) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_29 = mux(_out_out_T_1, _out_out_T_15, _out_out_T_28) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_30 = mux(out.zero, _out_out_T, _out_out_T_29) @[playground/src/exp5/CLZ.scala 25:17]
    out.out <= _out_out_T_30 @[playground/src/exp5/CLZ.scala 25:11]
    node _ref_out_T = bits(in, 0, 0) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_1 = bits(in, 1, 1) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_2 = bits(in, 2, 2) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_3 = bits(in, 3, 3) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_4 = bits(in, 4, 4) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_5 = bits(in, 5, 5) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_6 = bits(in, 6, 6) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_7 = bits(in, 7, 7) @[playground/src/exp5/CLZ.scala 27:40]
    node ref_out_lo_lo = cat(_ref_out_T_6, _ref_out_T_7) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_lo_hi = cat(_ref_out_T_4, _ref_out_T_5) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_lo = cat(ref_out_lo_hi, ref_out_lo_lo) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_hi_lo = cat(_ref_out_T_2, _ref_out_T_3) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_hi_hi = cat(_ref_out_T, _ref_out_T_1) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_hi = cat(ref_out_hi_hi, ref_out_hi_lo) @[playground/src/exp5/CLZ.scala 27:36]
    node _ref_out_T_8 = cat(ref_out_hi, ref_out_lo) @[playground/src/exp5/CLZ.scala 27:36]
    node _ref_out_T_9 = bits(_ref_out_T_8, 0, 0) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_10 = bits(_ref_out_T_8, 1, 1) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_11 = bits(_ref_out_T_8, 2, 2) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_12 = bits(_ref_out_T_8, 3, 3) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_13 = bits(_ref_out_T_8, 4, 4) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_14 = bits(_ref_out_T_8, 5, 5) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_15 = bits(_ref_out_T_8, 6, 6) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_16 = bits(_ref_out_T_8, 7, 7) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_17 = mux(_ref_out_T_15, UInt<3>("h6"), UInt<3>("h7")) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_18 = mux(_ref_out_T_14, UInt<3>("h5"), _ref_out_T_17) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_19 = mux(_ref_out_T_13, UInt<3>("h4"), _ref_out_T_18) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_20 = mux(_ref_out_T_12, UInt<2>("h3"), _ref_out_T_19) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_21 = mux(_ref_out_T_11, UInt<2>("h2"), _ref_out_T_20) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_22 = mux(_ref_out_T_10, UInt<1>("h1"), _ref_out_T_21) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node ref_out = mux(_ref_out_T_9, UInt<1>("h0"), _ref_out_T_22) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _T = eq(ref_out, out.out) @[playground/src/exp5/CLZ.scala 28:18]
    node _T_1 = asUInt(reset) @[playground/src/exp5/CLZ.scala 28:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 28:9]
    when _T_2 : @[playground/src/exp5/CLZ.scala 28:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 28:9]
      when _T_3 : @[playground/src/exp5/CLZ.scala 28:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: in = %b, ref = %d, dut = %d\n    at CLZ.scala:28 assert(ref_out === out.out, \"in = %%%%b, ref = %%%%d, dut = %%%%d\", in, ref_out, out.out)\n", in, ref_out, out.out) : printf @[playground/src/exp5/CLZ.scala 28:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp5/CLZ.scala 28:9]


  module CLZTest_2 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of CLZ_2 @[playground/src/exp5/CLZ.scala 32:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<8>("hff"), UInt<8>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : UInt<8> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE <= cnt @[playground/src/utils/Utils.scala 33:27]
    m.in <= _m_in_WIRE @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for CLZ-3bit, may finish after 256 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: CLZ-3bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module CLZ_3 :
    input clock : Clock
    input reset : UInt<1>
    input in : UInt<16> @[playground/src/utils/Utils.scala 27:14]
    output out : { out : UInt<4>, zero : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _out_zero_T = eq(in, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 24:19]
    out.zero <= _out_zero_T @[playground/src/exp5/CLZ.scala 24:12]
    node _out_out_T = mux(UInt<1>("h1"), UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp5/CLZ.scala 25:32]
    node out_out_l = bits(in, 15, 8) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r = bits(in, 7, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_1 = eq(out_out_l, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node out_out_l_1 = bits(out_out_r, 7, 4) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_1 = bits(out_out_r, 3, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_2 = eq(out_out_l_1, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node out_out_l_2 = bits(out_out_r_1, 3, 2) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_2 = bits(out_out_r_1, 1, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_3 = eq(out_out_l_2, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node out_out_l_3 = bits(out_out_r_2, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_3 = bits(out_out_r_2, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_4 = eq(out_out_l_3, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_5 = not(out_out_r_3) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_6 = or(_out_out_T_5, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_7 = not(out_out_l_3) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_8 = mux(_out_out_T_4, _out_out_T_6, _out_out_T_7) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_9 = or(_out_out_T_8, UInt<2>("h2")) @[playground/src/exp5/CLZ.scala 20:31]
    node out_out_l_4 = bits(out_out_l_2, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_4 = bits(out_out_l_2, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_10 = eq(out_out_l_4, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_11 = not(out_out_r_4) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_12 = or(_out_out_T_11, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_13 = not(out_out_l_4) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_14 = mux(_out_out_T_10, _out_out_T_12, _out_out_T_13) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_15 = mux(_out_out_T_3, _out_out_T_9, _out_out_T_14) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_16 = or(_out_out_T_15, UInt<3>("h4")) @[playground/src/exp5/CLZ.scala 20:31]
    node out_out_l_5 = bits(out_out_l_1, 3, 2) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_5 = bits(out_out_l_1, 1, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_17 = eq(out_out_l_5, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node out_out_l_6 = bits(out_out_r_5, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_6 = bits(out_out_r_5, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_18 = eq(out_out_l_6, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_19 = not(out_out_r_6) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_20 = or(_out_out_T_19, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_21 = not(out_out_l_6) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_22 = mux(_out_out_T_18, _out_out_T_20, _out_out_T_21) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_23 = or(_out_out_T_22, UInt<2>("h2")) @[playground/src/exp5/CLZ.scala 20:31]
    node out_out_l_7 = bits(out_out_l_5, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_7 = bits(out_out_l_5, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_24 = eq(out_out_l_7, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_25 = not(out_out_r_7) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_26 = or(_out_out_T_25, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_27 = not(out_out_l_7) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_28 = mux(_out_out_T_24, _out_out_T_26, _out_out_T_27) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_29 = mux(_out_out_T_17, _out_out_T_23, _out_out_T_28) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_30 = mux(_out_out_T_2, _out_out_T_16, _out_out_T_29) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_31 = or(_out_out_T_30, UInt<4>("h8")) @[playground/src/exp5/CLZ.scala 20:31]
    node out_out_l_8 = bits(out_out_l, 7, 4) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_8 = bits(out_out_l, 3, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_32 = eq(out_out_l_8, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node out_out_l_9 = bits(out_out_r_8, 3, 2) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_9 = bits(out_out_r_8, 1, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_33 = eq(out_out_l_9, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node out_out_l_10 = bits(out_out_r_9, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_10 = bits(out_out_r_9, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_34 = eq(out_out_l_10, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_35 = not(out_out_r_10) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_36 = or(_out_out_T_35, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_37 = not(out_out_l_10) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_38 = mux(_out_out_T_34, _out_out_T_36, _out_out_T_37) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_39 = or(_out_out_T_38, UInt<2>("h2")) @[playground/src/exp5/CLZ.scala 20:31]
    node out_out_l_11 = bits(out_out_l_9, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_11 = bits(out_out_l_9, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_40 = eq(out_out_l_11, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_41 = not(out_out_r_11) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_42 = or(_out_out_T_41, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_43 = not(out_out_l_11) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_44 = mux(_out_out_T_40, _out_out_T_42, _out_out_T_43) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_45 = mux(_out_out_T_33, _out_out_T_39, _out_out_T_44) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_46 = or(_out_out_T_45, UInt<3>("h4")) @[playground/src/exp5/CLZ.scala 20:31]
    node out_out_l_12 = bits(out_out_l_8, 3, 2) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_12 = bits(out_out_l_8, 1, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_47 = eq(out_out_l_12, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node out_out_l_13 = bits(out_out_r_12, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_13 = bits(out_out_r_12, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_48 = eq(out_out_l_13, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_49 = not(out_out_r_13) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_50 = or(_out_out_T_49, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_51 = not(out_out_l_13) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_52 = mux(_out_out_T_48, _out_out_T_50, _out_out_T_51) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_53 = or(_out_out_T_52, UInt<2>("h2")) @[playground/src/exp5/CLZ.scala 20:31]
    node out_out_l_14 = bits(out_out_l_12, 1, 1) @[playground/src/exp5/CLZ.scala 18:18]
    node out_out_r_14 = bits(out_out_l_12, 0, 0) @[playground/src/exp5/CLZ.scala 19:18]
    node _out_out_T_54 = eq(out_out_l_14, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 20:15]
    node _out_out_T_55 = not(out_out_r_14) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_56 = or(_out_out_T_55, UInt<1>("h1")) @[playground/src/exp5/CLZ.scala 20:31]
    node _out_out_T_57 = not(out_out_l_14) @[playground/src/exp5/CLZ.scala 16:17]
    node _out_out_T_58 = mux(_out_out_T_54, _out_out_T_56, _out_out_T_57) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_59 = mux(_out_out_T_47, _out_out_T_53, _out_out_T_58) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_60 = mux(_out_out_T_32, _out_out_T_46, _out_out_T_59) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_61 = mux(_out_out_T_1, _out_out_T_31, _out_out_T_60) @[playground/src/exp5/CLZ.scala 20:12]
    node _out_out_T_62 = mux(out.zero, _out_out_T, _out_out_T_61) @[playground/src/exp5/CLZ.scala 25:17]
    out.out <= _out_out_T_62 @[playground/src/exp5/CLZ.scala 25:11]
    node _ref_out_T = bits(in, 0, 0) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_1 = bits(in, 1, 1) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_2 = bits(in, 2, 2) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_3 = bits(in, 3, 3) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_4 = bits(in, 4, 4) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_5 = bits(in, 5, 5) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_6 = bits(in, 6, 6) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_7 = bits(in, 7, 7) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_8 = bits(in, 8, 8) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_9 = bits(in, 9, 9) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_10 = bits(in, 10, 10) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_11 = bits(in, 11, 11) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_12 = bits(in, 12, 12) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_13 = bits(in, 13, 13) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_14 = bits(in, 14, 14) @[playground/src/exp5/CLZ.scala 27:40]
    node _ref_out_T_15 = bits(in, 15, 15) @[playground/src/exp5/CLZ.scala 27:40]
    node ref_out_lo_lo_lo = cat(_ref_out_T_14, _ref_out_T_15) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_lo_lo_hi = cat(_ref_out_T_12, _ref_out_T_13) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_lo_lo = cat(ref_out_lo_lo_hi, ref_out_lo_lo_lo) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_lo_hi_lo = cat(_ref_out_T_10, _ref_out_T_11) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_lo_hi_hi = cat(_ref_out_T_8, _ref_out_T_9) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_lo_hi = cat(ref_out_lo_hi_hi, ref_out_lo_hi_lo) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_lo = cat(ref_out_lo_hi, ref_out_lo_lo) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_hi_lo_lo = cat(_ref_out_T_6, _ref_out_T_7) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_hi_lo_hi = cat(_ref_out_T_4, _ref_out_T_5) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_hi_lo = cat(ref_out_hi_lo_hi, ref_out_hi_lo_lo) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_hi_hi_lo = cat(_ref_out_T_2, _ref_out_T_3) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_hi_hi_hi = cat(_ref_out_T, _ref_out_T_1) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_hi_hi = cat(ref_out_hi_hi_hi, ref_out_hi_hi_lo) @[playground/src/exp5/CLZ.scala 27:36]
    node ref_out_hi = cat(ref_out_hi_hi, ref_out_hi_lo) @[playground/src/exp5/CLZ.scala 27:36]
    node _ref_out_T_16 = cat(ref_out_hi, ref_out_lo) @[playground/src/exp5/CLZ.scala 27:36]
    node _ref_out_T_17 = bits(_ref_out_T_16, 0, 0) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_18 = bits(_ref_out_T_16, 1, 1) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_19 = bits(_ref_out_T_16, 2, 2) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_20 = bits(_ref_out_T_16, 3, 3) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_21 = bits(_ref_out_T_16, 4, 4) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_22 = bits(_ref_out_T_16, 5, 5) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_23 = bits(_ref_out_T_16, 6, 6) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_24 = bits(_ref_out_T_16, 7, 7) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_25 = bits(_ref_out_T_16, 8, 8) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_26 = bits(_ref_out_T_16, 9, 9) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_27 = bits(_ref_out_T_16, 10, 10) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_28 = bits(_ref_out_T_16, 11, 11) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_29 = bits(_ref_out_T_16, 12, 12) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_30 = bits(_ref_out_T_16, 13, 13) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_31 = bits(_ref_out_T_16, 14, 14) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_32 = bits(_ref_out_T_16, 15, 15) @[src/main/scala/chisel3/util/OneHot.scala 48:45]
    node _ref_out_T_33 = mux(_ref_out_T_31, UInt<4>("he"), UInt<4>("hf")) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_34 = mux(_ref_out_T_30, UInt<4>("hd"), _ref_out_T_33) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_35 = mux(_ref_out_T_29, UInt<4>("hc"), _ref_out_T_34) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_36 = mux(_ref_out_T_28, UInt<4>("hb"), _ref_out_T_35) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_37 = mux(_ref_out_T_27, UInt<4>("ha"), _ref_out_T_36) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_38 = mux(_ref_out_T_26, UInt<4>("h9"), _ref_out_T_37) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_39 = mux(_ref_out_T_25, UInt<4>("h8"), _ref_out_T_38) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_40 = mux(_ref_out_T_24, UInt<3>("h7"), _ref_out_T_39) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_41 = mux(_ref_out_T_23, UInt<3>("h6"), _ref_out_T_40) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_42 = mux(_ref_out_T_22, UInt<3>("h5"), _ref_out_T_41) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_43 = mux(_ref_out_T_21, UInt<3>("h4"), _ref_out_T_42) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_44 = mux(_ref_out_T_20, UInt<2>("h3"), _ref_out_T_43) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_45 = mux(_ref_out_T_19, UInt<2>("h2"), _ref_out_T_44) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _ref_out_T_46 = mux(_ref_out_T_18, UInt<1>("h1"), _ref_out_T_45) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node ref_out = mux(_ref_out_T_17, UInt<1>("h0"), _ref_out_T_46) @[src/main/scala/chisel3/util/Mux.scala 50:70]
    node _T = eq(ref_out, out.out) @[playground/src/exp5/CLZ.scala 28:18]
    node _T_1 = asUInt(reset) @[playground/src/exp5/CLZ.scala 28:9]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 28:9]
    when _T_2 : @[playground/src/exp5/CLZ.scala 28:9]
      node _T_3 = eq(_T, UInt<1>("h0")) @[playground/src/exp5/CLZ.scala 28:9]
      when _T_3 : @[playground/src/exp5/CLZ.scala 28:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: in = %b, ref = %d, dut = %d\n    at CLZ.scala:28 assert(ref_out === out.out, \"in = %%%%b, ref = %%%%d, dut = %%%%d\", in, ref_out, out.out)\n", in, ref_out, out.out) : printf @[playground/src/exp5/CLZ.scala 28:9]
      assert(clock, _T, UInt<1>("h1"), "") : assert @[playground/src/exp5/CLZ.scala 28:9]


  module CLZTest_3 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of CLZ_3 @[playground/src/exp5/CLZ.scala 32:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<16>("hffff"), UInt<16>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : UInt<16> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE <= cnt @[playground/src/utils/Utils.scala 33:27]
    m.in <= _m_in_WIRE @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for CLZ-4bit, may finish after 65536 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: CLZ-4bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module Exp5AllTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst modules_0 of MyRegTest @[playground/src/exp5/Test.scala 6:41]
    modules_0.clock <= clock
    modules_0.reset <= reset
    inst modules_1 of MyRegTest_1 @[playground/src/exp5/Test.scala 6:41]
    modules_1.clock <= clock
    modules_1.reset <= reset
    inst modules_2 of MyMemTest @[playground/src/exp5/Test.scala 7:41]
    modules_2.clock <= clock
    modules_2.reset <= reset
    inst modules_3 of MyMemTest_1 @[playground/src/exp5/Test.scala 7:41]
    modules_3.clock <= clock
    modules_3.reset <= reset
    inst modules_4 of CLZTest @[playground/src/exp5/Test.scala 8:41]
    modules_4.clock <= clock
    modules_4.reset <= reset
    inst modules_5 of CLZTest_1 @[playground/src/exp5/Test.scala 8:41]
    modules_5.clock <= clock
    modules_5.reset <= reset
    inst modules_6 of CLZTest_2 @[playground/src/exp5/Test.scala 8:41]
    modules_6.clock <= clock
    modules_6.reset <= reset
    inst modules_7 of CLZTest_3 @[playground/src/exp5/Test.scala 8:41]
    modules_7.clock <= clock
    modules_7.reset <= reset
    node _finish_T = and(modules_0.finish, modules_1.finish) @[playground/src/exp5/Test.scala 9:43]
    node _finish_T_1 = and(_finish_T, modules_2.finish) @[playground/src/exp5/Test.scala 9:43]
    node _finish_T_2 = and(_finish_T_1, modules_3.finish) @[playground/src/exp5/Test.scala 9:43]
    node _finish_T_3 = and(_finish_T_2, modules_4.finish) @[playground/src/exp5/Test.scala 9:43]
    node _finish_T_4 = and(_finish_T_3, modules_5.finish) @[playground/src/exp5/Test.scala 9:43]
    node _finish_T_5 = and(_finish_T_4, modules_6.finish) @[playground/src/exp5/Test.scala 9:43]
    node _finish_T_6 = and(_finish_T_5, modules_7.finish) @[playground/src/exp5/Test.scala 9:43]
    finish <= _finish_T_6 @[playground/src/exp5/Test.scala 9:10]
