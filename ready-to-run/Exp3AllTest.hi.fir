FIRRTL version 1.2.0
circuit Exp3AllTest :
  module RCA :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<1>, flip b : UInt<1>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { s : UInt<1>, c : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _ref_sum_T = add(in.a, in.b) @[playground/src/exp3/Adder.scala 20:22]
    node ref_sum = add(_ref_sum_T, in.c) @[playground/src/exp3/Adder.scala 20:30]
    node _T = bits(ref_sum, 0, 0) @[playground/src/exp3/Adder.scala 21:27]
    node _T_1 = eq(out.s, _T) @[playground/src/exp3/Adder.scala 21:16]
    node _T_2 = bits(ref_sum, 0, 0) @[playground/src/exp3/Adder.scala 22:37]
    node _T_3 = asUInt(reset) @[playground/src/exp3/Adder.scala 21:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
    when _T_4 : @[playground/src/exp3/Adder.scala 21:9]
      node _T_5 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
      when _T_5 : @[playground/src/exp3/Adder.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: a = %d, b = %d, cin = %d, dut_sum = %d, ref_sum = %d\n    at Adder.scala:21 assert(out.s === ref_sum(width - 1, 0), \"a = %%%%d, b = %%%%d, cin = %%%%d, dut_sum = %%%%d, ref_sum = %%%%d\",\n", in.a, in.b, in.c, out.s, _T_2) : printf @[playground/src/exp3/Adder.scala 21:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp3/Adder.scala 21:9]
    node _T_6 = bits(ref_sum, 1, 1) @[playground/src/exp3/Adder.scala 23:27]
    node _T_7 = eq(out.c, _T_6) @[playground/src/exp3/Adder.scala 23:16]
    node _T_8 = asUInt(reset) @[playground/src/exp3/Adder.scala 23:9]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
    when _T_9 : @[playground/src/exp3/Adder.scala 23:9]
      node _T_10 = eq(_T_7, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
      when _T_10 : @[playground/src/exp3/Adder.scala 23:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Adder.scala:23 assert(out.c === ref_sum(width))\n") : printf_1 @[playground/src/exp3/Adder.scala 23:9]
      assert(clock, _T_7, UInt<1>("h1"), "") : assert_1 @[playground/src/exp3/Adder.scala 23:9]
    wire carry : UInt<1>[2] @[playground/src/exp3/Adder.scala 40:19]
    wire sum : UInt<1>[1] @[playground/src/exp3/Adder.scala 41:17]
    carry[0] <= in.c @[playground/src/exp3/Adder.scala 42:12]
    node _T_11 = bits(in.a, 0, 0) @[playground/src/exp3/Adder.scala 43:42]
    node _T_12 = bits(in.b, 0, 0) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_0_T = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_0_T_1 = xor(_sum_0_T, carry[0]) @[playground/src/exp3/Adder.scala 34:16]
    sum[0] <= _sum_0_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_1_T = and(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_1_T_1 = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_1_T_2 = and(_carry_1_T_1, carry[0]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_1_T_3 = or(_carry_1_T, _carry_1_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[1] <= _carry_1_T_3 @[playground/src/exp3/Adder.scala 35:10]
    out.s <= sum[0] @[playground/src/exp3/Adder.scala 44:9]
    out.c <= carry[1] @[playground/src/exp3/Adder.scala 45:9]

  module RCATest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of RCA @[playground/src/exp3/Adder.scala 27:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<3>("h7"), UInt<3>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<1>, flip b : UInt<1>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<3> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.c <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 1, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 2, 2) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.c <= _m_in_WIRE.c @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for RCA-1bit, may finish after 8 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: RCA-1bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module RCA_1 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<2>, flip b : UInt<2>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { s : UInt<2>, c : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _ref_sum_T = add(in.a, in.b) @[playground/src/exp3/Adder.scala 20:22]
    node ref_sum = add(_ref_sum_T, in.c) @[playground/src/exp3/Adder.scala 20:30]
    node _T = bits(ref_sum, 1, 0) @[playground/src/exp3/Adder.scala 21:27]
    node _T_1 = eq(out.s, _T) @[playground/src/exp3/Adder.scala 21:16]
    node _T_2 = bits(ref_sum, 1, 0) @[playground/src/exp3/Adder.scala 22:37]
    node _T_3 = asUInt(reset) @[playground/src/exp3/Adder.scala 21:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
    when _T_4 : @[playground/src/exp3/Adder.scala 21:9]
      node _T_5 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
      when _T_5 : @[playground/src/exp3/Adder.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: a = %d, b = %d, cin = %d, dut_sum = %d, ref_sum = %d\n    at Adder.scala:21 assert(out.s === ref_sum(width - 1, 0), \"a = %%%%d, b = %%%%d, cin = %%%%d, dut_sum = %%%%d, ref_sum = %%%%d\",\n", in.a, in.b, in.c, out.s, _T_2) : printf @[playground/src/exp3/Adder.scala 21:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp3/Adder.scala 21:9]
    node _T_6 = bits(ref_sum, 2, 2) @[playground/src/exp3/Adder.scala 23:27]
    node _T_7 = eq(out.c, _T_6) @[playground/src/exp3/Adder.scala 23:16]
    node _T_8 = asUInt(reset) @[playground/src/exp3/Adder.scala 23:9]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
    when _T_9 : @[playground/src/exp3/Adder.scala 23:9]
      node _T_10 = eq(_T_7, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
      when _T_10 : @[playground/src/exp3/Adder.scala 23:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Adder.scala:23 assert(out.c === ref_sum(width))\n") : printf_1 @[playground/src/exp3/Adder.scala 23:9]
      assert(clock, _T_7, UInt<1>("h1"), "") : assert_1 @[playground/src/exp3/Adder.scala 23:9]
    wire carry : UInt<1>[3] @[playground/src/exp3/Adder.scala 40:19]
    wire sum : UInt<1>[2] @[playground/src/exp3/Adder.scala 41:17]
    carry[0] <= in.c @[playground/src/exp3/Adder.scala 42:12]
    node _T_11 = bits(in.a, 0, 0) @[playground/src/exp3/Adder.scala 43:42]
    node _T_12 = bits(in.b, 0, 0) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_0_T = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_0_T_1 = xor(_sum_0_T, carry[0]) @[playground/src/exp3/Adder.scala 34:16]
    sum[0] <= _sum_0_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_1_T = and(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_1_T_1 = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_1_T_2 = and(_carry_1_T_1, carry[0]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_1_T_3 = or(_carry_1_T, _carry_1_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[1] <= _carry_1_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_13 = bits(in.a, 1, 1) @[playground/src/exp3/Adder.scala 43:42]
    node _T_14 = bits(in.b, 1, 1) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_1_T = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_1_T_1 = xor(_sum_1_T, carry[1]) @[playground/src/exp3/Adder.scala 34:16]
    sum[1] <= _sum_1_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_2_T = and(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_2_T_1 = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_2_T_2 = and(_carry_2_T_1, carry[1]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_2_T_3 = or(_carry_2_T, _carry_2_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[2] <= _carry_2_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _out_s_T = cat(sum[1], sum[0]) @[playground/src/exp3/Adder.scala 44:16]
    out.s <= _out_s_T @[playground/src/exp3/Adder.scala 44:9]
    out.c <= carry[2] @[playground/src/exp3/Adder.scala 45:9]

  module RCATest_1 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of RCA_1 @[playground/src/exp3/Adder.scala 27:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<2>, flip b : UInt<2>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<5> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.c <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 2, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 4, 3) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.c <= _m_in_WIRE.c @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for RCA-2bit, may finish after 32 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: RCA-2bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module RCA_2 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<3>, flip b : UInt<3>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { s : UInt<3>, c : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _ref_sum_T = add(in.a, in.b) @[playground/src/exp3/Adder.scala 20:22]
    node ref_sum = add(_ref_sum_T, in.c) @[playground/src/exp3/Adder.scala 20:30]
    node _T = bits(ref_sum, 2, 0) @[playground/src/exp3/Adder.scala 21:27]
    node _T_1 = eq(out.s, _T) @[playground/src/exp3/Adder.scala 21:16]
    node _T_2 = bits(ref_sum, 2, 0) @[playground/src/exp3/Adder.scala 22:37]
    node _T_3 = asUInt(reset) @[playground/src/exp3/Adder.scala 21:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
    when _T_4 : @[playground/src/exp3/Adder.scala 21:9]
      node _T_5 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
      when _T_5 : @[playground/src/exp3/Adder.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: a = %d, b = %d, cin = %d, dut_sum = %d, ref_sum = %d\n    at Adder.scala:21 assert(out.s === ref_sum(width - 1, 0), \"a = %%%%d, b = %%%%d, cin = %%%%d, dut_sum = %%%%d, ref_sum = %%%%d\",\n", in.a, in.b, in.c, out.s, _T_2) : printf @[playground/src/exp3/Adder.scala 21:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp3/Adder.scala 21:9]
    node _T_6 = bits(ref_sum, 3, 3) @[playground/src/exp3/Adder.scala 23:27]
    node _T_7 = eq(out.c, _T_6) @[playground/src/exp3/Adder.scala 23:16]
    node _T_8 = asUInt(reset) @[playground/src/exp3/Adder.scala 23:9]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
    when _T_9 : @[playground/src/exp3/Adder.scala 23:9]
      node _T_10 = eq(_T_7, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
      when _T_10 : @[playground/src/exp3/Adder.scala 23:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Adder.scala:23 assert(out.c === ref_sum(width))\n") : printf_1 @[playground/src/exp3/Adder.scala 23:9]
      assert(clock, _T_7, UInt<1>("h1"), "") : assert_1 @[playground/src/exp3/Adder.scala 23:9]
    wire carry : UInt<1>[4] @[playground/src/exp3/Adder.scala 40:19]
    wire sum : UInt<1>[3] @[playground/src/exp3/Adder.scala 41:17]
    carry[0] <= in.c @[playground/src/exp3/Adder.scala 42:12]
    node _T_11 = bits(in.a, 0, 0) @[playground/src/exp3/Adder.scala 43:42]
    node _T_12 = bits(in.b, 0, 0) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_0_T = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_0_T_1 = xor(_sum_0_T, carry[0]) @[playground/src/exp3/Adder.scala 34:16]
    sum[0] <= _sum_0_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_1_T = and(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_1_T_1 = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_1_T_2 = and(_carry_1_T_1, carry[0]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_1_T_3 = or(_carry_1_T, _carry_1_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[1] <= _carry_1_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_13 = bits(in.a, 1, 1) @[playground/src/exp3/Adder.scala 43:42]
    node _T_14 = bits(in.b, 1, 1) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_1_T = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_1_T_1 = xor(_sum_1_T, carry[1]) @[playground/src/exp3/Adder.scala 34:16]
    sum[1] <= _sum_1_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_2_T = and(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_2_T_1 = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_2_T_2 = and(_carry_2_T_1, carry[1]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_2_T_3 = or(_carry_2_T, _carry_2_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[2] <= _carry_2_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_15 = bits(in.a, 2, 2) @[playground/src/exp3/Adder.scala 43:42]
    node _T_16 = bits(in.b, 2, 2) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_2_T = xor(_T_15, _T_16) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_2_T_1 = xor(_sum_2_T, carry[2]) @[playground/src/exp3/Adder.scala 34:16]
    sum[2] <= _sum_2_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_3_T = and(_T_15, _T_16) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_3_T_1 = xor(_T_15, _T_16) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_3_T_2 = and(_carry_3_T_1, carry[2]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_3_T_3 = or(_carry_3_T, _carry_3_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[3] <= _carry_3_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node out_s_hi = cat(sum[2], sum[1]) @[playground/src/exp3/Adder.scala 44:16]
    node _out_s_T = cat(out_s_hi, sum[0]) @[playground/src/exp3/Adder.scala 44:16]
    out.s <= _out_s_T @[playground/src/exp3/Adder.scala 44:9]
    out.c <= carry[3] @[playground/src/exp3/Adder.scala 45:9]

  module RCATest_2 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of RCA_2 @[playground/src/exp3/Adder.scala 27:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<7>("h7f"), UInt<7>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<3>, flip b : UInt<3>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<7> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.c <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 3, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 6, 4) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.c <= _m_in_WIRE.c @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for RCA-3bit, may finish after 128 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: RCA-3bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module RCA_3 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<4>, flip b : UInt<4>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { s : UInt<4>, c : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _ref_sum_T = add(in.a, in.b) @[playground/src/exp3/Adder.scala 20:22]
    node ref_sum = add(_ref_sum_T, in.c) @[playground/src/exp3/Adder.scala 20:30]
    node _T = bits(ref_sum, 3, 0) @[playground/src/exp3/Adder.scala 21:27]
    node _T_1 = eq(out.s, _T) @[playground/src/exp3/Adder.scala 21:16]
    node _T_2 = bits(ref_sum, 3, 0) @[playground/src/exp3/Adder.scala 22:37]
    node _T_3 = asUInt(reset) @[playground/src/exp3/Adder.scala 21:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
    when _T_4 : @[playground/src/exp3/Adder.scala 21:9]
      node _T_5 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
      when _T_5 : @[playground/src/exp3/Adder.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: a = %d, b = %d, cin = %d, dut_sum = %d, ref_sum = %d\n    at Adder.scala:21 assert(out.s === ref_sum(width - 1, 0), \"a = %%%%d, b = %%%%d, cin = %%%%d, dut_sum = %%%%d, ref_sum = %%%%d\",\n", in.a, in.b, in.c, out.s, _T_2) : printf @[playground/src/exp3/Adder.scala 21:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp3/Adder.scala 21:9]
    node _T_6 = bits(ref_sum, 4, 4) @[playground/src/exp3/Adder.scala 23:27]
    node _T_7 = eq(out.c, _T_6) @[playground/src/exp3/Adder.scala 23:16]
    node _T_8 = asUInt(reset) @[playground/src/exp3/Adder.scala 23:9]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
    when _T_9 : @[playground/src/exp3/Adder.scala 23:9]
      node _T_10 = eq(_T_7, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
      when _T_10 : @[playground/src/exp3/Adder.scala 23:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Adder.scala:23 assert(out.c === ref_sum(width))\n") : printf_1 @[playground/src/exp3/Adder.scala 23:9]
      assert(clock, _T_7, UInt<1>("h1"), "") : assert_1 @[playground/src/exp3/Adder.scala 23:9]
    wire carry : UInt<1>[5] @[playground/src/exp3/Adder.scala 40:19]
    wire sum : UInt<1>[4] @[playground/src/exp3/Adder.scala 41:17]
    carry[0] <= in.c @[playground/src/exp3/Adder.scala 42:12]
    node _T_11 = bits(in.a, 0, 0) @[playground/src/exp3/Adder.scala 43:42]
    node _T_12 = bits(in.b, 0, 0) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_0_T = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_0_T_1 = xor(_sum_0_T, carry[0]) @[playground/src/exp3/Adder.scala 34:16]
    sum[0] <= _sum_0_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_1_T = and(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_1_T_1 = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_1_T_2 = and(_carry_1_T_1, carry[0]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_1_T_3 = or(_carry_1_T, _carry_1_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[1] <= _carry_1_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_13 = bits(in.a, 1, 1) @[playground/src/exp3/Adder.scala 43:42]
    node _T_14 = bits(in.b, 1, 1) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_1_T = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_1_T_1 = xor(_sum_1_T, carry[1]) @[playground/src/exp3/Adder.scala 34:16]
    sum[1] <= _sum_1_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_2_T = and(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_2_T_1 = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_2_T_2 = and(_carry_2_T_1, carry[1]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_2_T_3 = or(_carry_2_T, _carry_2_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[2] <= _carry_2_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_15 = bits(in.a, 2, 2) @[playground/src/exp3/Adder.scala 43:42]
    node _T_16 = bits(in.b, 2, 2) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_2_T = xor(_T_15, _T_16) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_2_T_1 = xor(_sum_2_T, carry[2]) @[playground/src/exp3/Adder.scala 34:16]
    sum[2] <= _sum_2_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_3_T = and(_T_15, _T_16) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_3_T_1 = xor(_T_15, _T_16) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_3_T_2 = and(_carry_3_T_1, carry[2]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_3_T_3 = or(_carry_3_T, _carry_3_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[3] <= _carry_3_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_17 = bits(in.a, 3, 3) @[playground/src/exp3/Adder.scala 43:42]
    node _T_18 = bits(in.b, 3, 3) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_3_T = xor(_T_17, _T_18) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_3_T_1 = xor(_sum_3_T, carry[3]) @[playground/src/exp3/Adder.scala 34:16]
    sum[3] <= _sum_3_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_4_T = and(_T_17, _T_18) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_4_T_1 = xor(_T_17, _T_18) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_4_T_2 = and(_carry_4_T_1, carry[3]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_4_T_3 = or(_carry_4_T, _carry_4_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[4] <= _carry_4_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node out_s_lo = cat(sum[1], sum[0]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_hi = cat(sum[3], sum[2]) @[playground/src/exp3/Adder.scala 44:16]
    node _out_s_T = cat(out_s_hi, out_s_lo) @[playground/src/exp3/Adder.scala 44:16]
    out.s <= _out_s_T @[playground/src/exp3/Adder.scala 44:9]
    out.c <= carry[4] @[playground/src/exp3/Adder.scala 45:9]

  module RCATest_3 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of RCA_3 @[playground/src/exp3/Adder.scala 27:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<9>("h1ff"), UInt<9>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<4>, flip b : UInt<4>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<9> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.c <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 4, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 8, 5) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.c <= _m_in_WIRE.c @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for RCA-4bit, may finish after 512 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: RCA-4bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module RCA_4 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<5>, flip b : UInt<5>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { s : UInt<5>, c : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _ref_sum_T = add(in.a, in.b) @[playground/src/exp3/Adder.scala 20:22]
    node ref_sum = add(_ref_sum_T, in.c) @[playground/src/exp3/Adder.scala 20:30]
    node _T = bits(ref_sum, 4, 0) @[playground/src/exp3/Adder.scala 21:27]
    node _T_1 = eq(out.s, _T) @[playground/src/exp3/Adder.scala 21:16]
    node _T_2 = bits(ref_sum, 4, 0) @[playground/src/exp3/Adder.scala 22:37]
    node _T_3 = asUInt(reset) @[playground/src/exp3/Adder.scala 21:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
    when _T_4 : @[playground/src/exp3/Adder.scala 21:9]
      node _T_5 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
      when _T_5 : @[playground/src/exp3/Adder.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: a = %d, b = %d, cin = %d, dut_sum = %d, ref_sum = %d\n    at Adder.scala:21 assert(out.s === ref_sum(width - 1, 0), \"a = %%%%d, b = %%%%d, cin = %%%%d, dut_sum = %%%%d, ref_sum = %%%%d\",\n", in.a, in.b, in.c, out.s, _T_2) : printf @[playground/src/exp3/Adder.scala 21:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp3/Adder.scala 21:9]
    node _T_6 = bits(ref_sum, 5, 5) @[playground/src/exp3/Adder.scala 23:27]
    node _T_7 = eq(out.c, _T_6) @[playground/src/exp3/Adder.scala 23:16]
    node _T_8 = asUInt(reset) @[playground/src/exp3/Adder.scala 23:9]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
    when _T_9 : @[playground/src/exp3/Adder.scala 23:9]
      node _T_10 = eq(_T_7, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
      when _T_10 : @[playground/src/exp3/Adder.scala 23:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Adder.scala:23 assert(out.c === ref_sum(width))\n") : printf_1 @[playground/src/exp3/Adder.scala 23:9]
      assert(clock, _T_7, UInt<1>("h1"), "") : assert_1 @[playground/src/exp3/Adder.scala 23:9]
    wire carry : UInt<1>[6] @[playground/src/exp3/Adder.scala 40:19]
    wire sum : UInt<1>[5] @[playground/src/exp3/Adder.scala 41:17]
    carry[0] <= in.c @[playground/src/exp3/Adder.scala 42:12]
    node _T_11 = bits(in.a, 0, 0) @[playground/src/exp3/Adder.scala 43:42]
    node _T_12 = bits(in.b, 0, 0) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_0_T = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_0_T_1 = xor(_sum_0_T, carry[0]) @[playground/src/exp3/Adder.scala 34:16]
    sum[0] <= _sum_0_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_1_T = and(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_1_T_1 = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_1_T_2 = and(_carry_1_T_1, carry[0]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_1_T_3 = or(_carry_1_T, _carry_1_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[1] <= _carry_1_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_13 = bits(in.a, 1, 1) @[playground/src/exp3/Adder.scala 43:42]
    node _T_14 = bits(in.b, 1, 1) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_1_T = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_1_T_1 = xor(_sum_1_T, carry[1]) @[playground/src/exp3/Adder.scala 34:16]
    sum[1] <= _sum_1_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_2_T = and(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_2_T_1 = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_2_T_2 = and(_carry_2_T_1, carry[1]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_2_T_3 = or(_carry_2_T, _carry_2_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[2] <= _carry_2_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_15 = bits(in.a, 2, 2) @[playground/src/exp3/Adder.scala 43:42]
    node _T_16 = bits(in.b, 2, 2) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_2_T = xor(_T_15, _T_16) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_2_T_1 = xor(_sum_2_T, carry[2]) @[playground/src/exp3/Adder.scala 34:16]
    sum[2] <= _sum_2_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_3_T = and(_T_15, _T_16) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_3_T_1 = xor(_T_15, _T_16) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_3_T_2 = and(_carry_3_T_1, carry[2]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_3_T_3 = or(_carry_3_T, _carry_3_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[3] <= _carry_3_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_17 = bits(in.a, 3, 3) @[playground/src/exp3/Adder.scala 43:42]
    node _T_18 = bits(in.b, 3, 3) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_3_T = xor(_T_17, _T_18) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_3_T_1 = xor(_sum_3_T, carry[3]) @[playground/src/exp3/Adder.scala 34:16]
    sum[3] <= _sum_3_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_4_T = and(_T_17, _T_18) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_4_T_1 = xor(_T_17, _T_18) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_4_T_2 = and(_carry_4_T_1, carry[3]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_4_T_3 = or(_carry_4_T, _carry_4_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[4] <= _carry_4_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_19 = bits(in.a, 4, 4) @[playground/src/exp3/Adder.scala 43:42]
    node _T_20 = bits(in.b, 4, 4) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_4_T = xor(_T_19, _T_20) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_4_T_1 = xor(_sum_4_T, carry[4]) @[playground/src/exp3/Adder.scala 34:16]
    sum[4] <= _sum_4_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_5_T = and(_T_19, _T_20) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_5_T_1 = xor(_T_19, _T_20) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_5_T_2 = and(_carry_5_T_1, carry[4]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_5_T_3 = or(_carry_5_T, _carry_5_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[5] <= _carry_5_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node out_s_lo = cat(sum[1], sum[0]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_hi_hi = cat(sum[4], sum[3]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_hi = cat(out_s_hi_hi, sum[2]) @[playground/src/exp3/Adder.scala 44:16]
    node _out_s_T = cat(out_s_hi, out_s_lo) @[playground/src/exp3/Adder.scala 44:16]
    out.s <= _out_s_T @[playground/src/exp3/Adder.scala 44:9]
    out.c <= carry[5] @[playground/src/exp3/Adder.scala 45:9]

  module RCATest_4 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of RCA_4 @[playground/src/exp3/Adder.scala 27:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<11>, clock with :
      reset => (reset, UInt<11>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<11>("h7ff"), UInt<11>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<5>, flip b : UInt<5>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<11> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.c <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 5, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 10, 6) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.c <= _m_in_WIRE.c @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for RCA-5bit, may finish after 2048 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: RCA-5bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module RCA_5 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<6>, flip b : UInt<6>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { s : UInt<6>, c : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _ref_sum_T = add(in.a, in.b) @[playground/src/exp3/Adder.scala 20:22]
    node ref_sum = add(_ref_sum_T, in.c) @[playground/src/exp3/Adder.scala 20:30]
    node _T = bits(ref_sum, 5, 0) @[playground/src/exp3/Adder.scala 21:27]
    node _T_1 = eq(out.s, _T) @[playground/src/exp3/Adder.scala 21:16]
    node _T_2 = bits(ref_sum, 5, 0) @[playground/src/exp3/Adder.scala 22:37]
    node _T_3 = asUInt(reset) @[playground/src/exp3/Adder.scala 21:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
    when _T_4 : @[playground/src/exp3/Adder.scala 21:9]
      node _T_5 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
      when _T_5 : @[playground/src/exp3/Adder.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: a = %d, b = %d, cin = %d, dut_sum = %d, ref_sum = %d\n    at Adder.scala:21 assert(out.s === ref_sum(width - 1, 0), \"a = %%%%d, b = %%%%d, cin = %%%%d, dut_sum = %%%%d, ref_sum = %%%%d\",\n", in.a, in.b, in.c, out.s, _T_2) : printf @[playground/src/exp3/Adder.scala 21:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp3/Adder.scala 21:9]
    node _T_6 = bits(ref_sum, 6, 6) @[playground/src/exp3/Adder.scala 23:27]
    node _T_7 = eq(out.c, _T_6) @[playground/src/exp3/Adder.scala 23:16]
    node _T_8 = asUInt(reset) @[playground/src/exp3/Adder.scala 23:9]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
    when _T_9 : @[playground/src/exp3/Adder.scala 23:9]
      node _T_10 = eq(_T_7, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
      when _T_10 : @[playground/src/exp3/Adder.scala 23:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Adder.scala:23 assert(out.c === ref_sum(width))\n") : printf_1 @[playground/src/exp3/Adder.scala 23:9]
      assert(clock, _T_7, UInt<1>("h1"), "") : assert_1 @[playground/src/exp3/Adder.scala 23:9]
    wire carry : UInt<1>[7] @[playground/src/exp3/Adder.scala 40:19]
    wire sum : UInt<1>[6] @[playground/src/exp3/Adder.scala 41:17]
    carry[0] <= in.c @[playground/src/exp3/Adder.scala 42:12]
    node _T_11 = bits(in.a, 0, 0) @[playground/src/exp3/Adder.scala 43:42]
    node _T_12 = bits(in.b, 0, 0) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_0_T = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_0_T_1 = xor(_sum_0_T, carry[0]) @[playground/src/exp3/Adder.scala 34:16]
    sum[0] <= _sum_0_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_1_T = and(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_1_T_1 = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_1_T_2 = and(_carry_1_T_1, carry[0]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_1_T_3 = or(_carry_1_T, _carry_1_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[1] <= _carry_1_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_13 = bits(in.a, 1, 1) @[playground/src/exp3/Adder.scala 43:42]
    node _T_14 = bits(in.b, 1, 1) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_1_T = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_1_T_1 = xor(_sum_1_T, carry[1]) @[playground/src/exp3/Adder.scala 34:16]
    sum[1] <= _sum_1_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_2_T = and(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_2_T_1 = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_2_T_2 = and(_carry_2_T_1, carry[1]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_2_T_3 = or(_carry_2_T, _carry_2_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[2] <= _carry_2_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_15 = bits(in.a, 2, 2) @[playground/src/exp3/Adder.scala 43:42]
    node _T_16 = bits(in.b, 2, 2) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_2_T = xor(_T_15, _T_16) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_2_T_1 = xor(_sum_2_T, carry[2]) @[playground/src/exp3/Adder.scala 34:16]
    sum[2] <= _sum_2_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_3_T = and(_T_15, _T_16) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_3_T_1 = xor(_T_15, _T_16) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_3_T_2 = and(_carry_3_T_1, carry[2]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_3_T_3 = or(_carry_3_T, _carry_3_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[3] <= _carry_3_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_17 = bits(in.a, 3, 3) @[playground/src/exp3/Adder.scala 43:42]
    node _T_18 = bits(in.b, 3, 3) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_3_T = xor(_T_17, _T_18) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_3_T_1 = xor(_sum_3_T, carry[3]) @[playground/src/exp3/Adder.scala 34:16]
    sum[3] <= _sum_3_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_4_T = and(_T_17, _T_18) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_4_T_1 = xor(_T_17, _T_18) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_4_T_2 = and(_carry_4_T_1, carry[3]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_4_T_3 = or(_carry_4_T, _carry_4_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[4] <= _carry_4_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_19 = bits(in.a, 4, 4) @[playground/src/exp3/Adder.scala 43:42]
    node _T_20 = bits(in.b, 4, 4) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_4_T = xor(_T_19, _T_20) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_4_T_1 = xor(_sum_4_T, carry[4]) @[playground/src/exp3/Adder.scala 34:16]
    sum[4] <= _sum_4_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_5_T = and(_T_19, _T_20) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_5_T_1 = xor(_T_19, _T_20) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_5_T_2 = and(_carry_5_T_1, carry[4]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_5_T_3 = or(_carry_5_T, _carry_5_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[5] <= _carry_5_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_21 = bits(in.a, 5, 5) @[playground/src/exp3/Adder.scala 43:42]
    node _T_22 = bits(in.b, 5, 5) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_5_T = xor(_T_21, _T_22) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_5_T_1 = xor(_sum_5_T, carry[5]) @[playground/src/exp3/Adder.scala 34:16]
    sum[5] <= _sum_5_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_6_T = and(_T_21, _T_22) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_6_T_1 = xor(_T_21, _T_22) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_6_T_2 = and(_carry_6_T_1, carry[5]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_6_T_3 = or(_carry_6_T, _carry_6_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[6] <= _carry_6_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node out_s_lo_hi = cat(sum[2], sum[1]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_lo = cat(out_s_lo_hi, sum[0]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_hi_hi = cat(sum[5], sum[4]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_hi = cat(out_s_hi_hi, sum[3]) @[playground/src/exp3/Adder.scala 44:16]
    node _out_s_T = cat(out_s_hi, out_s_lo) @[playground/src/exp3/Adder.scala 44:16]
    out.s <= _out_s_T @[playground/src/exp3/Adder.scala 44:9]
    out.c <= carry[6] @[playground/src/exp3/Adder.scala 45:9]

  module RCATest_5 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of RCA_5 @[playground/src/exp3/Adder.scala 27:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<13>, clock with :
      reset => (reset, UInt<13>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<13>("h1fff"), UInt<13>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<6>, flip b : UInt<6>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<13> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.c <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 6, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 12, 7) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.c <= _m_in_WIRE.c @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for RCA-6bit, may finish after 8192 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: RCA-6bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module RCA_6 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<7>, flip b : UInt<7>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { s : UInt<7>, c : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _ref_sum_T = add(in.a, in.b) @[playground/src/exp3/Adder.scala 20:22]
    node ref_sum = add(_ref_sum_T, in.c) @[playground/src/exp3/Adder.scala 20:30]
    node _T = bits(ref_sum, 6, 0) @[playground/src/exp3/Adder.scala 21:27]
    node _T_1 = eq(out.s, _T) @[playground/src/exp3/Adder.scala 21:16]
    node _T_2 = bits(ref_sum, 6, 0) @[playground/src/exp3/Adder.scala 22:37]
    node _T_3 = asUInt(reset) @[playground/src/exp3/Adder.scala 21:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
    when _T_4 : @[playground/src/exp3/Adder.scala 21:9]
      node _T_5 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
      when _T_5 : @[playground/src/exp3/Adder.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: a = %d, b = %d, cin = %d, dut_sum = %d, ref_sum = %d\n    at Adder.scala:21 assert(out.s === ref_sum(width - 1, 0), \"a = %%%%d, b = %%%%d, cin = %%%%d, dut_sum = %%%%d, ref_sum = %%%%d\",\n", in.a, in.b, in.c, out.s, _T_2) : printf @[playground/src/exp3/Adder.scala 21:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp3/Adder.scala 21:9]
    node _T_6 = bits(ref_sum, 7, 7) @[playground/src/exp3/Adder.scala 23:27]
    node _T_7 = eq(out.c, _T_6) @[playground/src/exp3/Adder.scala 23:16]
    node _T_8 = asUInt(reset) @[playground/src/exp3/Adder.scala 23:9]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
    when _T_9 : @[playground/src/exp3/Adder.scala 23:9]
      node _T_10 = eq(_T_7, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
      when _T_10 : @[playground/src/exp3/Adder.scala 23:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Adder.scala:23 assert(out.c === ref_sum(width))\n") : printf_1 @[playground/src/exp3/Adder.scala 23:9]
      assert(clock, _T_7, UInt<1>("h1"), "") : assert_1 @[playground/src/exp3/Adder.scala 23:9]
    wire carry : UInt<1>[8] @[playground/src/exp3/Adder.scala 40:19]
    wire sum : UInt<1>[7] @[playground/src/exp3/Adder.scala 41:17]
    carry[0] <= in.c @[playground/src/exp3/Adder.scala 42:12]
    node _T_11 = bits(in.a, 0, 0) @[playground/src/exp3/Adder.scala 43:42]
    node _T_12 = bits(in.b, 0, 0) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_0_T = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_0_T_1 = xor(_sum_0_T, carry[0]) @[playground/src/exp3/Adder.scala 34:16]
    sum[0] <= _sum_0_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_1_T = and(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_1_T_1 = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_1_T_2 = and(_carry_1_T_1, carry[0]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_1_T_3 = or(_carry_1_T, _carry_1_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[1] <= _carry_1_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_13 = bits(in.a, 1, 1) @[playground/src/exp3/Adder.scala 43:42]
    node _T_14 = bits(in.b, 1, 1) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_1_T = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_1_T_1 = xor(_sum_1_T, carry[1]) @[playground/src/exp3/Adder.scala 34:16]
    sum[1] <= _sum_1_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_2_T = and(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_2_T_1 = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_2_T_2 = and(_carry_2_T_1, carry[1]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_2_T_3 = or(_carry_2_T, _carry_2_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[2] <= _carry_2_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_15 = bits(in.a, 2, 2) @[playground/src/exp3/Adder.scala 43:42]
    node _T_16 = bits(in.b, 2, 2) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_2_T = xor(_T_15, _T_16) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_2_T_1 = xor(_sum_2_T, carry[2]) @[playground/src/exp3/Adder.scala 34:16]
    sum[2] <= _sum_2_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_3_T = and(_T_15, _T_16) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_3_T_1 = xor(_T_15, _T_16) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_3_T_2 = and(_carry_3_T_1, carry[2]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_3_T_3 = or(_carry_3_T, _carry_3_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[3] <= _carry_3_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_17 = bits(in.a, 3, 3) @[playground/src/exp3/Adder.scala 43:42]
    node _T_18 = bits(in.b, 3, 3) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_3_T = xor(_T_17, _T_18) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_3_T_1 = xor(_sum_3_T, carry[3]) @[playground/src/exp3/Adder.scala 34:16]
    sum[3] <= _sum_3_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_4_T = and(_T_17, _T_18) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_4_T_1 = xor(_T_17, _T_18) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_4_T_2 = and(_carry_4_T_1, carry[3]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_4_T_3 = or(_carry_4_T, _carry_4_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[4] <= _carry_4_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_19 = bits(in.a, 4, 4) @[playground/src/exp3/Adder.scala 43:42]
    node _T_20 = bits(in.b, 4, 4) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_4_T = xor(_T_19, _T_20) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_4_T_1 = xor(_sum_4_T, carry[4]) @[playground/src/exp3/Adder.scala 34:16]
    sum[4] <= _sum_4_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_5_T = and(_T_19, _T_20) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_5_T_1 = xor(_T_19, _T_20) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_5_T_2 = and(_carry_5_T_1, carry[4]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_5_T_3 = or(_carry_5_T, _carry_5_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[5] <= _carry_5_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_21 = bits(in.a, 5, 5) @[playground/src/exp3/Adder.scala 43:42]
    node _T_22 = bits(in.b, 5, 5) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_5_T = xor(_T_21, _T_22) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_5_T_1 = xor(_sum_5_T, carry[5]) @[playground/src/exp3/Adder.scala 34:16]
    sum[5] <= _sum_5_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_6_T = and(_T_21, _T_22) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_6_T_1 = xor(_T_21, _T_22) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_6_T_2 = and(_carry_6_T_1, carry[5]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_6_T_3 = or(_carry_6_T, _carry_6_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[6] <= _carry_6_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_23 = bits(in.a, 6, 6) @[playground/src/exp3/Adder.scala 43:42]
    node _T_24 = bits(in.b, 6, 6) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_6_T = xor(_T_23, _T_24) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_6_T_1 = xor(_sum_6_T, carry[6]) @[playground/src/exp3/Adder.scala 34:16]
    sum[6] <= _sum_6_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_7_T = and(_T_23, _T_24) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_7_T_1 = xor(_T_23, _T_24) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_7_T_2 = and(_carry_7_T_1, carry[6]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_7_T_3 = or(_carry_7_T, _carry_7_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[7] <= _carry_7_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node out_s_lo_hi = cat(sum[2], sum[1]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_lo = cat(out_s_lo_hi, sum[0]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_hi_lo = cat(sum[4], sum[3]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_hi_hi = cat(sum[6], sum[5]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_hi = cat(out_s_hi_hi, out_s_hi_lo) @[playground/src/exp3/Adder.scala 44:16]
    node _out_s_T = cat(out_s_hi, out_s_lo) @[playground/src/exp3/Adder.scala 44:16]
    out.s <= _out_s_T @[playground/src/exp3/Adder.scala 44:9]
    out.c <= carry[7] @[playground/src/exp3/Adder.scala 45:9]

  module RCATest_6 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of RCA_6 @[playground/src/exp3/Adder.scala 27:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<15>("h7fff"), UInt<15>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<7>, flip b : UInt<7>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<15> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.c <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 7, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 14, 8) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.c <= _m_in_WIRE.c @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for RCA-7bit, may finish after 32768 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: RCA-7bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module RCA_7 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<8>, flip b : UInt<8>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { s : UInt<8>, c : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _ref_sum_T = add(in.a, in.b) @[playground/src/exp3/Adder.scala 20:22]
    node ref_sum = add(_ref_sum_T, in.c) @[playground/src/exp3/Adder.scala 20:30]
    node _T = bits(ref_sum, 7, 0) @[playground/src/exp3/Adder.scala 21:27]
    node _T_1 = eq(out.s, _T) @[playground/src/exp3/Adder.scala 21:16]
    node _T_2 = bits(ref_sum, 7, 0) @[playground/src/exp3/Adder.scala 22:37]
    node _T_3 = asUInt(reset) @[playground/src/exp3/Adder.scala 21:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
    when _T_4 : @[playground/src/exp3/Adder.scala 21:9]
      node _T_5 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
      when _T_5 : @[playground/src/exp3/Adder.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: a = %d, b = %d, cin = %d, dut_sum = %d, ref_sum = %d\n    at Adder.scala:21 assert(out.s === ref_sum(width - 1, 0), \"a = %%%%d, b = %%%%d, cin = %%%%d, dut_sum = %%%%d, ref_sum = %%%%d\",\n", in.a, in.b, in.c, out.s, _T_2) : printf @[playground/src/exp3/Adder.scala 21:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp3/Adder.scala 21:9]
    node _T_6 = bits(ref_sum, 8, 8) @[playground/src/exp3/Adder.scala 23:27]
    node _T_7 = eq(out.c, _T_6) @[playground/src/exp3/Adder.scala 23:16]
    node _T_8 = asUInt(reset) @[playground/src/exp3/Adder.scala 23:9]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
    when _T_9 : @[playground/src/exp3/Adder.scala 23:9]
      node _T_10 = eq(_T_7, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
      when _T_10 : @[playground/src/exp3/Adder.scala 23:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Adder.scala:23 assert(out.c === ref_sum(width))\n") : printf_1 @[playground/src/exp3/Adder.scala 23:9]
      assert(clock, _T_7, UInt<1>("h1"), "") : assert_1 @[playground/src/exp3/Adder.scala 23:9]
    wire carry : UInt<1>[9] @[playground/src/exp3/Adder.scala 40:19]
    wire sum : UInt<1>[8] @[playground/src/exp3/Adder.scala 41:17]
    carry[0] <= in.c @[playground/src/exp3/Adder.scala 42:12]
    node _T_11 = bits(in.a, 0, 0) @[playground/src/exp3/Adder.scala 43:42]
    node _T_12 = bits(in.b, 0, 0) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_0_T = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_0_T_1 = xor(_sum_0_T, carry[0]) @[playground/src/exp3/Adder.scala 34:16]
    sum[0] <= _sum_0_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_1_T = and(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_1_T_1 = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_1_T_2 = and(_carry_1_T_1, carry[0]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_1_T_3 = or(_carry_1_T, _carry_1_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[1] <= _carry_1_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_13 = bits(in.a, 1, 1) @[playground/src/exp3/Adder.scala 43:42]
    node _T_14 = bits(in.b, 1, 1) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_1_T = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_1_T_1 = xor(_sum_1_T, carry[1]) @[playground/src/exp3/Adder.scala 34:16]
    sum[1] <= _sum_1_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_2_T = and(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_2_T_1 = xor(_T_13, _T_14) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_2_T_2 = and(_carry_2_T_1, carry[1]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_2_T_3 = or(_carry_2_T, _carry_2_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[2] <= _carry_2_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_15 = bits(in.a, 2, 2) @[playground/src/exp3/Adder.scala 43:42]
    node _T_16 = bits(in.b, 2, 2) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_2_T = xor(_T_15, _T_16) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_2_T_1 = xor(_sum_2_T, carry[2]) @[playground/src/exp3/Adder.scala 34:16]
    sum[2] <= _sum_2_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_3_T = and(_T_15, _T_16) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_3_T_1 = xor(_T_15, _T_16) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_3_T_2 = and(_carry_3_T_1, carry[2]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_3_T_3 = or(_carry_3_T, _carry_3_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[3] <= _carry_3_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_17 = bits(in.a, 3, 3) @[playground/src/exp3/Adder.scala 43:42]
    node _T_18 = bits(in.b, 3, 3) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_3_T = xor(_T_17, _T_18) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_3_T_1 = xor(_sum_3_T, carry[3]) @[playground/src/exp3/Adder.scala 34:16]
    sum[3] <= _sum_3_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_4_T = and(_T_17, _T_18) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_4_T_1 = xor(_T_17, _T_18) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_4_T_2 = and(_carry_4_T_1, carry[3]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_4_T_3 = or(_carry_4_T, _carry_4_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[4] <= _carry_4_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_19 = bits(in.a, 4, 4) @[playground/src/exp3/Adder.scala 43:42]
    node _T_20 = bits(in.b, 4, 4) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_4_T = xor(_T_19, _T_20) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_4_T_1 = xor(_sum_4_T, carry[4]) @[playground/src/exp3/Adder.scala 34:16]
    sum[4] <= _sum_4_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_5_T = and(_T_19, _T_20) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_5_T_1 = xor(_T_19, _T_20) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_5_T_2 = and(_carry_5_T_1, carry[4]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_5_T_3 = or(_carry_5_T, _carry_5_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[5] <= _carry_5_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_21 = bits(in.a, 5, 5) @[playground/src/exp3/Adder.scala 43:42]
    node _T_22 = bits(in.b, 5, 5) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_5_T = xor(_T_21, _T_22) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_5_T_1 = xor(_sum_5_T, carry[5]) @[playground/src/exp3/Adder.scala 34:16]
    sum[5] <= _sum_5_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_6_T = and(_T_21, _T_22) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_6_T_1 = xor(_T_21, _T_22) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_6_T_2 = and(_carry_6_T_1, carry[5]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_6_T_3 = or(_carry_6_T, _carry_6_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[6] <= _carry_6_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_23 = bits(in.a, 6, 6) @[playground/src/exp3/Adder.scala 43:42]
    node _T_24 = bits(in.b, 6, 6) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_6_T = xor(_T_23, _T_24) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_6_T_1 = xor(_sum_6_T, carry[6]) @[playground/src/exp3/Adder.scala 34:16]
    sum[6] <= _sum_6_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_7_T = and(_T_23, _T_24) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_7_T_1 = xor(_T_23, _T_24) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_7_T_2 = and(_carry_7_T_1, carry[6]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_7_T_3 = or(_carry_7_T, _carry_7_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[7] <= _carry_7_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node _T_25 = bits(in.a, 7, 7) @[playground/src/exp3/Adder.scala 43:42]
    node _T_26 = bits(in.b, 7, 7) @[playground/src/exp3/Adder.scala 43:51]
    node _sum_7_T = xor(_T_25, _T_26) @[playground/src/exp3/Adder.scala 34:12]
    node _sum_7_T_1 = xor(_sum_7_T, carry[7]) @[playground/src/exp3/Adder.scala 34:16]
    sum[7] <= _sum_7_T_1 @[playground/src/exp3/Adder.scala 34:7]
    node _carry_8_T = and(_T_25, _T_26) @[playground/src/exp3/Adder.scala 35:16]
    node _carry_8_T_1 = xor(_T_25, _T_26) @[playground/src/exp3/Adder.scala 35:27]
    node _carry_8_T_2 = and(_carry_8_T_1, carry[7]) @[playground/src/exp3/Adder.scala 35:32]
    node _carry_8_T_3 = or(_carry_8_T, _carry_8_T_2) @[playground/src/exp3/Adder.scala 35:21]
    carry[8] <= _carry_8_T_3 @[playground/src/exp3/Adder.scala 35:10]
    node out_s_lo_lo = cat(sum[1], sum[0]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_lo_hi = cat(sum[3], sum[2]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_lo = cat(out_s_lo_hi, out_s_lo_lo) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_hi_lo = cat(sum[5], sum[4]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_hi_hi = cat(sum[7], sum[6]) @[playground/src/exp3/Adder.scala 44:16]
    node out_s_hi = cat(out_s_hi_hi, out_s_hi_lo) @[playground/src/exp3/Adder.scala 44:16]
    node _out_s_T = cat(out_s_hi, out_s_lo) @[playground/src/exp3/Adder.scala 44:16]
    out.s <= _out_s_T @[playground/src/exp3/Adder.scala 44:9]
    out.c <= carry[8] @[playground/src/exp3/Adder.scala 45:9]

  module RCATest_7 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of RCA_7 @[playground/src/exp3/Adder.scala 27:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<17>("h1ffff"), UInt<17>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<8>, flip b : UInt<8>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<17> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.c <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 8, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 16, 9) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.c <= _m_in_WIRE.c @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for RCA-8bit, may finish after 131072 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: RCA-8bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module CLA :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<4>, flip b : UInt<4>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { s : UInt<4>, c : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _ref_sum_T = add(in.a, in.b) @[playground/src/exp3/Adder.scala 20:22]
    node ref_sum = add(_ref_sum_T, in.c) @[playground/src/exp3/Adder.scala 20:30]
    node _T = bits(ref_sum, 3, 0) @[playground/src/exp3/Adder.scala 21:27]
    node _T_1 = eq(out.s, _T) @[playground/src/exp3/Adder.scala 21:16]
    node _T_2 = bits(ref_sum, 3, 0) @[playground/src/exp3/Adder.scala 22:37]
    node _T_3 = asUInt(reset) @[playground/src/exp3/Adder.scala 21:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
    when _T_4 : @[playground/src/exp3/Adder.scala 21:9]
      node _T_5 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
      when _T_5 : @[playground/src/exp3/Adder.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: a = %d, b = %d, cin = %d, dut_sum = %d, ref_sum = %d\n    at Adder.scala:21 assert(out.s === ref_sum(width - 1, 0), \"a = %%%%d, b = %%%%d, cin = %%%%d, dut_sum = %%%%d, ref_sum = %%%%d\",\n", in.a, in.b, in.c, out.s, _T_2) : printf @[playground/src/exp3/Adder.scala 21:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp3/Adder.scala 21:9]
    node _T_6 = bits(ref_sum, 4, 4) @[playground/src/exp3/Adder.scala 23:27]
    node _T_7 = eq(out.c, _T_6) @[playground/src/exp3/Adder.scala 23:16]
    node _T_8 = asUInt(reset) @[playground/src/exp3/Adder.scala 23:9]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
    when _T_9 : @[playground/src/exp3/Adder.scala 23:9]
      node _T_10 = eq(_T_7, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
      when _T_10 : @[playground/src/exp3/Adder.scala 23:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Adder.scala:23 assert(out.c === ref_sum(width))\n") : printf_1 @[playground/src/exp3/Adder.scala 23:9]
      assert(clock, _T_7, UInt<1>("h1"), "") : assert_1 @[playground/src/exp3/Adder.scala 23:9]
    wire _WIRE : UInt<1> @[playground/src/exp3/Adder.scala 83:50]
    wire _WIRE_1 : UInt<1> @[playground/src/exp3/Adder.scala 83:64]
    node g = and(in.a, in.b) @[playground/src/exp3/Adder.scala 63:19]
    node p = xor(in.a, in.b) @[playground/src/exp3/Adder.scala 64:19]
    node _c_T = bits(g, 3, 3) @[playground/src/exp3/Adder.scala 52:12]
    node _c_T_1 = bits(g, 2, 2) @[playground/src/exp3/Adder.scala 52:20]
    node _c_T_2 = bits(p, 3, 3) @[playground/src/exp3/Adder.scala 52:27]
    node _c_T_3 = and(_c_T_1, _c_T_2) @[playground/src/exp3/Adder.scala 52:24]
    node _c_T_4 = or(_c_T, _c_T_3) @[playground/src/exp3/Adder.scala 52:16]
    node _c_T_5 = bits(g, 1, 1) @[playground/src/exp3/Adder.scala 52:36]
    node _c_T_6 = bits(p, 3, 2) @[playground/src/exp3/Adder.scala 52:43]
    node _c_T_7 = andr(_c_T_6) @[playground/src/exp3/Adder.scala 52:49]
    node _c_T_8 = and(_c_T_5, _c_T_7) @[playground/src/exp3/Adder.scala 52:40]
    node _c_T_9 = or(_c_T_4, _c_T_8) @[playground/src/exp3/Adder.scala 52:32]
    node _c_T_10 = bits(g, 0, 0) @[playground/src/exp3/Adder.scala 52:59]
    node _c_T_11 = bits(p, 3, 1) @[playground/src/exp3/Adder.scala 52:66]
    node _c_T_12 = andr(_c_T_11) @[playground/src/exp3/Adder.scala 52:72]
    node _c_T_13 = and(_c_T_10, _c_T_12) @[playground/src/exp3/Adder.scala 52:63]
    node _c_T_14 = or(_c_T_9, _c_T_13) @[playground/src/exp3/Adder.scala 52:55]
    _WIRE <= _c_T_14 @[playground/src/exp3/Adder.scala 52:8]
    node _c_T_15 = andr(p) @[playground/src/exp3/Adder.scala 53:13]
    _WIRE_1 <= _c_T_15 @[playground/src/exp3/Adder.scala 53:8]
    node _c_out_c_T = and(in.c, _WIRE_1) @[playground/src/exp3/Adder.scala 54:19]
    node _c_out_c_T_1 = or(_WIRE, _c_out_c_T) @[playground/src/exp3/Adder.scala 54:14]
    out.c <= _c_out_c_T_1 @[playground/src/exp3/Adder.scala 54:8]
    wire c_carry : UInt<1>[4] @[playground/src/exp3/Adder.scala 55:21]
    c_carry[0] <= in.c @[playground/src/exp3/Adder.scala 56:14]
    node _c_carry_1_T = bits(g, 0, 0) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_1_T_1 = bits(p, 0, 0) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_1_T_2 = and(c_carry[0], _c_carry_1_T_1) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_1_T_3 = or(_c_carry_1_T, _c_carry_1_T_2) @[playground/src/exp3/Adder.scala 57:46]
    c_carry[1] <= _c_carry_1_T_3 @[playground/src/exp3/Adder.scala 57:38]
    node _c_carry_2_T = bits(g, 1, 1) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_2_T_1 = bits(p, 1, 1) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_2_T_2 = and(c_carry[1], _c_carry_2_T_1) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_2_T_3 = or(_c_carry_2_T, _c_carry_2_T_2) @[playground/src/exp3/Adder.scala 57:46]
    c_carry[2] <= _c_carry_2_T_3 @[playground/src/exp3/Adder.scala 57:38]
    node _c_carry_3_T = bits(g, 2, 2) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_3_T_1 = bits(p, 2, 2) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_3_T_2 = and(c_carry[2], _c_carry_3_T_1) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_3_T_3 = or(_c_carry_3_T, _c_carry_3_T_2) @[playground/src/exp3/Adder.scala 57:46]
    c_carry[3] <= _c_carry_3_T_3 @[playground/src/exp3/Adder.scala 57:38]
    node c_lo = cat(c_carry[1], c_carry[0]) @[playground/src/exp3/Adder.scala 58:11]
    node c_hi = cat(c_carry[3], c_carry[2]) @[playground/src/exp3/Adder.scala 58:11]
    node c = cat(c_hi, c_lo) @[playground/src/exp3/Adder.scala 58:11]
    node _out_s_T = xor(p, c) @[playground/src/exp3/Adder.scala 66:16]
    out.s <= _out_s_T @[playground/src/exp3/Adder.scala 66:11]

  module CLATest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of CLA @[playground/src/exp3/Adder.scala 27:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<9>("h1ff"), UInt<9>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<4>, flip b : UInt<4>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<9> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.c <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 4, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 8, 5) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.c <= _m_in_WIRE.c @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for CLA-4bit, may finish after 512 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: CLA-4bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module CLA_1 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<16>, flip b : UInt<16>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 27:14]
    output out : { s : UInt<16>, c : UInt<1>} @[playground/src/utils/Utils.scala 28:15]

    node _ref_sum_T = add(in.a, in.b) @[playground/src/exp3/Adder.scala 20:22]
    node ref_sum = add(_ref_sum_T, in.c) @[playground/src/exp3/Adder.scala 20:30]
    node _T = bits(ref_sum, 15, 0) @[playground/src/exp3/Adder.scala 21:27]
    node _T_1 = eq(out.s, _T) @[playground/src/exp3/Adder.scala 21:16]
    node _T_2 = bits(ref_sum, 15, 0) @[playground/src/exp3/Adder.scala 22:37]
    node _T_3 = asUInt(reset) @[playground/src/exp3/Adder.scala 21:9]
    node _T_4 = eq(_T_3, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
    when _T_4 : @[playground/src/exp3/Adder.scala 21:9]
      node _T_5 = eq(_T_1, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 21:9]
      when _T_5 : @[playground/src/exp3/Adder.scala 21:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: a = %d, b = %d, cin = %d, dut_sum = %d, ref_sum = %d\n    at Adder.scala:21 assert(out.s === ref_sum(width - 1, 0), \"a = %%%%d, b = %%%%d, cin = %%%%d, dut_sum = %%%%d, ref_sum = %%%%d\",\n", in.a, in.b, in.c, out.s, _T_2) : printf @[playground/src/exp3/Adder.scala 21:9]
      assert(clock, _T_1, UInt<1>("h1"), "") : assert @[playground/src/exp3/Adder.scala 21:9]
    node _T_6 = bits(ref_sum, 16, 16) @[playground/src/exp3/Adder.scala 23:27]
    node _T_7 = eq(out.c, _T_6) @[playground/src/exp3/Adder.scala 23:16]
    node _T_8 = asUInt(reset) @[playground/src/exp3/Adder.scala 23:9]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
    when _T_9 : @[playground/src/exp3/Adder.scala 23:9]
      node _T_10 = eq(_T_7, UInt<1>("h0")) @[playground/src/exp3/Adder.scala 23:9]
      when _T_10 : @[playground/src/exp3/Adder.scala 23:9]
        printf(clock, UInt<1>("h1"), "Assertion failed\n    at Adder.scala:23 assert(out.c === ref_sum(width))\n") : printf_1 @[playground/src/exp3/Adder.scala 23:9]
      assert(clock, _T_7, UInt<1>("h1"), "") : assert_1 @[playground/src/exp3/Adder.scala 23:9]
    wire _WIRE : UInt<1> @[playground/src/exp3/Adder.scala 83:50]
    wire _WIRE_1 : UInt<1> @[playground/src/exp3/Adder.scala 83:64]
    wire sum : UInt<4>[4] @[playground/src/exp3/Adder.scala 71:23]
    wire g : UInt<1>[4] @[playground/src/exp3/Adder.scala 72:21]
    wire p : UInt<1>[4] @[playground/src/exp3/Adder.scala 73:21]
    node c_lo = cat(g[1], g[0]) @[playground/src/exp3/Adder.scala 74:23]
    node c_hi = cat(g[3], g[2]) @[playground/src/exp3/Adder.scala 74:23]
    node _c_T = cat(c_hi, c_lo) @[playground/src/exp3/Adder.scala 74:23]
    node c_lo_1 = cat(p[1], p[0]) @[playground/src/exp3/Adder.scala 74:33]
    node c_hi_1 = cat(p[3], p[2]) @[playground/src/exp3/Adder.scala 74:33]
    node _c_T_1 = cat(c_hi_1, c_lo_1) @[playground/src/exp3/Adder.scala 74:33]
    node _c_T_2 = bits(_c_T, 3, 3) @[playground/src/exp3/Adder.scala 52:12]
    node _c_T_3 = bits(_c_T, 2, 2) @[playground/src/exp3/Adder.scala 52:20]
    node _c_T_4 = bits(_c_T_1, 3, 3) @[playground/src/exp3/Adder.scala 52:27]
    node _c_T_5 = and(_c_T_3, _c_T_4) @[playground/src/exp3/Adder.scala 52:24]
    node _c_T_6 = or(_c_T_2, _c_T_5) @[playground/src/exp3/Adder.scala 52:16]
    node _c_T_7 = bits(_c_T, 1, 1) @[playground/src/exp3/Adder.scala 52:36]
    node _c_T_8 = bits(_c_T_1, 3, 2) @[playground/src/exp3/Adder.scala 52:43]
    node _c_T_9 = andr(_c_T_8) @[playground/src/exp3/Adder.scala 52:49]
    node _c_T_10 = and(_c_T_7, _c_T_9) @[playground/src/exp3/Adder.scala 52:40]
    node _c_T_11 = or(_c_T_6, _c_T_10) @[playground/src/exp3/Adder.scala 52:32]
    node _c_T_12 = bits(_c_T, 0, 0) @[playground/src/exp3/Adder.scala 52:59]
    node _c_T_13 = bits(_c_T_1, 3, 1) @[playground/src/exp3/Adder.scala 52:66]
    node _c_T_14 = andr(_c_T_13) @[playground/src/exp3/Adder.scala 52:72]
    node _c_T_15 = and(_c_T_12, _c_T_14) @[playground/src/exp3/Adder.scala 52:63]
    node _c_T_16 = or(_c_T_11, _c_T_15) @[playground/src/exp3/Adder.scala 52:55]
    _WIRE <= _c_T_16 @[playground/src/exp3/Adder.scala 52:8]
    node _c_T_17 = andr(_c_T_1) @[playground/src/exp3/Adder.scala 53:13]
    _WIRE_1 <= _c_T_17 @[playground/src/exp3/Adder.scala 53:8]
    node _c_out_c_T = and(in.c, _WIRE_1) @[playground/src/exp3/Adder.scala 54:19]
    node _c_out_c_T_1 = or(_WIRE, _c_out_c_T) @[playground/src/exp3/Adder.scala 54:14]
    out.c <= _c_out_c_T_1 @[playground/src/exp3/Adder.scala 54:8]
    wire c_carry : UInt<1>[4] @[playground/src/exp3/Adder.scala 55:21]
    c_carry[0] <= in.c @[playground/src/exp3/Adder.scala 56:14]
    node _c_carry_1_T = bits(_c_T, 0, 0) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_1_T_1 = bits(_c_T_1, 0, 0) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_1_T_2 = and(c_carry[0], _c_carry_1_T_1) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_1_T_3 = or(_c_carry_1_T, _c_carry_1_T_2) @[playground/src/exp3/Adder.scala 57:46]
    c_carry[1] <= _c_carry_1_T_3 @[playground/src/exp3/Adder.scala 57:38]
    node _c_carry_2_T = bits(_c_T, 1, 1) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_2_T_1 = bits(_c_T_1, 1, 1) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_2_T_2 = and(c_carry[1], _c_carry_2_T_1) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_2_T_3 = or(_c_carry_2_T, _c_carry_2_T_2) @[playground/src/exp3/Adder.scala 57:46]
    c_carry[2] <= _c_carry_2_T_3 @[playground/src/exp3/Adder.scala 57:38]
    node _c_carry_3_T = bits(_c_T, 2, 2) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_3_T_1 = bits(_c_T_1, 2, 2) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_3_T_2 = and(c_carry[2], _c_carry_3_T_1) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_3_T_3 = or(_c_carry_3_T, _c_carry_3_T_2) @[playground/src/exp3/Adder.scala 57:46]
    c_carry[3] <= _c_carry_3_T_3 @[playground/src/exp3/Adder.scala 57:38]
    node c_lo_2 = cat(c_carry[1], c_carry[0]) @[playground/src/exp3/Adder.scala 58:11]
    node c_hi_2 = cat(c_carry[3], c_carry[2]) @[playground/src/exp3/Adder.scala 58:11]
    node c = cat(c_hi_2, c_lo_2) @[playground/src/exp3/Adder.scala 58:11]
    node _T_11 = bits(in.a, 3, 0) @[playground/src/exp3/Adder.scala 75:37]
    node _T_12 = bits(in.b, 3, 0) @[playground/src/exp3/Adder.scala 75:54]
    node _T_13 = bits(c, 0, 0) @[playground/src/exp3/Adder.scala 75:71]
    wire _WIRE_2 : UInt<1> @[playground/src/exp3/Adder.scala 75:88]
    node g_1 = and(_T_11, _T_12) @[playground/src/exp3/Adder.scala 63:19]
    node p_1 = xor(_T_11, _T_12) @[playground/src/exp3/Adder.scala 64:19]
    node _c_g_0_T = bits(g_1, 3, 3) @[playground/src/exp3/Adder.scala 52:12]
    node _c_g_0_T_1 = bits(g_1, 2, 2) @[playground/src/exp3/Adder.scala 52:20]
    node _c_g_0_T_2 = bits(p_1, 3, 3) @[playground/src/exp3/Adder.scala 52:27]
    node _c_g_0_T_3 = and(_c_g_0_T_1, _c_g_0_T_2) @[playground/src/exp3/Adder.scala 52:24]
    node _c_g_0_T_4 = or(_c_g_0_T, _c_g_0_T_3) @[playground/src/exp3/Adder.scala 52:16]
    node _c_g_0_T_5 = bits(g_1, 1, 1) @[playground/src/exp3/Adder.scala 52:36]
    node _c_g_0_T_6 = bits(p_1, 3, 2) @[playground/src/exp3/Adder.scala 52:43]
    node _c_g_0_T_7 = andr(_c_g_0_T_6) @[playground/src/exp3/Adder.scala 52:49]
    node _c_g_0_T_8 = and(_c_g_0_T_5, _c_g_0_T_7) @[playground/src/exp3/Adder.scala 52:40]
    node _c_g_0_T_9 = or(_c_g_0_T_4, _c_g_0_T_8) @[playground/src/exp3/Adder.scala 52:32]
    node _c_g_0_T_10 = bits(g_1, 0, 0) @[playground/src/exp3/Adder.scala 52:59]
    node _c_g_0_T_11 = bits(p_1, 3, 1) @[playground/src/exp3/Adder.scala 52:66]
    node _c_g_0_T_12 = andr(_c_g_0_T_11) @[playground/src/exp3/Adder.scala 52:72]
    node _c_g_0_T_13 = and(_c_g_0_T_10, _c_g_0_T_12) @[playground/src/exp3/Adder.scala 52:63]
    node _c_g_0_T_14 = or(_c_g_0_T_9, _c_g_0_T_13) @[playground/src/exp3/Adder.scala 52:55]
    g[0] <= _c_g_0_T_14 @[playground/src/exp3/Adder.scala 52:8]
    node _c_p_0_T = andr(p_1) @[playground/src/exp3/Adder.scala 53:13]
    p[0] <= _c_p_0_T @[playground/src/exp3/Adder.scala 53:8]
    node _c_T_18 = and(_T_13, p[0]) @[playground/src/exp3/Adder.scala 54:19]
    node _c_T_19 = or(g[0], _c_T_18) @[playground/src/exp3/Adder.scala 54:14]
    _WIRE_2 <= _c_T_19 @[playground/src/exp3/Adder.scala 54:8]
    wire c_carry_1 : UInt<1>[4] @[playground/src/exp3/Adder.scala 55:21]
    c_carry_1[0] <= _T_13 @[playground/src/exp3/Adder.scala 56:14]
    node _c_carry_1_T_4 = bits(g_1, 0, 0) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_1_T_5 = bits(p_1, 0, 0) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_1_T_6 = and(c_carry_1[0], _c_carry_1_T_5) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_1_T_7 = or(_c_carry_1_T_4, _c_carry_1_T_6) @[playground/src/exp3/Adder.scala 57:46]
    c_carry_1[1] <= _c_carry_1_T_7 @[playground/src/exp3/Adder.scala 57:38]
    node _c_carry_2_T_4 = bits(g_1, 1, 1) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_2_T_5 = bits(p_1, 1, 1) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_2_T_6 = and(c_carry_1[1], _c_carry_2_T_5) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_2_T_7 = or(_c_carry_2_T_4, _c_carry_2_T_6) @[playground/src/exp3/Adder.scala 57:46]
    c_carry_1[2] <= _c_carry_2_T_7 @[playground/src/exp3/Adder.scala 57:38]
    node _c_carry_3_T_4 = bits(g_1, 2, 2) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_3_T_5 = bits(p_1, 2, 2) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_3_T_6 = and(c_carry_1[2], _c_carry_3_T_5) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_3_T_7 = or(_c_carry_3_T_4, _c_carry_3_T_6) @[playground/src/exp3/Adder.scala 57:46]
    c_carry_1[3] <= _c_carry_3_T_7 @[playground/src/exp3/Adder.scala 57:38]
    node c_lo_3 = cat(c_carry_1[1], c_carry_1[0]) @[playground/src/exp3/Adder.scala 58:11]
    node c_hi_3 = cat(c_carry_1[3], c_carry_1[2]) @[playground/src/exp3/Adder.scala 58:11]
    node c_1 = cat(c_hi_3, c_lo_3) @[playground/src/exp3/Adder.scala 58:11]
    node _sum_0_T = xor(p_1, c_1) @[playground/src/exp3/Adder.scala 66:16]
    sum[0] <= _sum_0_T @[playground/src/exp3/Adder.scala 66:11]
    node _T_14 = bits(in.a, 7, 4) @[playground/src/exp3/Adder.scala 75:37]
    node _T_15 = bits(in.b, 7, 4) @[playground/src/exp3/Adder.scala 75:54]
    node _T_16 = bits(c, 1, 1) @[playground/src/exp3/Adder.scala 75:71]
    wire _WIRE_3 : UInt<1> @[playground/src/exp3/Adder.scala 75:88]
    node g_2 = and(_T_14, _T_15) @[playground/src/exp3/Adder.scala 63:19]
    node p_2 = xor(_T_14, _T_15) @[playground/src/exp3/Adder.scala 64:19]
    node _c_g_1_T = bits(g_2, 3, 3) @[playground/src/exp3/Adder.scala 52:12]
    node _c_g_1_T_1 = bits(g_2, 2, 2) @[playground/src/exp3/Adder.scala 52:20]
    node _c_g_1_T_2 = bits(p_2, 3, 3) @[playground/src/exp3/Adder.scala 52:27]
    node _c_g_1_T_3 = and(_c_g_1_T_1, _c_g_1_T_2) @[playground/src/exp3/Adder.scala 52:24]
    node _c_g_1_T_4 = or(_c_g_1_T, _c_g_1_T_3) @[playground/src/exp3/Adder.scala 52:16]
    node _c_g_1_T_5 = bits(g_2, 1, 1) @[playground/src/exp3/Adder.scala 52:36]
    node _c_g_1_T_6 = bits(p_2, 3, 2) @[playground/src/exp3/Adder.scala 52:43]
    node _c_g_1_T_7 = andr(_c_g_1_T_6) @[playground/src/exp3/Adder.scala 52:49]
    node _c_g_1_T_8 = and(_c_g_1_T_5, _c_g_1_T_7) @[playground/src/exp3/Adder.scala 52:40]
    node _c_g_1_T_9 = or(_c_g_1_T_4, _c_g_1_T_8) @[playground/src/exp3/Adder.scala 52:32]
    node _c_g_1_T_10 = bits(g_2, 0, 0) @[playground/src/exp3/Adder.scala 52:59]
    node _c_g_1_T_11 = bits(p_2, 3, 1) @[playground/src/exp3/Adder.scala 52:66]
    node _c_g_1_T_12 = andr(_c_g_1_T_11) @[playground/src/exp3/Adder.scala 52:72]
    node _c_g_1_T_13 = and(_c_g_1_T_10, _c_g_1_T_12) @[playground/src/exp3/Adder.scala 52:63]
    node _c_g_1_T_14 = or(_c_g_1_T_9, _c_g_1_T_13) @[playground/src/exp3/Adder.scala 52:55]
    g[1] <= _c_g_1_T_14 @[playground/src/exp3/Adder.scala 52:8]
    node _c_p_1_T = andr(p_2) @[playground/src/exp3/Adder.scala 53:13]
    p[1] <= _c_p_1_T @[playground/src/exp3/Adder.scala 53:8]
    node _c_T_20 = and(_T_16, p[1]) @[playground/src/exp3/Adder.scala 54:19]
    node _c_T_21 = or(g[1], _c_T_20) @[playground/src/exp3/Adder.scala 54:14]
    _WIRE_3 <= _c_T_21 @[playground/src/exp3/Adder.scala 54:8]
    wire c_carry_2 : UInt<1>[4] @[playground/src/exp3/Adder.scala 55:21]
    c_carry_2[0] <= _T_16 @[playground/src/exp3/Adder.scala 56:14]
    node _c_carry_1_T_8 = bits(g_2, 0, 0) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_1_T_9 = bits(p_2, 0, 0) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_1_T_10 = and(c_carry_2[0], _c_carry_1_T_9) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_1_T_11 = or(_c_carry_1_T_8, _c_carry_1_T_10) @[playground/src/exp3/Adder.scala 57:46]
    c_carry_2[1] <= _c_carry_1_T_11 @[playground/src/exp3/Adder.scala 57:38]
    node _c_carry_2_T_8 = bits(g_2, 1, 1) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_2_T_9 = bits(p_2, 1, 1) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_2_T_10 = and(c_carry_2[1], _c_carry_2_T_9) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_2_T_11 = or(_c_carry_2_T_8, _c_carry_2_T_10) @[playground/src/exp3/Adder.scala 57:46]
    c_carry_2[2] <= _c_carry_2_T_11 @[playground/src/exp3/Adder.scala 57:38]
    node _c_carry_3_T_8 = bits(g_2, 2, 2) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_3_T_9 = bits(p_2, 2, 2) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_3_T_10 = and(c_carry_2[2], _c_carry_3_T_9) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_3_T_11 = or(_c_carry_3_T_8, _c_carry_3_T_10) @[playground/src/exp3/Adder.scala 57:46]
    c_carry_2[3] <= _c_carry_3_T_11 @[playground/src/exp3/Adder.scala 57:38]
    node c_lo_4 = cat(c_carry_2[1], c_carry_2[0]) @[playground/src/exp3/Adder.scala 58:11]
    node c_hi_4 = cat(c_carry_2[3], c_carry_2[2]) @[playground/src/exp3/Adder.scala 58:11]
    node c_2 = cat(c_hi_4, c_lo_4) @[playground/src/exp3/Adder.scala 58:11]
    node _sum_1_T = xor(p_2, c_2) @[playground/src/exp3/Adder.scala 66:16]
    sum[1] <= _sum_1_T @[playground/src/exp3/Adder.scala 66:11]
    node _T_17 = bits(in.a, 11, 8) @[playground/src/exp3/Adder.scala 75:37]
    node _T_18 = bits(in.b, 11, 8) @[playground/src/exp3/Adder.scala 75:54]
    node _T_19 = bits(c, 2, 2) @[playground/src/exp3/Adder.scala 75:71]
    wire _WIRE_4 : UInt<1> @[playground/src/exp3/Adder.scala 75:88]
    node g_3 = and(_T_17, _T_18) @[playground/src/exp3/Adder.scala 63:19]
    node p_3 = xor(_T_17, _T_18) @[playground/src/exp3/Adder.scala 64:19]
    node _c_g_2_T = bits(g_3, 3, 3) @[playground/src/exp3/Adder.scala 52:12]
    node _c_g_2_T_1 = bits(g_3, 2, 2) @[playground/src/exp3/Adder.scala 52:20]
    node _c_g_2_T_2 = bits(p_3, 3, 3) @[playground/src/exp3/Adder.scala 52:27]
    node _c_g_2_T_3 = and(_c_g_2_T_1, _c_g_2_T_2) @[playground/src/exp3/Adder.scala 52:24]
    node _c_g_2_T_4 = or(_c_g_2_T, _c_g_2_T_3) @[playground/src/exp3/Adder.scala 52:16]
    node _c_g_2_T_5 = bits(g_3, 1, 1) @[playground/src/exp3/Adder.scala 52:36]
    node _c_g_2_T_6 = bits(p_3, 3, 2) @[playground/src/exp3/Adder.scala 52:43]
    node _c_g_2_T_7 = andr(_c_g_2_T_6) @[playground/src/exp3/Adder.scala 52:49]
    node _c_g_2_T_8 = and(_c_g_2_T_5, _c_g_2_T_7) @[playground/src/exp3/Adder.scala 52:40]
    node _c_g_2_T_9 = or(_c_g_2_T_4, _c_g_2_T_8) @[playground/src/exp3/Adder.scala 52:32]
    node _c_g_2_T_10 = bits(g_3, 0, 0) @[playground/src/exp3/Adder.scala 52:59]
    node _c_g_2_T_11 = bits(p_3, 3, 1) @[playground/src/exp3/Adder.scala 52:66]
    node _c_g_2_T_12 = andr(_c_g_2_T_11) @[playground/src/exp3/Adder.scala 52:72]
    node _c_g_2_T_13 = and(_c_g_2_T_10, _c_g_2_T_12) @[playground/src/exp3/Adder.scala 52:63]
    node _c_g_2_T_14 = or(_c_g_2_T_9, _c_g_2_T_13) @[playground/src/exp3/Adder.scala 52:55]
    g[2] <= _c_g_2_T_14 @[playground/src/exp3/Adder.scala 52:8]
    node _c_p_2_T = andr(p_3) @[playground/src/exp3/Adder.scala 53:13]
    p[2] <= _c_p_2_T @[playground/src/exp3/Adder.scala 53:8]
    node _c_T_22 = and(_T_19, p[2]) @[playground/src/exp3/Adder.scala 54:19]
    node _c_T_23 = or(g[2], _c_T_22) @[playground/src/exp3/Adder.scala 54:14]
    _WIRE_4 <= _c_T_23 @[playground/src/exp3/Adder.scala 54:8]
    wire c_carry_3 : UInt<1>[4] @[playground/src/exp3/Adder.scala 55:21]
    c_carry_3[0] <= _T_19 @[playground/src/exp3/Adder.scala 56:14]
    node _c_carry_1_T_12 = bits(g_3, 0, 0) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_1_T_13 = bits(p_3, 0, 0) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_1_T_14 = and(c_carry_3[0], _c_carry_1_T_13) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_1_T_15 = or(_c_carry_1_T_12, _c_carry_1_T_14) @[playground/src/exp3/Adder.scala 57:46]
    c_carry_3[1] <= _c_carry_1_T_15 @[playground/src/exp3/Adder.scala 57:38]
    node _c_carry_2_T_12 = bits(g_3, 1, 1) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_2_T_13 = bits(p_3, 1, 1) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_2_T_14 = and(c_carry_3[1], _c_carry_2_T_13) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_2_T_15 = or(_c_carry_2_T_12, _c_carry_2_T_14) @[playground/src/exp3/Adder.scala 57:46]
    c_carry_3[2] <= _c_carry_2_T_15 @[playground/src/exp3/Adder.scala 57:38]
    node _c_carry_3_T_12 = bits(g_3, 2, 2) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_3_T_13 = bits(p_3, 2, 2) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_3_T_14 = and(c_carry_3[2], _c_carry_3_T_13) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_3_T_15 = or(_c_carry_3_T_12, _c_carry_3_T_14) @[playground/src/exp3/Adder.scala 57:46]
    c_carry_3[3] <= _c_carry_3_T_15 @[playground/src/exp3/Adder.scala 57:38]
    node c_lo_5 = cat(c_carry_3[1], c_carry_3[0]) @[playground/src/exp3/Adder.scala 58:11]
    node c_hi_5 = cat(c_carry_3[3], c_carry_3[2]) @[playground/src/exp3/Adder.scala 58:11]
    node c_3 = cat(c_hi_5, c_lo_5) @[playground/src/exp3/Adder.scala 58:11]
    node _sum_2_T = xor(p_3, c_3) @[playground/src/exp3/Adder.scala 66:16]
    sum[2] <= _sum_2_T @[playground/src/exp3/Adder.scala 66:11]
    node _T_20 = bits(in.a, 15, 12) @[playground/src/exp3/Adder.scala 75:37]
    node _T_21 = bits(in.b, 15, 12) @[playground/src/exp3/Adder.scala 75:54]
    node _T_22 = bits(c, 3, 3) @[playground/src/exp3/Adder.scala 75:71]
    wire _WIRE_5 : UInt<1> @[playground/src/exp3/Adder.scala 75:88]
    node g_4 = and(_T_20, _T_21) @[playground/src/exp3/Adder.scala 63:19]
    node p_4 = xor(_T_20, _T_21) @[playground/src/exp3/Adder.scala 64:19]
    node _c_g_3_T = bits(g_4, 3, 3) @[playground/src/exp3/Adder.scala 52:12]
    node _c_g_3_T_1 = bits(g_4, 2, 2) @[playground/src/exp3/Adder.scala 52:20]
    node _c_g_3_T_2 = bits(p_4, 3, 3) @[playground/src/exp3/Adder.scala 52:27]
    node _c_g_3_T_3 = and(_c_g_3_T_1, _c_g_3_T_2) @[playground/src/exp3/Adder.scala 52:24]
    node _c_g_3_T_4 = or(_c_g_3_T, _c_g_3_T_3) @[playground/src/exp3/Adder.scala 52:16]
    node _c_g_3_T_5 = bits(g_4, 1, 1) @[playground/src/exp3/Adder.scala 52:36]
    node _c_g_3_T_6 = bits(p_4, 3, 2) @[playground/src/exp3/Adder.scala 52:43]
    node _c_g_3_T_7 = andr(_c_g_3_T_6) @[playground/src/exp3/Adder.scala 52:49]
    node _c_g_3_T_8 = and(_c_g_3_T_5, _c_g_3_T_7) @[playground/src/exp3/Adder.scala 52:40]
    node _c_g_3_T_9 = or(_c_g_3_T_4, _c_g_3_T_8) @[playground/src/exp3/Adder.scala 52:32]
    node _c_g_3_T_10 = bits(g_4, 0, 0) @[playground/src/exp3/Adder.scala 52:59]
    node _c_g_3_T_11 = bits(p_4, 3, 1) @[playground/src/exp3/Adder.scala 52:66]
    node _c_g_3_T_12 = andr(_c_g_3_T_11) @[playground/src/exp3/Adder.scala 52:72]
    node _c_g_3_T_13 = and(_c_g_3_T_10, _c_g_3_T_12) @[playground/src/exp3/Adder.scala 52:63]
    node _c_g_3_T_14 = or(_c_g_3_T_9, _c_g_3_T_13) @[playground/src/exp3/Adder.scala 52:55]
    g[3] <= _c_g_3_T_14 @[playground/src/exp3/Adder.scala 52:8]
    node _c_p_3_T = andr(p_4) @[playground/src/exp3/Adder.scala 53:13]
    p[3] <= _c_p_3_T @[playground/src/exp3/Adder.scala 53:8]
    node _c_T_24 = and(_T_22, p[3]) @[playground/src/exp3/Adder.scala 54:19]
    node _c_T_25 = or(g[3], _c_T_24) @[playground/src/exp3/Adder.scala 54:14]
    _WIRE_5 <= _c_T_25 @[playground/src/exp3/Adder.scala 54:8]
    wire c_carry_4 : UInt<1>[4] @[playground/src/exp3/Adder.scala 55:21]
    c_carry_4[0] <= _T_22 @[playground/src/exp3/Adder.scala 56:14]
    node _c_carry_1_T_16 = bits(g_4, 0, 0) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_1_T_17 = bits(p_4, 0, 0) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_1_T_18 = and(c_carry_4[0], _c_carry_1_T_17) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_1_T_19 = or(_c_carry_1_T_16, _c_carry_1_T_18) @[playground/src/exp3/Adder.scala 57:46]
    c_carry_4[1] <= _c_carry_1_T_19 @[playground/src/exp3/Adder.scala 57:38]
    node _c_carry_2_T_16 = bits(g_4, 1, 1) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_2_T_17 = bits(p_4, 1, 1) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_2_T_18 = and(c_carry_4[1], _c_carry_2_T_17) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_2_T_19 = or(_c_carry_2_T_16, _c_carry_2_T_18) @[playground/src/exp3/Adder.scala 57:46]
    c_carry_4[2] <= _c_carry_2_T_19 @[playground/src/exp3/Adder.scala 57:38]
    node _c_carry_3_T_16 = bits(g_4, 2, 2) @[playground/src/exp3/Adder.scala 57:42]
    node _c_carry_3_T_17 = bits(p_4, 2, 2) @[playground/src/exp3/Adder.scala 57:61]
    node _c_carry_3_T_18 = and(c_carry_4[2], _c_carry_3_T_17) @[playground/src/exp3/Adder.scala 57:58]
    node _c_carry_3_T_19 = or(_c_carry_3_T_16, _c_carry_3_T_18) @[playground/src/exp3/Adder.scala 57:46]
    c_carry_4[3] <= _c_carry_3_T_19 @[playground/src/exp3/Adder.scala 57:38]
    node c_lo_6 = cat(c_carry_4[1], c_carry_4[0]) @[playground/src/exp3/Adder.scala 58:11]
    node c_hi_6 = cat(c_carry_4[3], c_carry_4[2]) @[playground/src/exp3/Adder.scala 58:11]
    node c_4 = cat(c_hi_6, c_lo_6) @[playground/src/exp3/Adder.scala 58:11]
    node _sum_3_T = xor(p_4, c_4) @[playground/src/exp3/Adder.scala 66:16]
    sum[3] <= _sum_3_T @[playground/src/exp3/Adder.scala 66:11]
    node out_s_lo = cat(sum[1], sum[0]) @[playground/src/exp3/Adder.scala 76:18]
    node out_s_hi = cat(sum[3], sum[2]) @[playground/src/exp3/Adder.scala 76:18]
    node _out_s_T = cat(out_s_hi, out_s_lo) @[playground/src/exp3/Adder.scala 76:18]
    out.s <= _out_s_T @[playground/src/exp3/Adder.scala 76:11]

  module CLATest_1 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of CLA_1 @[playground/src/exp3/Adder.scala 27:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<33>, clock with :
      reset => (reset, UInt<33>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<33>("h1ffffffff"), UInt<33>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<16>, flip b : UInt<16>, flip c : UInt<1>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<33> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 0, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.c <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 16, 1) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 32, 17) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.c <= _m_in_WIRE.c @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for CLA-16bit, may finish after 8589934592 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: CLA-16bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module ALU :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<2>, flip b : UInt<2>, flip op : UInt<3>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<2> @[playground/src/utils/Utils.scala 28:15]

    node is_sub = neq(in.op, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 14:23]
    node _b_inv_T = bits(is_sub, 0, 0) @[playground/src/exp3/ALU.scala 15:26]
    node _b_inv_T_1 = mux(_b_inv_T, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp3/ALU.scala 15:26]
    node b_inv = xor(in.b, _b_inv_T_1) @[playground/src/exp3/ALU.scala 15:20]
    node _sum_T = add(in.a, b_inv) @[playground/src/exp3/ALU.scala 16:18]
    node _sum_T_1 = tail(_sum_T, 1) @[playground/src/exp3/ALU.scala 16:18]
    node _sum_T_2 = add(_sum_T_1, is_sub) @[playground/src/exp3/ALU.scala 16:26]
    node sum = tail(_sum_T_2, 1) @[playground/src/exp3/ALU.scala 16:26]
    node _of_T = bits(in.a, 1, 1) @[playground/src/exp3/ALU.scala 17:17]
    node _of_T_1 = bits(in.b, 1, 1) @[playground/src/exp3/ALU.scala 17:35]
    node _of_T_2 = neq(_of_T, _of_T_1) @[playground/src/exp3/ALU.scala 17:27]
    node _of_T_3 = bits(sum, 1, 1) @[playground/src/exp3/ALU.scala 17:53]
    node _of_T_4 = bits(in.a, 1, 1) @[playground/src/exp3/ALU.scala 17:71]
    node _of_T_5 = neq(_of_T_3, _of_T_4) @[playground/src/exp3/ALU.scala 17:63]
    node of = and(_of_T_2, _of_T_5) @[playground/src/exp3/ALU.scala 17:46]
    node _less_T = bits(sum, 1, 1) @[playground/src/exp3/ALU.scala 18:17]
    node less = xor(_less_T, of) @[playground/src/exp3/ALU.scala 18:27]
    node _T = not(in.a) @[playground/src/exp3/ALU.scala 23:11]
    node _T_1 = and(in.a, in.b) @[playground/src/exp3/ALU.scala 24:16]
    node _T_2 = or(in.a, in.b) @[playground/src/exp3/ALU.scala 25:16]
    node _T_3 = xor(in.a, in.b) @[playground/src/exp3/ALU.scala 26:16]
    node _T_4 = eq(in.a, in.b) @[playground/src/exp3/ALU.scala 28:16]
    node _out_T = eq(in.op, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_2 = mux(_out_T_1, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_3 = and(_out_T_2, sum) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_4 = eq(in.op, UInt<1>("h1")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_6 = mux(_out_T_5, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_7 = and(_out_T_6, sum) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_8 = eq(in.op, UInt<2>("h2")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_9 = bits(_out_T_8, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_10 = mux(_out_T_9, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_11 = and(_out_T_10, _T) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_12 = eq(in.op, UInt<2>("h3")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_13 = bits(_out_T_12, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_14 = mux(_out_T_13, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_15 = and(_out_T_14, _T_1) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_16 = eq(in.op, UInt<3>("h4")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_17 = bits(_out_T_16, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_18 = mux(_out_T_17, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_19 = and(_out_T_18, _T_2) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_20 = eq(in.op, UInt<3>("h5")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_21 = bits(_out_T_20, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_22 = mux(_out_T_21, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_23 = and(_out_T_22, _T_3) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_24 = eq(in.op, UInt<3>("h6")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_25 = bits(_out_T_24, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_26 = mux(_out_T_25, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_27 = and(_out_T_26, less) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_28 = eq(in.op, UInt<3>("h7")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_29 = bits(_out_T_28, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_30 = mux(_out_T_29, UInt<2>("h3"), UInt<2>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_31 = and(_out_T_30, _T_4) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_32 = or(_out_T_3, _out_T_7) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_33 = or(_out_T_32, _out_T_11) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_34 = or(_out_T_33, _out_T_15) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_35 = or(_out_T_34, _out_T_19) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_36 = or(_out_T_35, _out_T_23) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_37 = or(_out_T_36, _out_T_27) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_38 = or(_out_T_37, _out_T_31) @[playground/src/exp3/ALU.scala 30:71]
    out <= _out_T_38 @[playground/src/exp3/ALU.scala 30:7]
    node _T_5 = add(in.a, in.b) @[playground/src/exp3/ALU.scala 33:18]
    node _T_6 = tail(_T_5, 1) @[playground/src/exp3/ALU.scala 33:18]
    node _T_7 = sub(in.a, in.b) @[playground/src/exp3/ALU.scala 34:18]
    node _T_8 = tail(_T_7, 1) @[playground/src/exp3/ALU.scala 34:18]
    node _T_9 = not(in.a) @[playground/src/exp3/ALU.scala 35:13]
    node _T_10 = and(in.a, in.b) @[playground/src/exp3/ALU.scala 36:18]
    node _T_11 = or(in.a, in.b) @[playground/src/exp3/ALU.scala 37:18]
    node _T_12 = xor(in.a, in.b) @[playground/src/exp3/ALU.scala 38:18]
    node _T_13 = asSInt(in.a) @[playground/src/exp3/ALU.scala 39:18]
    node _T_14 = asSInt(in.b) @[playground/src/exp3/ALU.scala 39:32]
    node _T_15 = lt(_T_13, _T_14) @[playground/src/exp3/ALU.scala 39:25]
    node _T_16 = eq(in.a, in.b) @[playground/src/exp3/ALU.scala 40:18]
    node _ref_out_T = eq(UInt<1>("h1"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_1 = mux(_ref_out_T, _T_8, _T_6) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_2 = eq(UInt<2>("h2"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_3 = mux(_ref_out_T_2, _T_9, _ref_out_T_1) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_4 = eq(UInt<2>("h3"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_5 = mux(_ref_out_T_4, _T_10, _ref_out_T_3) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_6 = eq(UInt<3>("h4"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_7 = mux(_ref_out_T_6, _T_11, _ref_out_T_5) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_8 = eq(UInt<3>("h5"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_9 = mux(_ref_out_T_8, _T_12, _ref_out_T_7) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_10 = eq(UInt<3>("h6"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_11 = mux(_ref_out_T_10, _T_15, _ref_out_T_9) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_12 = eq(UInt<3>("h7"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node ref_out = mux(_ref_out_T_12, _T_16, _ref_out_T_11) @[playground/src/exp3/ALU.scala 42:38]
    node _T_17 = eq(out, ref_out) @[playground/src/exp3/ALU.scala 43:14]
    node _T_18 = asUInt(reset) @[playground/src/exp3/ALU.scala 43:9]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 43:9]
    when _T_19 : @[playground/src/exp3/ALU.scala 43:9]
      node _T_20 = eq(_T_17, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 43:9]
      when _T_20 : @[playground/src/exp3/ALU.scala 43:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: op %b ina %b inb %b out %b ref_out %b\n    at ALU.scala:43 assert(out === ref_out, \"op %%%%b ina %%%%b inb %%%%b out %%%%b ref_out %%%%b\", in.op, in.a, in.b, out, ref_out)\n", in.op, in.a, in.b, out, ref_out) : printf @[playground/src/exp3/ALU.scala 43:9]
      assert(clock, _T_17, UInt<1>("h1"), "") : assert @[playground/src/exp3/ALU.scala 43:9]


  module ALUTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of ALU @[playground/src/exp3/ALU.scala 47:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<7>, clock with :
      reset => (reset, UInt<7>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<7>("h7f"), UInt<7>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<2>, flip b : UInt<2>, flip op : UInt<3>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<7> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 2, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.op <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 4, 3) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 6, 5) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.op <= _m_in_WIRE.op @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for ALU-2bit, may finish after 128 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: ALU-2bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module ALU_1 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<3>, flip b : UInt<3>, flip op : UInt<3>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<3> @[playground/src/utils/Utils.scala 28:15]

    node is_sub = neq(in.op, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 14:23]
    node _b_inv_T = bits(is_sub, 0, 0) @[playground/src/exp3/ALU.scala 15:26]
    node _b_inv_T_1 = mux(_b_inv_T, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp3/ALU.scala 15:26]
    node b_inv = xor(in.b, _b_inv_T_1) @[playground/src/exp3/ALU.scala 15:20]
    node _sum_T = add(in.a, b_inv) @[playground/src/exp3/ALU.scala 16:18]
    node _sum_T_1 = tail(_sum_T, 1) @[playground/src/exp3/ALU.scala 16:18]
    node _sum_T_2 = add(_sum_T_1, is_sub) @[playground/src/exp3/ALU.scala 16:26]
    node sum = tail(_sum_T_2, 1) @[playground/src/exp3/ALU.scala 16:26]
    node _of_T = bits(in.a, 2, 2) @[playground/src/exp3/ALU.scala 17:17]
    node _of_T_1 = bits(in.b, 2, 2) @[playground/src/exp3/ALU.scala 17:35]
    node _of_T_2 = neq(_of_T, _of_T_1) @[playground/src/exp3/ALU.scala 17:27]
    node _of_T_3 = bits(sum, 2, 2) @[playground/src/exp3/ALU.scala 17:53]
    node _of_T_4 = bits(in.a, 2, 2) @[playground/src/exp3/ALU.scala 17:71]
    node _of_T_5 = neq(_of_T_3, _of_T_4) @[playground/src/exp3/ALU.scala 17:63]
    node of = and(_of_T_2, _of_T_5) @[playground/src/exp3/ALU.scala 17:46]
    node _less_T = bits(sum, 2, 2) @[playground/src/exp3/ALU.scala 18:17]
    node less = xor(_less_T, of) @[playground/src/exp3/ALU.scala 18:27]
    node _T = not(in.a) @[playground/src/exp3/ALU.scala 23:11]
    node _T_1 = and(in.a, in.b) @[playground/src/exp3/ALU.scala 24:16]
    node _T_2 = or(in.a, in.b) @[playground/src/exp3/ALU.scala 25:16]
    node _T_3 = xor(in.a, in.b) @[playground/src/exp3/ALU.scala 26:16]
    node _T_4 = eq(in.a, in.b) @[playground/src/exp3/ALU.scala 28:16]
    node _out_T = eq(in.op, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_2 = mux(_out_T_1, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_3 = and(_out_T_2, sum) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_4 = eq(in.op, UInt<1>("h1")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_6 = mux(_out_T_5, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_7 = and(_out_T_6, sum) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_8 = eq(in.op, UInt<2>("h2")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_9 = bits(_out_T_8, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_10 = mux(_out_T_9, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_11 = and(_out_T_10, _T) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_12 = eq(in.op, UInt<2>("h3")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_13 = bits(_out_T_12, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_14 = mux(_out_T_13, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_15 = and(_out_T_14, _T_1) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_16 = eq(in.op, UInt<3>("h4")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_17 = bits(_out_T_16, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_18 = mux(_out_T_17, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_19 = and(_out_T_18, _T_2) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_20 = eq(in.op, UInt<3>("h5")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_21 = bits(_out_T_20, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_22 = mux(_out_T_21, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_23 = and(_out_T_22, _T_3) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_24 = eq(in.op, UInt<3>("h6")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_25 = bits(_out_T_24, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_26 = mux(_out_T_25, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_27 = and(_out_T_26, less) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_28 = eq(in.op, UInt<3>("h7")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_29 = bits(_out_T_28, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_30 = mux(_out_T_29, UInt<3>("h7"), UInt<3>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_31 = and(_out_T_30, _T_4) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_32 = or(_out_T_3, _out_T_7) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_33 = or(_out_T_32, _out_T_11) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_34 = or(_out_T_33, _out_T_15) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_35 = or(_out_T_34, _out_T_19) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_36 = or(_out_T_35, _out_T_23) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_37 = or(_out_T_36, _out_T_27) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_38 = or(_out_T_37, _out_T_31) @[playground/src/exp3/ALU.scala 30:71]
    out <= _out_T_38 @[playground/src/exp3/ALU.scala 30:7]
    node _T_5 = add(in.a, in.b) @[playground/src/exp3/ALU.scala 33:18]
    node _T_6 = tail(_T_5, 1) @[playground/src/exp3/ALU.scala 33:18]
    node _T_7 = sub(in.a, in.b) @[playground/src/exp3/ALU.scala 34:18]
    node _T_8 = tail(_T_7, 1) @[playground/src/exp3/ALU.scala 34:18]
    node _T_9 = not(in.a) @[playground/src/exp3/ALU.scala 35:13]
    node _T_10 = and(in.a, in.b) @[playground/src/exp3/ALU.scala 36:18]
    node _T_11 = or(in.a, in.b) @[playground/src/exp3/ALU.scala 37:18]
    node _T_12 = xor(in.a, in.b) @[playground/src/exp3/ALU.scala 38:18]
    node _T_13 = asSInt(in.a) @[playground/src/exp3/ALU.scala 39:18]
    node _T_14 = asSInt(in.b) @[playground/src/exp3/ALU.scala 39:32]
    node _T_15 = lt(_T_13, _T_14) @[playground/src/exp3/ALU.scala 39:25]
    node _T_16 = eq(in.a, in.b) @[playground/src/exp3/ALU.scala 40:18]
    node _ref_out_T = eq(UInt<1>("h1"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_1 = mux(_ref_out_T, _T_8, _T_6) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_2 = eq(UInt<2>("h2"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_3 = mux(_ref_out_T_2, _T_9, _ref_out_T_1) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_4 = eq(UInt<2>("h3"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_5 = mux(_ref_out_T_4, _T_10, _ref_out_T_3) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_6 = eq(UInt<3>("h4"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_7 = mux(_ref_out_T_6, _T_11, _ref_out_T_5) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_8 = eq(UInt<3>("h5"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_9 = mux(_ref_out_T_8, _T_12, _ref_out_T_7) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_10 = eq(UInt<3>("h6"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_11 = mux(_ref_out_T_10, _T_15, _ref_out_T_9) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_12 = eq(UInt<3>("h7"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node ref_out = mux(_ref_out_T_12, _T_16, _ref_out_T_11) @[playground/src/exp3/ALU.scala 42:38]
    node _T_17 = eq(out, ref_out) @[playground/src/exp3/ALU.scala 43:14]
    node _T_18 = asUInt(reset) @[playground/src/exp3/ALU.scala 43:9]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 43:9]
    when _T_19 : @[playground/src/exp3/ALU.scala 43:9]
      node _T_20 = eq(_T_17, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 43:9]
      when _T_20 : @[playground/src/exp3/ALU.scala 43:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: op %b ina %b inb %b out %b ref_out %b\n    at ALU.scala:43 assert(out === ref_out, \"op %%%%b ina %%%%b inb %%%%b out %%%%b ref_out %%%%b\", in.op, in.a, in.b, out, ref_out)\n", in.op, in.a, in.b, out, ref_out) : printf @[playground/src/exp3/ALU.scala 43:9]
      assert(clock, _T_17, UInt<1>("h1"), "") : assert @[playground/src/exp3/ALU.scala 43:9]


  module ALUTest_1 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of ALU_1 @[playground/src/exp3/ALU.scala 47:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<9>, clock with :
      reset => (reset, UInt<9>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<9>("h1ff"), UInt<9>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<3>, flip b : UInt<3>, flip op : UInt<3>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<9> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 2, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.op <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 5, 3) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 8, 6) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.op <= _m_in_WIRE.op @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for ALU-3bit, may finish after 512 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: ALU-3bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module ALU_2 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<4>, flip b : UInt<4>, flip op : UInt<3>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<4> @[playground/src/utils/Utils.scala 28:15]

    node is_sub = neq(in.op, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 14:23]
    node _b_inv_T = bits(is_sub, 0, 0) @[playground/src/exp3/ALU.scala 15:26]
    node _b_inv_T_1 = mux(_b_inv_T, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp3/ALU.scala 15:26]
    node b_inv = xor(in.b, _b_inv_T_1) @[playground/src/exp3/ALU.scala 15:20]
    node _sum_T = add(in.a, b_inv) @[playground/src/exp3/ALU.scala 16:18]
    node _sum_T_1 = tail(_sum_T, 1) @[playground/src/exp3/ALU.scala 16:18]
    node _sum_T_2 = add(_sum_T_1, is_sub) @[playground/src/exp3/ALU.scala 16:26]
    node sum = tail(_sum_T_2, 1) @[playground/src/exp3/ALU.scala 16:26]
    node _of_T = bits(in.a, 3, 3) @[playground/src/exp3/ALU.scala 17:17]
    node _of_T_1 = bits(in.b, 3, 3) @[playground/src/exp3/ALU.scala 17:35]
    node _of_T_2 = neq(_of_T, _of_T_1) @[playground/src/exp3/ALU.scala 17:27]
    node _of_T_3 = bits(sum, 3, 3) @[playground/src/exp3/ALU.scala 17:53]
    node _of_T_4 = bits(in.a, 3, 3) @[playground/src/exp3/ALU.scala 17:71]
    node _of_T_5 = neq(_of_T_3, _of_T_4) @[playground/src/exp3/ALU.scala 17:63]
    node of = and(_of_T_2, _of_T_5) @[playground/src/exp3/ALU.scala 17:46]
    node _less_T = bits(sum, 3, 3) @[playground/src/exp3/ALU.scala 18:17]
    node less = xor(_less_T, of) @[playground/src/exp3/ALU.scala 18:27]
    node _T = not(in.a) @[playground/src/exp3/ALU.scala 23:11]
    node _T_1 = and(in.a, in.b) @[playground/src/exp3/ALU.scala 24:16]
    node _T_2 = or(in.a, in.b) @[playground/src/exp3/ALU.scala 25:16]
    node _T_3 = xor(in.a, in.b) @[playground/src/exp3/ALU.scala 26:16]
    node _T_4 = eq(in.a, in.b) @[playground/src/exp3/ALU.scala 28:16]
    node _out_T = eq(in.op, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_2 = mux(_out_T_1, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_3 = and(_out_T_2, sum) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_4 = eq(in.op, UInt<1>("h1")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_6 = mux(_out_T_5, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_7 = and(_out_T_6, sum) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_8 = eq(in.op, UInt<2>("h2")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_9 = bits(_out_T_8, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_10 = mux(_out_T_9, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_11 = and(_out_T_10, _T) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_12 = eq(in.op, UInt<2>("h3")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_13 = bits(_out_T_12, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_14 = mux(_out_T_13, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_15 = and(_out_T_14, _T_1) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_16 = eq(in.op, UInt<3>("h4")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_17 = bits(_out_T_16, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_18 = mux(_out_T_17, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_19 = and(_out_T_18, _T_2) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_20 = eq(in.op, UInt<3>("h5")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_21 = bits(_out_T_20, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_22 = mux(_out_T_21, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_23 = and(_out_T_22, _T_3) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_24 = eq(in.op, UInt<3>("h6")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_25 = bits(_out_T_24, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_26 = mux(_out_T_25, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_27 = and(_out_T_26, less) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_28 = eq(in.op, UInt<3>("h7")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_29 = bits(_out_T_28, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_30 = mux(_out_T_29, UInt<4>("hf"), UInt<4>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_31 = and(_out_T_30, _T_4) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_32 = or(_out_T_3, _out_T_7) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_33 = or(_out_T_32, _out_T_11) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_34 = or(_out_T_33, _out_T_15) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_35 = or(_out_T_34, _out_T_19) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_36 = or(_out_T_35, _out_T_23) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_37 = or(_out_T_36, _out_T_27) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_38 = or(_out_T_37, _out_T_31) @[playground/src/exp3/ALU.scala 30:71]
    out <= _out_T_38 @[playground/src/exp3/ALU.scala 30:7]
    node _T_5 = add(in.a, in.b) @[playground/src/exp3/ALU.scala 33:18]
    node _T_6 = tail(_T_5, 1) @[playground/src/exp3/ALU.scala 33:18]
    node _T_7 = sub(in.a, in.b) @[playground/src/exp3/ALU.scala 34:18]
    node _T_8 = tail(_T_7, 1) @[playground/src/exp3/ALU.scala 34:18]
    node _T_9 = not(in.a) @[playground/src/exp3/ALU.scala 35:13]
    node _T_10 = and(in.a, in.b) @[playground/src/exp3/ALU.scala 36:18]
    node _T_11 = or(in.a, in.b) @[playground/src/exp3/ALU.scala 37:18]
    node _T_12 = xor(in.a, in.b) @[playground/src/exp3/ALU.scala 38:18]
    node _T_13 = asSInt(in.a) @[playground/src/exp3/ALU.scala 39:18]
    node _T_14 = asSInt(in.b) @[playground/src/exp3/ALU.scala 39:32]
    node _T_15 = lt(_T_13, _T_14) @[playground/src/exp3/ALU.scala 39:25]
    node _T_16 = eq(in.a, in.b) @[playground/src/exp3/ALU.scala 40:18]
    node _ref_out_T = eq(UInt<1>("h1"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_1 = mux(_ref_out_T, _T_8, _T_6) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_2 = eq(UInt<2>("h2"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_3 = mux(_ref_out_T_2, _T_9, _ref_out_T_1) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_4 = eq(UInt<2>("h3"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_5 = mux(_ref_out_T_4, _T_10, _ref_out_T_3) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_6 = eq(UInt<3>("h4"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_7 = mux(_ref_out_T_6, _T_11, _ref_out_T_5) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_8 = eq(UInt<3>("h5"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_9 = mux(_ref_out_T_8, _T_12, _ref_out_T_7) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_10 = eq(UInt<3>("h6"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_11 = mux(_ref_out_T_10, _T_15, _ref_out_T_9) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_12 = eq(UInt<3>("h7"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node ref_out = mux(_ref_out_T_12, _T_16, _ref_out_T_11) @[playground/src/exp3/ALU.scala 42:38]
    node _T_17 = eq(out, ref_out) @[playground/src/exp3/ALU.scala 43:14]
    node _T_18 = asUInt(reset) @[playground/src/exp3/ALU.scala 43:9]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 43:9]
    when _T_19 : @[playground/src/exp3/ALU.scala 43:9]
      node _T_20 = eq(_T_17, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 43:9]
      when _T_20 : @[playground/src/exp3/ALU.scala 43:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: op %b ina %b inb %b out %b ref_out %b\n    at ALU.scala:43 assert(out === ref_out, \"op %%%%b ina %%%%b inb %%%%b out %%%%b ref_out %%%%b\", in.op, in.a, in.b, out, ref_out)\n", in.op, in.a, in.b, out, ref_out) : printf @[playground/src/exp3/ALU.scala 43:9]
      assert(clock, _T_17, UInt<1>("h1"), "") : assert @[playground/src/exp3/ALU.scala 43:9]


  module ALUTest_2 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of ALU_2 @[playground/src/exp3/ALU.scala 47:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<11>, clock with :
      reset => (reset, UInt<11>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<11>("h7ff"), UInt<11>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<4>, flip b : UInt<4>, flip op : UInt<3>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<11> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 2, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.op <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 6, 3) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 10, 7) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.op <= _m_in_WIRE.op @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for ALU-4bit, may finish after 2048 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: ALU-4bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module ALU_3 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<5>, flip b : UInt<5>, flip op : UInt<3>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<5> @[playground/src/utils/Utils.scala 28:15]

    node is_sub = neq(in.op, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 14:23]
    node _b_inv_T = bits(is_sub, 0, 0) @[playground/src/exp3/ALU.scala 15:26]
    node _b_inv_T_1 = mux(_b_inv_T, UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/exp3/ALU.scala 15:26]
    node b_inv = xor(in.b, _b_inv_T_1) @[playground/src/exp3/ALU.scala 15:20]
    node _sum_T = add(in.a, b_inv) @[playground/src/exp3/ALU.scala 16:18]
    node _sum_T_1 = tail(_sum_T, 1) @[playground/src/exp3/ALU.scala 16:18]
    node _sum_T_2 = add(_sum_T_1, is_sub) @[playground/src/exp3/ALU.scala 16:26]
    node sum = tail(_sum_T_2, 1) @[playground/src/exp3/ALU.scala 16:26]
    node _of_T = bits(in.a, 4, 4) @[playground/src/exp3/ALU.scala 17:17]
    node _of_T_1 = bits(in.b, 4, 4) @[playground/src/exp3/ALU.scala 17:35]
    node _of_T_2 = neq(_of_T, _of_T_1) @[playground/src/exp3/ALU.scala 17:27]
    node _of_T_3 = bits(sum, 4, 4) @[playground/src/exp3/ALU.scala 17:53]
    node _of_T_4 = bits(in.a, 4, 4) @[playground/src/exp3/ALU.scala 17:71]
    node _of_T_5 = neq(_of_T_3, _of_T_4) @[playground/src/exp3/ALU.scala 17:63]
    node of = and(_of_T_2, _of_T_5) @[playground/src/exp3/ALU.scala 17:46]
    node _less_T = bits(sum, 4, 4) @[playground/src/exp3/ALU.scala 18:17]
    node less = xor(_less_T, of) @[playground/src/exp3/ALU.scala 18:27]
    node _T = not(in.a) @[playground/src/exp3/ALU.scala 23:11]
    node _T_1 = and(in.a, in.b) @[playground/src/exp3/ALU.scala 24:16]
    node _T_2 = or(in.a, in.b) @[playground/src/exp3/ALU.scala 25:16]
    node _T_3 = xor(in.a, in.b) @[playground/src/exp3/ALU.scala 26:16]
    node _T_4 = eq(in.a, in.b) @[playground/src/exp3/ALU.scala 28:16]
    node _out_T = eq(in.op, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_2 = mux(_out_T_1, UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_3 = and(_out_T_2, sum) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_4 = eq(in.op, UInt<1>("h1")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_6 = mux(_out_T_5, UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_7 = and(_out_T_6, sum) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_8 = eq(in.op, UInt<2>("h2")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_9 = bits(_out_T_8, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_10 = mux(_out_T_9, UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_11 = and(_out_T_10, _T) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_12 = eq(in.op, UInt<2>("h3")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_13 = bits(_out_T_12, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_14 = mux(_out_T_13, UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_15 = and(_out_T_14, _T_1) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_16 = eq(in.op, UInt<3>("h4")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_17 = bits(_out_T_16, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_18 = mux(_out_T_17, UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_19 = and(_out_T_18, _T_2) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_20 = eq(in.op, UInt<3>("h5")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_21 = bits(_out_T_20, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_22 = mux(_out_T_21, UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_23 = and(_out_T_22, _T_3) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_24 = eq(in.op, UInt<3>("h6")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_25 = bits(_out_T_24, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_26 = mux(_out_T_25, UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_27 = and(_out_T_26, less) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_28 = eq(in.op, UInt<3>("h7")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_29 = bits(_out_T_28, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_30 = mux(_out_T_29, UInt<5>("h1f"), UInt<5>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_31 = and(_out_T_30, _T_4) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_32 = or(_out_T_3, _out_T_7) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_33 = or(_out_T_32, _out_T_11) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_34 = or(_out_T_33, _out_T_15) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_35 = or(_out_T_34, _out_T_19) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_36 = or(_out_T_35, _out_T_23) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_37 = or(_out_T_36, _out_T_27) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_38 = or(_out_T_37, _out_T_31) @[playground/src/exp3/ALU.scala 30:71]
    out <= _out_T_38 @[playground/src/exp3/ALU.scala 30:7]
    node _T_5 = add(in.a, in.b) @[playground/src/exp3/ALU.scala 33:18]
    node _T_6 = tail(_T_5, 1) @[playground/src/exp3/ALU.scala 33:18]
    node _T_7 = sub(in.a, in.b) @[playground/src/exp3/ALU.scala 34:18]
    node _T_8 = tail(_T_7, 1) @[playground/src/exp3/ALU.scala 34:18]
    node _T_9 = not(in.a) @[playground/src/exp3/ALU.scala 35:13]
    node _T_10 = and(in.a, in.b) @[playground/src/exp3/ALU.scala 36:18]
    node _T_11 = or(in.a, in.b) @[playground/src/exp3/ALU.scala 37:18]
    node _T_12 = xor(in.a, in.b) @[playground/src/exp3/ALU.scala 38:18]
    node _T_13 = asSInt(in.a) @[playground/src/exp3/ALU.scala 39:18]
    node _T_14 = asSInt(in.b) @[playground/src/exp3/ALU.scala 39:32]
    node _T_15 = lt(_T_13, _T_14) @[playground/src/exp3/ALU.scala 39:25]
    node _T_16 = eq(in.a, in.b) @[playground/src/exp3/ALU.scala 40:18]
    node _ref_out_T = eq(UInt<1>("h1"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_1 = mux(_ref_out_T, _T_8, _T_6) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_2 = eq(UInt<2>("h2"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_3 = mux(_ref_out_T_2, _T_9, _ref_out_T_1) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_4 = eq(UInt<2>("h3"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_5 = mux(_ref_out_T_4, _T_10, _ref_out_T_3) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_6 = eq(UInt<3>("h4"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_7 = mux(_ref_out_T_6, _T_11, _ref_out_T_5) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_8 = eq(UInt<3>("h5"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_9 = mux(_ref_out_T_8, _T_12, _ref_out_T_7) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_10 = eq(UInt<3>("h6"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_11 = mux(_ref_out_T_10, _T_15, _ref_out_T_9) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_12 = eq(UInt<3>("h7"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node ref_out = mux(_ref_out_T_12, _T_16, _ref_out_T_11) @[playground/src/exp3/ALU.scala 42:38]
    node _T_17 = eq(out, ref_out) @[playground/src/exp3/ALU.scala 43:14]
    node _T_18 = asUInt(reset) @[playground/src/exp3/ALU.scala 43:9]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 43:9]
    when _T_19 : @[playground/src/exp3/ALU.scala 43:9]
      node _T_20 = eq(_T_17, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 43:9]
      when _T_20 : @[playground/src/exp3/ALU.scala 43:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: op %b ina %b inb %b out %b ref_out %b\n    at ALU.scala:43 assert(out === ref_out, \"op %%%%b ina %%%%b inb %%%%b out %%%%b ref_out %%%%b\", in.op, in.a, in.b, out, ref_out)\n", in.op, in.a, in.b, out, ref_out) : printf @[playground/src/exp3/ALU.scala 43:9]
      assert(clock, _T_17, UInt<1>("h1"), "") : assert @[playground/src/exp3/ALU.scala 43:9]


  module ALUTest_3 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of ALU_3 @[playground/src/exp3/ALU.scala 47:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<13>, clock with :
      reset => (reset, UInt<13>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<13>("h1fff"), UInt<13>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<5>, flip b : UInt<5>, flip op : UInt<3>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<13> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 2, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.op <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 7, 3) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 12, 8) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.op <= _m_in_WIRE.op @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for ALU-5bit, may finish after 8192 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: ALU-5bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module ALU_4 :
    input clock : Clock
    input reset : UInt<1>
    output in : { flip a : UInt<6>, flip b : UInt<6>, flip op : UInt<3>} @[playground/src/utils/Utils.scala 27:14]
    output out : UInt<6> @[playground/src/utils/Utils.scala 28:15]

    node is_sub = neq(in.op, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 14:23]
    node _b_inv_T = bits(is_sub, 0, 0) @[playground/src/exp3/ALU.scala 15:26]
    node _b_inv_T_1 = mux(_b_inv_T, UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/exp3/ALU.scala 15:26]
    node b_inv = xor(in.b, _b_inv_T_1) @[playground/src/exp3/ALU.scala 15:20]
    node _sum_T = add(in.a, b_inv) @[playground/src/exp3/ALU.scala 16:18]
    node _sum_T_1 = tail(_sum_T, 1) @[playground/src/exp3/ALU.scala 16:18]
    node _sum_T_2 = add(_sum_T_1, is_sub) @[playground/src/exp3/ALU.scala 16:26]
    node sum = tail(_sum_T_2, 1) @[playground/src/exp3/ALU.scala 16:26]
    node _of_T = bits(in.a, 5, 5) @[playground/src/exp3/ALU.scala 17:17]
    node _of_T_1 = bits(in.b, 5, 5) @[playground/src/exp3/ALU.scala 17:35]
    node _of_T_2 = neq(_of_T, _of_T_1) @[playground/src/exp3/ALU.scala 17:27]
    node _of_T_3 = bits(sum, 5, 5) @[playground/src/exp3/ALU.scala 17:53]
    node _of_T_4 = bits(in.a, 5, 5) @[playground/src/exp3/ALU.scala 17:71]
    node _of_T_5 = neq(_of_T_3, _of_T_4) @[playground/src/exp3/ALU.scala 17:63]
    node of = and(_of_T_2, _of_T_5) @[playground/src/exp3/ALU.scala 17:46]
    node _less_T = bits(sum, 5, 5) @[playground/src/exp3/ALU.scala 18:17]
    node less = xor(_less_T, of) @[playground/src/exp3/ALU.scala 18:27]
    node _T = not(in.a) @[playground/src/exp3/ALU.scala 23:11]
    node _T_1 = and(in.a, in.b) @[playground/src/exp3/ALU.scala 24:16]
    node _T_2 = or(in.a, in.b) @[playground/src/exp3/ALU.scala 25:16]
    node _T_3 = xor(in.a, in.b) @[playground/src/exp3/ALU.scala 26:16]
    node _T_4 = eq(in.a, in.b) @[playground/src/exp3/ALU.scala 28:16]
    node _out_T = eq(in.op, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_1 = bits(_out_T, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_2 = mux(_out_T_1, UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_3 = and(_out_T_2, sum) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_4 = eq(in.op, UInt<1>("h1")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_5 = bits(_out_T_4, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_6 = mux(_out_T_5, UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_7 = and(_out_T_6, sum) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_8 = eq(in.op, UInt<2>("h2")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_9 = bits(_out_T_8, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_10 = mux(_out_T_9, UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_11 = and(_out_T_10, _T) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_12 = eq(in.op, UInt<2>("h3")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_13 = bits(_out_T_12, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_14 = mux(_out_T_13, UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_15 = and(_out_T_14, _T_1) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_16 = eq(in.op, UInt<3>("h4")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_17 = bits(_out_T_16, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_18 = mux(_out_T_17, UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_19 = and(_out_T_18, _T_2) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_20 = eq(in.op, UInt<3>("h5")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_21 = bits(_out_T_20, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_22 = mux(_out_T_21, UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_23 = and(_out_T_22, _T_3) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_24 = eq(in.op, UInt<3>("h6")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_25 = bits(_out_T_24, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_26 = mux(_out_T_25, UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_27 = and(_out_T_26, less) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_28 = eq(in.op, UInt<3>("h7")) @[playground/src/exp3/ALU.scala 30:43]
    node _out_T_29 = bits(_out_T_28, 0, 0) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_30 = mux(_out_T_29, UInt<6>("h3f"), UInt<6>("h0")) @[playground/src/exp3/ALU.scala 30:29]
    node _out_T_31 = and(_out_T_30, _T_4) @[playground/src/exp3/ALU.scala 30:55]
    node _out_T_32 = or(_out_T_3, _out_T_7) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_33 = or(_out_T_32, _out_T_11) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_34 = or(_out_T_33, _out_T_15) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_35 = or(_out_T_34, _out_T_19) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_36 = or(_out_T_35, _out_T_23) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_37 = or(_out_T_36, _out_T_27) @[playground/src/exp3/ALU.scala 30:71]
    node _out_T_38 = or(_out_T_37, _out_T_31) @[playground/src/exp3/ALU.scala 30:71]
    out <= _out_T_38 @[playground/src/exp3/ALU.scala 30:7]
    node _T_5 = add(in.a, in.b) @[playground/src/exp3/ALU.scala 33:18]
    node _T_6 = tail(_T_5, 1) @[playground/src/exp3/ALU.scala 33:18]
    node _T_7 = sub(in.a, in.b) @[playground/src/exp3/ALU.scala 34:18]
    node _T_8 = tail(_T_7, 1) @[playground/src/exp3/ALU.scala 34:18]
    node _T_9 = not(in.a) @[playground/src/exp3/ALU.scala 35:13]
    node _T_10 = and(in.a, in.b) @[playground/src/exp3/ALU.scala 36:18]
    node _T_11 = or(in.a, in.b) @[playground/src/exp3/ALU.scala 37:18]
    node _T_12 = xor(in.a, in.b) @[playground/src/exp3/ALU.scala 38:18]
    node _T_13 = asSInt(in.a) @[playground/src/exp3/ALU.scala 39:18]
    node _T_14 = asSInt(in.b) @[playground/src/exp3/ALU.scala 39:32]
    node _T_15 = lt(_T_13, _T_14) @[playground/src/exp3/ALU.scala 39:25]
    node _T_16 = eq(in.a, in.b) @[playground/src/exp3/ALU.scala 40:18]
    node _ref_out_T = eq(UInt<1>("h1"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_1 = mux(_ref_out_T, _T_8, _T_6) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_2 = eq(UInt<2>("h2"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_3 = mux(_ref_out_T_2, _T_9, _ref_out_T_1) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_4 = eq(UInt<2>("h3"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_5 = mux(_ref_out_T_4, _T_10, _ref_out_T_3) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_6 = eq(UInt<3>("h4"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_7 = mux(_ref_out_T_6, _T_11, _ref_out_T_5) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_8 = eq(UInt<3>("h5"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_9 = mux(_ref_out_T_8, _T_12, _ref_out_T_7) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_10 = eq(UInt<3>("h6"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_11 = mux(_ref_out_T_10, _T_15, _ref_out_T_9) @[playground/src/exp3/ALU.scala 42:38]
    node _ref_out_T_12 = eq(UInt<3>("h7"), in.op) @[playground/src/exp3/ALU.scala 42:38]
    node ref_out = mux(_ref_out_T_12, _T_16, _ref_out_T_11) @[playground/src/exp3/ALU.scala 42:38]
    node _T_17 = eq(out, ref_out) @[playground/src/exp3/ALU.scala 43:14]
    node _T_18 = asUInt(reset) @[playground/src/exp3/ALU.scala 43:9]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 43:9]
    when _T_19 : @[playground/src/exp3/ALU.scala 43:9]
      node _T_20 = eq(_T_17, UInt<1>("h0")) @[playground/src/exp3/ALU.scala 43:9]
      when _T_20 : @[playground/src/exp3/ALU.scala 43:9]
        printf(clock, UInt<1>("h1"), "Assertion failed: op %b ina %b inb %b out %b ref_out %b\n    at ALU.scala:43 assert(out === ref_out, \"op %%%%b ina %%%%b inb %%%%b out %%%%b ref_out %%%%b\", in.op, in.a, in.b, out, ref_out)\n", in.op, in.a, in.b, out, ref_out) : printf @[playground/src/exp3/ALU.scala 43:9]
      assert(clock, _T_17, UInt<1>("h1"), "") : assert @[playground/src/exp3/ALU.scala 43:9]


  module ALUTest_4 :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst m of ALU_4 @[playground/src/exp3/ALU.scala 47:17]
    m.clock <= clock
    m.reset <= reset
    reg cnt : UInt<15>, clock with :
      reset => (reset, UInt<15>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire finish_1 : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    finish_1 <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _wrap_wrap_T = mux(UInt<1>("h1"), UInt<15>("h7fff"), UInt<15>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node wrap_wrap = eq(cnt, _wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _wrap_value_T = add(cnt, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cnt <= _wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      finish_1 <= wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    wire _m_in_WIRE : { flip a : UInt<6>, flip b : UInt<6>, flip op : UInt<3>} @[playground/src/utils/Utils.scala 33:27]
    wire _m_in_WIRE_1 : UInt<15> @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE_1 <= cnt @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T = bits(_m_in_WIRE_1, 2, 0) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.op <= _m_in_T @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_1 = bits(_m_in_WIRE_1, 8, 3) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.b <= _m_in_T_1 @[playground/src/utils/Utils.scala 33:27]
    node _m_in_T_2 = bits(_m_in_WIRE_1, 14, 9) @[playground/src/utils/Utils.scala 33:27]
    _m_in_WIRE.a <= _m_in_T_2 @[playground/src/utils/Utils.scala 33:27]
    m.in.op <= _m_in_WIRE.op @[playground/src/utils/Utils.scala 33:12]
    m.in.b <= _m_in_WIRE.b @[playground/src/utils/Utils.scala 33:12]
    m.in.a <= _m_in_WIRE.a @[playground/src/utils/Utils.scala 33:12]
    reg start : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 47:24]
    start <= UInt<1>("h1") @[playground/src/utils/Utils.scala 47:24]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[playground/src/utils/Utils.scala 48:28]
    REG <= start @[playground/src/utils/Utils.scala 48:28]
    node _T = eq(REG, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:20]
    node _T_1 = and(start, _T) @[playground/src/utils/Utils.scala 48:17]
    when _T_1 : @[playground/src/utils/Utils.scala 48:37]
      node _T_2 = asUInt(reset) @[playground/src/utils/Utils.scala 48:45]
      node _T_3 = eq(_T_2, UInt<1>("h0")) @[playground/src/utils/Utils.scala 48:45]
      when _T_3 : @[playground/src/utils/Utils.scala 48:45]
        printf(clock, UInt<1>("h1"), "Starting test for ALU-6bit, may finish after 32768 cycles\n") : printf @[playground/src/utils/Utils.scala 48:45]
    reg finish_r : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[playground/src/utils/Utils.scala 50:26]
    when finish_1 : @[playground/src/utils/Utils.scala 50:26]
      finish_r <= UInt<1>("h1") @[playground/src/utils/Utils.scala 50:26]
    finish <= finish_r @[playground/src/utils/Utils.scala 50:14]
    reg cycle : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[playground/src/utils/WCounter.scala 9:22]
    wire cycle_wrap : UInt<1> @[playground/src/utils/WCounter.scala 32:24]
    cycle_wrap <= UInt<1>("h0") @[playground/src/utils/WCounter.scala 32:24]
    when UInt<1>("h1") : @[playground/src/utils/WCounter.scala 33:16]
      node _cycle_wrap_wrap_T = mux(UInt<1>("h1"), UInt<64>("hffffffffffffffff"), UInt<64>("h0")) @[playground/src/utils/WCounter.scala 17:30]
      node cycle_wrap_wrap = eq(cycle, _cycle_wrap_wrap_T) @[playground/src/utils/WCounter.scala 17:22]
      node _cycle_wrap_value_T = add(cycle, UInt<1>("h1")) @[playground/src/utils/WCounter.scala 18:20]
      node _cycle_wrap_value_T_1 = tail(_cycle_wrap_value_T, 1) @[playground/src/utils/WCounter.scala 18:20]
      cycle <= _cycle_wrap_value_T_1 @[playground/src/utils/WCounter.scala 18:11]
      cycle_wrap <= cycle_wrap_wrap @[playground/src/utils/WCounter.scala 33:23]
    node _T_4 = eq(finish, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:11]
    node _T_5 = and(_T_4, finish_1) @[playground/src/utils/Utils.scala 52:21]
    when _T_5 : @[playground/src/utils/Utils.scala 52:32]
      node _T_6 = add(cycle, UInt<1>("h1")) @[playground/src/utils/Utils.scala 52:84]
      node _T_7 = asUInt(reset) @[playground/src/utils/Utils.scala 52:40]
      node _T_8 = eq(_T_7, UInt<1>("h0")) @[playground/src/utils/Utils.scala 52:40]
      when _T_8 : @[playground/src/utils/Utils.scala 52:40]
        printf(clock, UInt<1>("h1"), "Finish after %d cycles: ALU-6bit\n", _T_6) : printf_1 @[playground/src/utils/Utils.scala 52:40]


  module Exp3AllTest :
    input clock : Clock
    input reset : UInt<1>
    output finish : UInt<1> @[playground/src/utils/Utils.scala 57:18]

    inst modules_0 of RCATest @[playground/src/exp3/Test.scala 6:41]
    modules_0.clock <= clock
    modules_0.reset <= reset
    inst modules_1 of RCATest_1 @[playground/src/exp3/Test.scala 6:41]
    modules_1.clock <= clock
    modules_1.reset <= reset
    inst modules_2 of RCATest_2 @[playground/src/exp3/Test.scala 6:41]
    modules_2.clock <= clock
    modules_2.reset <= reset
    inst modules_3 of RCATest_3 @[playground/src/exp3/Test.scala 6:41]
    modules_3.clock <= clock
    modules_3.reset <= reset
    inst modules_4 of RCATest_4 @[playground/src/exp3/Test.scala 6:41]
    modules_4.clock <= clock
    modules_4.reset <= reset
    inst modules_5 of RCATest_5 @[playground/src/exp3/Test.scala 6:41]
    modules_5.clock <= clock
    modules_5.reset <= reset
    inst modules_6 of RCATest_6 @[playground/src/exp3/Test.scala 6:41]
    modules_6.clock <= clock
    modules_6.reset <= reset
    inst modules_7 of RCATest_7 @[playground/src/exp3/Test.scala 6:41]
    modules_7.clock <= clock
    modules_7.reset <= reset
    inst modules_8 of CLATest @[playground/src/exp3/Test.scala 7:44]
    modules_8.clock <= clock
    modules_8.reset <= reset
    inst modules_9 of CLATest_1 @[playground/src/exp3/Test.scala 7:44]
    modules_9.clock <= clock
    modules_9.reset <= reset
    inst modules_10 of ALUTest @[playground/src/exp3/Test.scala 8:41]
    modules_10.clock <= clock
    modules_10.reset <= reset
    inst modules_11 of ALUTest_1 @[playground/src/exp3/Test.scala 8:41]
    modules_11.clock <= clock
    modules_11.reset <= reset
    inst modules_12 of ALUTest_2 @[playground/src/exp3/Test.scala 8:41]
    modules_12.clock <= clock
    modules_12.reset <= reset
    inst modules_13 of ALUTest_3 @[playground/src/exp3/Test.scala 8:41]
    modules_13.clock <= clock
    modules_13.reset <= reset
    inst modules_14 of ALUTest_4 @[playground/src/exp3/Test.scala 8:41]
    modules_14.clock <= clock
    modules_14.reset <= reset
    node _finish_T = and(modules_0.finish, modules_1.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_1 = and(_finish_T, modules_2.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_2 = and(_finish_T_1, modules_3.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_3 = and(_finish_T_2, modules_4.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_4 = and(_finish_T_3, modules_5.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_5 = and(_finish_T_4, modules_6.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_6 = and(_finish_T_5, modules_7.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_7 = and(_finish_T_6, modules_8.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_8 = and(_finish_T_7, modules_9.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_9 = and(_finish_T_8, modules_10.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_10 = and(_finish_T_9, modules_11.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_11 = and(_finish_T_10, modules_12.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_12 = and(_finish_T_11, modules_13.finish) @[playground/src/exp3/Test.scala 9:43]
    node _finish_T_13 = and(_finish_T_12, modules_14.finish) @[playground/src/exp3/Test.scala 9:43]
    finish <= _finish_T_13 @[playground/src/exp3/Test.scala 9:10]
